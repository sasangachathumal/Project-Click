 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.order;

import biz.project.cms.controller.BatchController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Batch;
import biz.project.cms.model.Item;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vihanga
 */
public class QtyBatches extends javax.swing.JDialog {

    private static final String solve = "Solve";
    private final DefaultTableModel model;
    private Item item;
    public boolean isOrder;

    /**
     *
     * Creates new form QtyBatches
     *
     * @param parent
     * @param modal
     */
    public QtyBatches(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        model = (DefaultTableModel) jTable1.getModel();
        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        jTable1.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enter, solve);
        jTable1.setOpaque(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setBackground(new Color(204, 204, 204));
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblQty = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        lblItemCode = new javax.swing.JLabel();
        txtMinPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jTable1.setFont(new java.awt.Font("sansserif", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch ID", "Qty", "Unit Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(21);
        jTable1.setSelectionBackground(new java.awt.Color(0, 153, 102));
        jTable1.setSelectionForeground(new java.awt.Color(255, 238, 238));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        jLabel1.setText("Available Qty ");

        lblQty.setFont(new java.awt.Font("sansserif", 1, 22)); // NOI18N

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jLabel3.setText("<html><font color=gray>[F8]</font> QTY</html>");

        txtQty.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        txtQty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        lblItemCode.setFont(new java.awt.Font("sansserif", 0, 22)); // NOI18N
        lblItemCode.setForeground(new java.awt.Color(102, 0, 0));
        lblItemCode.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblItemCode.setText("ITEM");

        txtMinPrice.setEditable(false);
        txtMinPrice.setBackground(new java.awt.Color(204, 204, 204));
        txtMinPrice.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtMinPrice.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jLabel5.setText("Min. Price");

        txtSellingPrice.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtSellingPrice.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSellingPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSellingPriceActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        jLabel6.setText("<html><font color=gray>[F9]</font> Selling Price</html>");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jLabel2.setText("F4 - Select Table");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblItemCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblQty, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(78, 78, 78)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(3, 3, 3)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtSellingPrice)
                                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMinPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblQty, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64))
        );

        jMenuBar2.setPreferredSize(new java.awt.Dimension(70, 0));

        jMenu3.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem1.setText("back");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem2.setText("back");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem3.setText("sell");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem4.setText("qty");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        if (jTable1.getSelectedRow() != -1) {
            try {
                searchBat();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(QtyBatches.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(QtyBatches.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTable1MouseReleased

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        if (!txtQty.getText().isEmpty()) {
            addorderDetail();
        } else {
            Toolkit.getDefaultToolkit().beep();
            txtQty.requestFocus();
        }

    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtSellingPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSellingPriceActionPerformed
        txtQty.requestFocus();
    }//GEN-LAST:event_txtSellingPriceActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (jTable1.getSelectedRow() != -1) {
                try {
                    searchBat();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(QtyBatches.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(QtyBatches.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (!isOrder) {
            this.setVisible(false);
            CustomerOrder.itemSearch.setVisible(true);
        } else {
            dispose();
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jTable1.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        txtSellingPrice.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        txtQty.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        char[] c1 = txtQty.getText().toCharArray();
        if (c1.length > 4) {
            getToolkit().beep();
            txtQty.setText("");
            txtQty.setBackground(new Color(1, 2, 3));
        }
    }//GEN-LAST:event_txtQtyKeyPressed

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        txtQty.setBackground(Color.white);        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && !(c == KeyEvent.VK_BACK_SPACE || c == KeyEvent.VK_DELETE || c == KeyEvent.VK_ENTER)) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtQtyKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QtyBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QtyBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QtyBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QtyBatches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                QtyBatches dialog = new QtyBatches(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblItemCode;
    private javax.swing.JLabel lblQty;
    private javax.swing.JTextField txtMinPrice;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSellingPrice;
    // End of variables declaration//GEN-END:variables

    private void searchBat() throws ClassNotFoundException, SQLException {
        Batch batch = BatchController.searchBatch(model.getValueAt(jTable1.getSelectedRow(), 0).toString());
        if (batch != null) {
            lblQty.setText(model.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtMinPrice.setText(batch.getListPrice() + "");
            txtQty.requestFocus();
        }
    }

    private void addorderDetail() {
        try {
            String uPrice = model.getValueAt(jTable1.getSelectedRow(), 2).toString();
            String wPrice = txtMinPrice.getText();
            String qty = txtQty.getText();

            if (item != null && !txtMinPrice.getText().isEmpty() && !lblQty.getText().isEmpty()) {
                if (!txtSellingPrice.getText().isEmpty()) {
                    if (Double.parseDouble(txtMinPrice.getText()) <= Double.parseDouble(txtSellingPrice.getText())
                            && Double.parseDouble(model.getValueAt(jTable1.getSelectedRow(), 2).toString()) >= Double.parseDouble(txtSellingPrice.getText())) {
                        uPrice = txtSellingPrice.getText();
                        wPrice = txtSellingPrice.getText();
                    } else {
                        uPrice = null;
                        txtSellingPrice.setBackground(new Color(235, 230, 165));
                        JOptionPane.showMessageDialog(this, "Invalid selling price !\n Price should be in between Rs."
                                + txtMinPrice.getText() + " & Rs." + model.getValueAt(jTable1.getSelectedRow(), 2).toString());
                        txtSellingPrice.requestFocus();
                        txtSellingPrice.selectAll();
                    }
                }
                boolean contain = false;
                int index = -1;
                int oldQty = 0;
                for (int i = 0; i < CustomerOrder.tableOrderDetail.getRowCount(); i++) {
                    if (CustomerOrder.dtm.getValueAt(i, 1).equals(model.getValueAt(jTable1.getSelectedRow(), 0).toString())) {
                        contain = true;
                        index = i;
                        oldQty = Integer.parseInt(CustomerOrder.dtm.getValueAt(i, 4).toString());
                        break;
                    }
                }
                if (uPrice != null) {
                    if (Integer.parseInt(txtQty.getText()) > 0
                            && Integer.parseInt(txtQty.getText()) <= (Integer.parseInt(lblQty.getText()) + oldQty)) {
                        if (!contain) {
                            if (CustomerOrder.chkWholeSale.isSelected()) {
                                CustomerOrder.addDetail(wPrice, qty, item, model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                            } else {
                                CustomerOrder.addDetail(uPrice, qty, item, model.getValueAt(jTable1.getSelectedRow(), 0).toString());
                            }
                            dispose();
                        } else {
                            Object[] options = {"Update", "Replace", "Cancel"};
                            int update = JOptionPane.showOptionDialog(this, "Item is already added from the selected batch.\n"
                                    + "Do you want to update item quantity ?", "Warning", JOptionPane.CANCEL_OPTION,
                                    JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                            if (update == 0) {
                                int newQty = Integer.parseInt(qty) + oldQty;
                                if (newQty > (Integer.parseInt(lblQty.getText())) + oldQty) {
                                    int totQOH = JOptionPane.showConfirmDialog(this, "Updated quantity exceeds the batch's QOH!\n"
                                            + "Do you want to add the total QOH ?");
                                    if (totQOH == 0) {
                                        CustomerOrder.dtm.setValueAt(Integer.parseInt(lblQty.getText()) + oldQty, index, 4);
                                        CustomerOrder.dtm.setValueAt(uPrice, index, 5);
                                        double price = Double.parseDouble(uPrice) * Integer.parseInt(CustomerOrder.dtm.getValueAt(index, 4).toString());
                                        CustomerOrder.dtm.setValueAt(price, index, 6);
                                        //         updateFile(CustomerOrder.dtm.getValueAt(index, 1).toString(), CustomerOrder.dtm.getValueAt(index, 4).toString());
                                        dispose();
                                    } else {
                                        txtQty.setBackground(new Color(235, 230, 165));
                                        txtQty.requestFocus();
                                        txtQty.selectAll();
                                    }
                                } else {
                                    CustomerOrder.dtm.setValueAt(newQty, index, 4);
                                    CustomerOrder.dtm.setValueAt(uPrice, index, 5);
                                    double price = Double.parseDouble(uPrice) * Integer.parseInt(CustomerOrder.dtm.getValueAt(index, 4).toString());
                                    CustomerOrder.dtm.setValueAt(price, index, 6);
                                    //      updateFile(CustomerOrder.dtm.getValueAt(index, 1).toString(), CustomerOrder.dtm.getValueAt(index, 4).toString());
                                    // int available = Integer.parseInt(lblQty.getText()) - Integer.parseInt(qty);
                                    //       clearTextFields(available);
                                    dispose();
                                }
                            } else if (update == 1) {
                                CustomerOrder.dtm.setValueAt(qty, index, 4);
                                CustomerOrder.dtm.setValueAt(uPrice, index, 5);
                                double price = Double.parseDouble(uPrice) * Integer.parseInt(CustomerOrder.dtm.getValueAt(index, 4).toString());
                                CustomerOrder.dtm.setValueAt(price, index, 6);
                                //    updateFile(dtm.getValueAt(index, 1).toString(), CustomerOrder.dtm.getValueAt(index, 4).toString());
                                //  int available = Integer.parseInt(lblQty.getText()) + oldQty - Integer.parseInt(qty);
                                //   clearTextFields(available);
                                dispose();
                            }
                        }
                    } else {
                        int newQty = oldQty + Integer.parseInt(lblQty.getText());
                        JOptionPane.showMessageDialog(this, "Invalid Quantity!\nMaximum Quantity for the batch is " + newQty);
                        txtQty.setBackground(new Color(235, 230, 165));
                        txtQty.requestFocus();
                        txtQty.selectAll();
                    }
                }
            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            StringWriter sw = new StringWriter();
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } catch (NumberFormatException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, "Invalid number insert!   Please check your inputs.");
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } catch (ArrayIndexOutOfBoundsException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, "Please select a batch !");
            ex.printStackTrace(new PrintWriter(sw));
            txtQty.setText("");
            jTable1.requestFocus();
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    public void setItem(Item item) throws ClassNotFoundException, SQLException {
        this.item = item;
        model.setRowCount(0);
        lblItemCode.setText(item.getCode() + " - " + item.getDesciption());
        setTable();
    }

    public Item getItem() {
        return item;
    }

    private void setTable() throws ClassNotFoundException, SQLException {
        ArrayList<Batch> batchs = BatchController.searchBatchByItemCode(item.getCode());
        if (!batchs.isEmpty()) {
            for (Batch batch : batchs) {
                int reserved = 0;
                for (int i = 0; i < CustomerOrder.tableOrderDetail.getRowCount(); i++) {
                    if (Integer.toString(batch.getBatchId()).equals(CustomerOrder.dtm.getValueAt(i, 1))) {
                        reserved = Integer.parseInt(CustomerOrder.dtm.getValueAt(i, 4).toString());
                        break;
                    }
                }
                int availableQty = batch.getQty() - reserved;
                Object o[] = {batch.getBatchId(), availableQty, batch.getUnitPrice()};
                model.addRow(o);
            }
        } else {
            this.dispose();
            JOptionPane.showMessageDialog(this, "Batch quantity is empty !");
        }

        jTable1.requestFocus();

    }

    public void setTable1(String batchID, int qty, String priceSell) throws ClassNotFoundException, SQLException {
        if (batchID != null) {
            Batch batch = BatchController.searchBatch(batchID);
            this.item = ItemController.searchIstemByCode(batch.getItemCode());
            lblItemCode.setText(item.getCode() + " - " + item.getDesciption());
            int availableQty = batch.getQty() - qty;
            txtSellingPrice.setText(priceSell);
            Object o[] = {batch.getBatchId(), availableQty, batch.getUnitPrice()};
            model.addRow(o);
        } else {
            this.dispose();
            JOptionPane.showMessageDialog(this, "Batch quantity is empty !");
        }
        jTable1.requestFocus();

    }

}
