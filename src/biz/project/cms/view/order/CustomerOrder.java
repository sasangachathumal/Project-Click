package biz.project.cms.view.order;

import biz.project.cms.controller.CustomerController;
import biz.project.cms.controller.CustomerSerialController;
import biz.project.cms.controller.DealerSerialController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.controller.OrderController;
import biz.project.cms.controller.OrderDetailController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.fileaccess.OrderFileAccess;
import biz.project.cms.fileaccess.OrderSerialFileAccess;
import biz.project.cms.model.Customer;
import biz.project.cms.model.CustomerSerial;
import biz.project.cms.model.DealerSerial;
import biz.project.cms.model.Item;
import biz.project.cms.model.OrderDetail;
import biz.project.cms.model.Orders;
import biz.project.cms.model.TempOrder;
import biz.project.cms.model.TempSerial;
import biz.project.cms.model.User;
import biz.project.cms.other.IdGenerator;
import biz.project.cms.other.Validation;
import biz.project.cms.view.main.HomeFrame;
import biz.project.cms.view.main.ItemSearch;
import biz.project.cms.view.other.Progress;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicMenuBarUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vihanga
 */
public class CustomerOrder extends javax.swing.JFrame {

    private final StringWriter sw;
    public static DefaultTableModel dtm;
    public static ItemSearch itemSearch;
    private HashMap<String, ArrayList<TempSerial>> hashMap;
    private int clickIndex = -1;
    private User user;
    private static final OrderFileAccess FILE_ACCESS = new OrderFileAccess();
    private static final OrderSerialFileAccess SERIAL_FILE_ACCESS = new OrderSerialFileAccess();
    private Customer customer2;
    private static final String solve = "solve";

    /**
     * Creates new form CustomerOrder
     */
    public CustomerOrder() {
        this.sw = new StringWriter();
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        user = HomeFrame.user;
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        setExtendedState(MAXIMIZED_BOTH);
        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        tableOrderDetail.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enter, solve);
        dtm = (DefaultTableModel) tableOrderDetail.getModel();
        tableOrderDetail.setOpaque(true);
        tableOrderDetail.setFillsViewportHeight(true);
        tableOrderDetail.setBackground(Color.WHITE);
        hashMap = new HashMap<>();
        setLocationRelativeTo(null);
        try {
            getNewOrderId();
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
        item.setOpaque(true);
        item.setUI(new BasicMenuBarUI() {
            @Override
            public void paint(Graphics g, JComponent c) {
                g.setColor(Color.WHITE);
                g.fillRect(0, 0, c.getWidth(), c.getHeight());
            }
        });
        txtUser.setText(HomeFrame.user.getUsername());
        txtBarcode.requestFocus();
        txtBarcode.selectAll();
        txtDate.setText(getDate());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        txtDiscount = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtBarcode = new javax.swing.JTextField();
        txtKey = new javax.swing.JTextField();
        chkWholeSale = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrderDetail = new javax.swing.JTable();
        txtNIC1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtName1 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtMobile1 = new javax.swing.JTextField();
        txtOID = new javax.swing.JLabel();
        txtUser = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtDate = new javax.swing.JLabel();
        btnPlace = new javax.swing.JButton();
        chkNic1 = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        item = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("POS - INVOICE");
        setMinimumSize(new java.awt.Dimension(1000, 580));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Order ID :");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("User : ");

        lblTotal.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 0, 102));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setText("Rs. 0.00");
        lblTotal.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel29.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel29.setText("Sub Total : ");

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(242, 242, 242));
        txtTotal.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0.00");
        txtTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        txtDiscount.setFont(new java.awt.Font("sansserif", 3, 15)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(102, 102, 102));
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("0.00");
        txtDiscount.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtDiscount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDiscountFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDiscountFocusLost(evt);
            }
        });
        txtDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDiscountActionPerformed(evt);
            }
        });
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDiscountKeyTyped(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel27.setText("<html><font color=gray>[F6]</font> Discount</html>");

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("<HTML><FONT COLOR=BLUE>F2</FONT> - NEW ORDER</HTML>");
        jLabel2.setToolTipText("");

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("<HTML><FONT COLOR=BLUE>INSERT</FONT> - BARCODE</HTML>");

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("<HTML><FONT COLOR=BLUE>F12</FONT> - SEARCH</HTML>");

        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("<HTML><FONT COLOR=BLUE>F9</FONT> - SELECT TABLE</HTML>");

        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("<HTML><FONT COLOR=BLUE>F8</FONT> - WHOLESALE</HTML>");

        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("<HTML><FONT COLOR=BLUE>F4</FONT> - SAVE ORDER</HTML>");

        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("<HTML><FONT COLOR=BLUE>Alt+C</FONT> - INSERT CUSTOMER</HTML>");

        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("<HTML><FONT COLOR=BLUE>Ctrl+SPACE</FONT> - CALCULATOR</HTML>");

        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("<HTML><FONT COLOR=BLUE>F5</FONT> - FULL SCREEN</HTML>");

        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("<HTML><FONT COLOR=BLUE>F6</FONT> - ADD DISCOUNT</HTML>");

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setText("<html><font color=gray>[Insert]</font> Barcode</html>");

        txtBarcode.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtBarcode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtBarcode.setCaretColor(new java.awt.Color(116, 7, 7));
        txtBarcode.setSelectionColor(new java.awt.Color(153, 153, 255));
        txtBarcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBarcodeFocusGained(evt);
            }
        });
        txtBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarcodeActionPerformed(evt);
            }
        });
        txtBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBarcodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBarcodeKeyReleased(evt);
            }
        });

        txtKey.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtKey.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtKey.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKeyFocusGained(evt);
            }
        });
        txtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyActionPerformed(evt);
            }
        });
        txtKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeyKeyReleased(evt);
            }
        });

        chkWholeSale.setBackground(new java.awt.Color(255, 255, 255));
        chkWholeSale.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        chkWholeSale.setForeground(new java.awt.Color(102, 102, 102));
        chkWholeSale.setText("<html>Wholesale<font color=gray>  [F8]</font></html>");
        chkWholeSale.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkWholeSaleItemStateChanged(evt);
            }
        });

        tableOrderDetail.setBackground(new java.awt.Color(246, 246, 255));
        tableOrderDetail.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableOrderDetail.setForeground(new java.awt.Color(1, 1, 29));
        tableOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "BatchID", "Description", "Warranty", "Qty", "Unit Price", "Amount", "WA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderDetail.setToolTipText("<html>Enter - Edit Line <br>Space - Add Warranty</html>");
        tableOrderDetail.setRowHeight(22);
        tableOrderDetail.setSelectionBackground(new java.awt.Color(0, 204, 153));
        tableOrderDetail.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tableOrderDetail.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableOrderDetail.getTableHeader().setReorderingAllowed(false);
        tableOrderDetail.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                tableOrderDetailComponentAdded(evt);
            }
        });
        tableOrderDetail.addHierarchyListener(new java.awt.event.HierarchyListener() {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                tableOrderDetailHierarchyChanged(evt);
            }
        });
        tableOrderDetail.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tableOrderDetailAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                tableOrderDetailAncestorRemoved(evt);
            }
        });
        tableOrderDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableOrderDetailMouseReleased(evt);
            }
        });
        tableOrderDetail.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tableOrderDetailComponentShown(evt);
            }
        });
        tableOrderDetail.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tableOrderDetailPropertyChange(evt);
            }
        });
        tableOrderDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableOrderDetailKeyPressed(evt);
            }
        });
        tableOrderDetail.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                tableOrderDetailVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrderDetail);
        if (tableOrderDetail.getColumnModel().getColumnCount() > 0) {
            tableOrderDetail.getColumnModel().getColumn(0).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(1).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(1).setPreferredWidth(5);
            tableOrderDetail.getColumnModel().getColumn(2).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(2).setPreferredWidth(300);
            tableOrderDetail.getColumnModel().getColumn(3).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(3).setPreferredWidth(10);
            tableOrderDetail.getColumnModel().getColumn(4).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(4).setPreferredWidth(5);
            tableOrderDetail.getColumnModel().getColumn(5).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(6).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(7).setResizable(false);
            tableOrderDetail.getColumnModel().getColumn(7).setPreferredWidth(0);
        }

        txtNIC1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtNIC1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNIC1.setCaretColor(new java.awt.Color(116, 7, 7));
        txtNIC1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNIC1ActionPerformed(evt);
            }
        });
        txtNIC1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNIC1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNIC1KeyTyped(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setText("NIC :");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("Name :");

        txtName1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtName1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtName1.setCaretColor(new java.awt.Color(116, 7, 7));
        txtName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtName1ActionPerformed(evt);
            }
        });
        txtName1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtName1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtName1KeyTyped(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel31.setText("Mobile :");

        txtMobile1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMobile1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMobile1.setCaretColor(new java.awt.Color(116, 7, 7));
        txtMobile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobile1ActionPerformed(evt);
            }
        });
        txtMobile1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMobile1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMobile1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMobile1KeyTyped(evt);
            }
        });

        txtOID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtOID.setForeground(new java.awt.Color(75, 59, 59));
        txtOID.setText("null");

        txtUser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtUser.setForeground(new java.awt.Color(102, 51, 51));
        txtUser.setText("null");

        jLabel25.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel25.setText("<html><font color=gray>[F12]</font> Search</html>");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Date :");
        jLabel13.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        txtDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtDate.setForeground(new java.awt.Color(102, 102, 102));
        txtDate.setText("null");
        txtDate.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        btnPlace.setBackground(new java.awt.Color(255, 255, 255));
        btnPlace.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        btnPlace.setForeground(new java.awt.Color(51, 51, 0));
        btnPlace.setText("[F4] PLACE ORDER");
        btnPlace.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPlace.setMaximumSize(new java.awt.Dimension(50, 30));
        btnPlace.setMinimumSize(new java.awt.Dimension(50, 30));
        btnPlace.setPreferredSize(new java.awt.Dimension(50, 30));
        btnPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceActionPerformed(evt);
            }
        });

        chkNic1.setBackground(new java.awt.Color(255, 255, 255));
        chkNic1.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Arial", 0, 9)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(1, 102, 102));
        jLabel14.setText("[ENTER] - Edit Line    [SPACE] - Add Warranty");
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                    .addComponent(txtDiscount))))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtKey)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(chkWholeSale, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(296, 296, 296)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtOID, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(txtUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel18)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(chkNic1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel20)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtName1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtNIC1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel31)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtMobile1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel2))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtOID, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkWholeSale, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtKey, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addComponent(jLabel25))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkNic1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNIC1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31)
                        .addComponent(txtMobile1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtName1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        item.setBackground(new java.awt.Color(255, 153, 0));
        item.setPreferredSize(new java.awt.Dimension(109, 29));

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem17.setText("New Order");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem17);
        jMenu1.add(jSeparator1);

        jMenuItem13.setForeground(new java.awt.Color(0, 0, 0));
        jMenuItem13.setText("Restore");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem14.setForeground(new java.awt.Color(0, 0, 0));
        jMenuItem14.setText("Exit");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem14);

        item.add(jMenu1);

        jMenu4.setText("View");
        jMenu4.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setBackground(new java.awt.Color(255, 255, 255));
        jMenuItem12.setText("Calculator");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);
        jMenu4.add(jSeparator2);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem1.setText("Full Screen");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        item.add(jMenu4);

        jMenu2.setText("hide");
        jMenu2.setPreferredSize(new java.awt.Dimension(0, 19));

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem16.setText("wholesle");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem18.setText("barcode");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem18);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem19.setText("search");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem20.setText("table");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem20);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem21.setText("discount");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem22.setText("nic");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem22);

        jMenuItem23.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem23.setText("save");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem23);

        item.add(jMenu2);

        setJMenuBar(item);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtDiscountFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusGained
        txtDiscount.selectAll();
    }//GEN-LAST:event_txtDiscountFocusGained

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased
        Validation.priceText(txtDiscount);
        try {
            if (!txtDiscount.getText().isEmpty()) {
                if (Double.valueOf(txtTotal.getText()) <= Double.valueOf(txtDiscount.getText())) {
                    getToolkit().beep();
                    txtDiscount.setText("0.00");
                    txtDiscount.selectAll();
                }
            }
            calcTotal();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_txtDiscountKeyReleased

    private void txtDiscountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyTyped
        Validation.priceText(txtDiscount);
    }//GEN-LAST:event_txtDiscountKeyTyped

    private void txtBarcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBarcodeFocusGained
        txtKey.setText("");
        txtBarcode.selectAll();
    }//GEN-LAST:event_txtBarcodeFocusGained

    private void txtBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarcodeActionPerformed
        if (txtBarcode.getText().isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            txtBarcode.setBackground(new Color(250, 110, 110));
        } else {
            try {
                Item item1 = ItemController.searchItemBySerial(txtBarcode.getText());
                if (item1 != null) {
                    txtKey.setText("");
                    QtyBatches qb = new QtyBatches(this, true);
                    qb.setItem(item1);
                    qb.isOrder = true;
                    qb.setVisible(true);
                    txtBarcode.selectAll();
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    txtBarcode.setBackground(new Color(250, 110, 110));
                    txtBarcode.selectAll();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtBarcodeActionPerformed

    private void txtBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarcodeKeyReleased
        txtBarcode.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtBarcodeKeyReleased

    private void txtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyActionPerformed
        if (!txtKey.getText().isEmpty()) {
            try {
                itemSearch = new ItemSearch(null, true);
                itemSearch.order = true;
                if (txtKey.getText().toLowerCase().startsWith("it")) {
                    itemSearch.rCode.setSelected(true);
                }
                itemSearch.txtKey.setText(txtKey.getText().toLowerCase());
                itemSearch.search(txtKey.getText().toLowerCase());
                itemSearch.setVisible(true);
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        } else {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txtKeyActionPerformed

    private void txtKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeyKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tableOrderDetail.requestFocus();
        }
    }//GEN-LAST:event_txtKeyKeyReleased

    private void chkWholeSaleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkWholeSaleItemStateChanged
        if (chkWholeSale.isSelected()) {
            chkWholeSale.setForeground(new Color(80, 200, 65));
        } else {
            chkWholeSale.setForeground(Color.gray);
        }
    }//GEN-LAST:event_chkWholeSaleItemStateChanged

    private void txtNIC1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNIC1ActionPerformed
        if (!txtNIC1.getText().isEmpty()) {
            try {
                Customer customer = CustomerController.searchCustomerByNIC(txtNIC1.getText());
                if (customer != null) {
                    txtName1.setText(customer.getName());
                    txtMobile1.setText(customer.getContact() + "");
                } else {
                    txtName1.setText("");
                    txtMobile1.setText("");
                    txtNIC1.requestFocus();
                    txtNIC1.selectAll();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtNIC1ActionPerformed

    private void txtNIC1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNIC1KeyReleased
        if (!chkNic1.isSelected()) {
            Validation.validateNIC(txtNIC1);
        } else {
            Validation.validateNIC(txtNIC1);
        }
    }//GEN-LAST:event_txtNIC1KeyReleased

    private void txtNIC1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNIC1KeyTyped
        if (!chkNic1.isSelected()) {
            Validation.validateNIC(txtNIC1);
        } else {
            Validation.validateNIC(txtNIC1);
        }
    }//GEN-LAST:event_txtNIC1KeyTyped

    private void txtName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtName1ActionPerformed
        try {
            if (!txtNIC1.getText().isEmpty() && !txtName1.getText().isEmpty() && !txtMobile1.getText().isEmpty()) {
                try {
                    Customer customer = new Customer();
                    customer.setContact(Integer.parseInt(txtMobile1.getText()));
                    customer.setName(txtName1.getText());
                    customer.setNic(txtNIC1.getText());
                    int addCustomer = CustomerController.addCustomer(customer);
                    if (addCustomer > 0) {
                        JOptionPane.showMessageDialog(this, "New customer added !");
                    } else {
                        Toolkit.getDefaultToolkit().beep();
                        JOptionPane.showMessageDialog(this, "Add customer fail");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
            }
        } catch (NumberFormatException | HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_txtName1ActionPerformed

    private void txtName1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtName1KeyReleased
        Validation.name(txtName1);
    }//GEN-LAST:event_txtName1KeyReleased

    private void txtName1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtName1KeyTyped
        Validation.name(txtName1);
    }//GEN-LAST:event_txtName1KeyTyped

    private void txtMobile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobile1ActionPerformed
        if (!txtMobile1.getText().isEmpty()) {
            try {
                Customer customer = CustomerController.searchCustomerByContact(Integer.parseInt(txtMobile1.getText()));
                if (customer != null) {
                    txtName1.setText(customer.getName());
                    txtNIC1.setText(customer.getNic());
                } else {
                    txtName1.setText("");
                    txtNIC1.setText("");
                    txtMobile1.requestFocus();
                    txtMobile1.selectAll();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtMobile1ActionPerformed

    private void txtMobile1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobile1KeyPressed

    }//GEN-LAST:event_txtMobile1KeyPressed

    private void txtMobile1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobile1KeyReleased
        Validation.phoneNumber(txtMobile1, evt);
    }//GEN-LAST:event_txtMobile1KeyReleased

    private void txtMobile1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobile1KeyTyped
        Validation.phoneNumber(txtMobile1, evt);
    }//GEN-LAST:event_txtMobile1KeyTyped

    private void tableOrderDetailComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tableOrderDetailComponentAdded

    }//GEN-LAST:event_tableOrderDetailComponentAdded

    private void tableOrderDetailHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_tableOrderDetailHierarchyChanged

    }//GEN-LAST:event_tableOrderDetailHierarchyChanged

    private void tableOrderDetailAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableOrderDetailAncestorAdded

    }//GEN-LAST:event_tableOrderDetailAncestorAdded

    private void tableOrderDetailAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tableOrderDetailAncestorRemoved

    }//GEN-LAST:event_tableOrderDetailAncestorRemoved

    private void tableOrderDetailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderDetailMouseReleased
    }//GEN-LAST:event_tableOrderDetailMouseReleased

    private void tableOrderDetailComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tableOrderDetailComponentShown

    }//GEN-LAST:event_tableOrderDetailComponentShown

    private void tableOrderDetailPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableOrderDetailPropertyChange

    }//GEN-LAST:event_tableOrderDetailPropertyChange

    private void tableOrderDetailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableOrderDetailKeyPressed
        if (tableOrderDetail.getSelectedRow() != -1) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                removeTableData();
                calcTotal();
            } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
                try {
                    clickIndex = tableOrderDetail.getSelectedRow();
                    String code = dtm.getValueAt(clickIndex, 0).toString();
                    String qty = dtm.getValueAt(clickIndex, 4).toString();
                    String batch = dtm.getValueAt(clickIndex, 1).toString();
                    ArrayList<DealerSerial> sList = new ArrayList<>();
                    boolean hasSerials = false;
                    sList = DealerSerialController.getAllDealerSerialByBatch(batch);
                    if (sList.size() > 0) {
                        hasSerials = true;
                    }
                    if (hasSerials) {
                        AddWarranty addWarranty = new AddWarranty(this, true, this);
                        addWarranty.setDetail(batch);
                        addWarranty.setMap(hashMap);
                        addWarranty.setItemCount(Integer.parseInt(qty));
                        addWarranty.setTitle(code, qty, sList, batch);
                        addWarranty.setVisible(true);
                    } else {
                        getToolkit().beep();
                        JOptionPane.showMessageDialog(this, "No serials for this batch !");
                    }

                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                try {
                    QtyBatches qb = new QtyBatches(this, true);
                    qb.isOrder = true;
                    qb.setTable1(dtm.getValueAt(tableOrderDetail.getSelectedRow(), 1).toString(),
                            Integer.parseInt(dtm.getValueAt(tableOrderDetail.getSelectedRow(), 4).toString()),
                            dtm.getValueAt(tableOrderDetail.getSelectedRow(), 5).toString());
                    qb.setVisible(true);
                } catch (NumberFormatException | ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
            }
        }
    }//GEN-LAST:event_tableOrderDetailKeyPressed

    private void tableOrderDetailVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_tableOrderDetailVetoableChange

    }//GEN-LAST:event_tableOrderDetailVetoableChange

    private void txtKeyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKeyFocusGained
        txtBarcode.setText("");
        txtKey.selectAll();
    }//GEN-LAST:event_txtKeyFocusGained

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        dtm = (DefaultTableModel) tableOrderDetail.getModel();
        try {
            ArrayList<TempOrder> allDetail = FILE_ACCESS.getAllDetail();
            ArrayList<String[]> allDetail1 = SERIAL_FILE_ACCESS.getAllDetail();
            if (allDetail != null && !allDetail.isEmpty()) {
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "This action will load the last unsaved order detail.\n"
                        + "If you've done changes in your database, this action will harm your database."
                        + "\n\n Do you want to continue ?");
                if (showConfirmDialog == 0) {
                    hashMap = new HashMap<>();
                    ArrayList<TempSerial> al;
                    dtm.setRowCount(0);
                    boolean contain;
                    new Progress(null, true).setVisible(true);
                    for (TempOrder detail : allDetail) {
                        contain = false;
                        if (allDetail1 != null) {
                            for (String[] data : allDetail1) {
                                if (detail.getBatch().equals(data[0])) {
                                    contain = true;
                                    break;
                                }
                            }
                        }
                        if (detail.getWholeSale().equals("true")) {
                            chkWholeSale.setSelected(true);
                        } else {
                            chkWholeSale.setSelected(false);
                        }
                        Object row[] = {detail.getCode(), detail.getBatch(), detail.getDesc(), contain,
                            detail.getQty(), detail.getPrice(), detail.getAmount(), detail.getPeriod()};
                        dtm.addRow(row);
                    }
                    chkWholeSale.setEnabled(false);
                    if (allDetail1 != null) {
                        for (String[] data : allDetail1) {
                            if (hashMap.containsKey(data[0])) {
                                hashMap.get(data[0]).add(new TempSerial(data[1], Integer.parseInt(data[2]), data[3], data[4]));
                            } else {
                                al = new ArrayList<>();
                                al.add(new TempSerial(data[1], Integer.parseInt(data[2]), data[3], data[4]));
                                hashMap.put(data[0], al);
                            }
                        }
                    }
                }

                calcTotal();
            } else {
                JOptionPane.showMessageDialog(this, "You don't have an unsaved order !");
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        Runtime rs = Runtime.getRuntime();
        try {
            rs.exec("calc");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sorry!!! Your system calculator is crashed.\nTry to open manually");
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        setExtendedState(MAXIMIZED_BOTH);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        if (chkWholeSale.isEnabled()) {
            if (chkWholeSale.isSelected()) {
                chkWholeSale.setSelected(false);
            } else {
                chkWholeSale.setSelected(true);
            }
        } else {
            getToolkit().beep();
        }
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        txtBarcode.requestFocus();
        txtBarcode.selectAll();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        txtKey.requestFocus();
        txtKey.selectAll();
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        tableOrderDetail.requestFocus();
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        txtDiscount.requestFocus();
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        txtNIC1.requestFocus();
        txtNIC1.selectAll();
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        btnPlace.doClick();
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        int i = JOptionPane.showConfirmDialog(this, "Do you want to clear all data in table ?");
        if (i == 0) {
            dtm.setRowCount(0);
        }
        calcTotal();
        clearFile();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void txtDiscountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDiscountFocusLost
        if (txtDiscount.getText().isEmpty()) {
            txtDiscount.setText("0.00");
        }
    }//GEN-LAST:event_txtDiscountFocusLost

    private void btnPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceActionPerformed
        int hh = JOptionPane.showConfirmDialog(this, "Do you want to save this order ?");
        if (hh == 0) {
            try {
                if (tableOrderDetail.getRowCount() > 0) {
                    Customer customer = null;
                    if (!txtNIC1.getText().isEmpty()) {
                        try {
                            customer = CustomerController.searchCustomerByNIC(txtNIC1.getText());
                        } catch (ClassNotFoundException | SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        }
                    }
                    if (!txtMobile1.getText().isEmpty() && customer == null) {
                        try {
                            customer = CustomerController.searchCustomerByContact(Integer.parseInt(txtMobile1.getText()));
                        } catch (ClassNotFoundException | SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        }
                    }
                    if (customer == null) {
                        if (txtName1.getText().isEmpty()) {
                            customer = new Customer(1, null, 0, null);
                        } else {
                            Customer c = new Customer();
                            String nic;
                            String mobile;
                            String name = txtName1.getText();
                            if (!txtMobile1.getText().isEmpty()) {
                                mobile = txtMobile1.getText();
                                c.setContact(Integer.parseInt(mobile));
                                if (!txtNIC1.getText().isEmpty()) {
                                    nic = txtNIC1.getText();
                                    c.setNic(nic);
                                }
                                c.setName(name);
                                try {
                                    int addCustomer = CustomerController.addCustomerSpecialForOrders(c);
                                    if (addCustomer > 0) {
                                        c.setCid(addCustomer);
                                        customer = c;
                                    } else {
                                        customer = new Customer();
                                        customer.setCid(1);
                                    }
                                } catch (ClassNotFoundException | SQLException ex) {
                                    JOptionPane.showMessageDialog(this, ex.getMessage());
                                    ex.printStackTrace(new PrintWriter(sw));
                                    String trace = sw.toString();
                                    LoggerFileAcceess.exceptionLogger(trace);
                                }
                            } else if (txtMobile1.getText().isEmpty() && !txtName1.getText().isEmpty()) {
                                JOptionPane.showMessageDialog(this, "Mobile number is empty.\nOrder will be added as 'Annonimous' customer");
                            }
                        }
                    }

                    if (user == null) {
                        user = new User();
                        user.setUid(1);
                    }

                    Orders order = new Orders();
                    String[] tot = lblTotal.getText().split("Rs. ");
                    if (customer != null) {
                        order.setCusId(customer.getCid());
                    } else {
                        order.setCusId(1);
                    }
                    int m = 1;
                    if (chkWholeSale.isSelected()) {
                        m = 0;
                    }
                    getNewOrderId();
                    order.setId(txtOID.getText());
                    order.setDate(getDate());
                    order.setTime(getTime());
                    order.setUsrId(user.getUid());
                    order.setAmount(Double.valueOf(tot[1]));
                    order.setStatus(m);

                    ArrayList<OrderDetail> orderDetails = new ArrayList<>();
                    OrderDetail detail = new OrderDetail();
                    dtm = (DefaultTableModel) tableOrderDetail.getModel();
                    for (int i = 0; i < tableOrderDetail.getRowCount(); i++) {
                        String split = dtm.getValueAt(i, 1).toString();
                        detail.setItemCode(dtm.getValueAt(i, 0).toString());
                        detail.setOrderId(txtOID.getText());
                        detail.setQty(Integer.parseInt(dtm.getValueAt(i, 4).toString()));
                        detail.setSoldPrice(Double.parseDouble(dtm.getValueAt(i, 5).toString()));
                        detail.setBid(split);
                        orderDetails.add(detail);
                        detail = new OrderDetail();
                    }
                    boolean placeOrder = placeOrder(order, orderDetails);
                    if (placeOrder) {
                        AddOrderPay pay = new AddOrderPay(null, true);
                        pay.setCID(order.getId());
                        pay.setAmount(order.getAmount());
                        pay.setCustomer(customer2);
                        pay.setDiscount(txtDiscount.getText() + "");
                        pay.setDtm(dtm);
                        pay.setNetTotal(txtTotal.getText());
                        pay.setSubTotal(order.getAmount());

                        pay.setVisible(true);

                        hashMap = new HashMap<>();
                        clearFile();
                        dtm.setRowCount(0);
                        txtDiscount.setText("0.0");
                        lblTotal.setText("Rs. 0.00");
                        chkWholeSale.setEnabled(true);
                        try {
                            getNewOrderId();
                        } catch (SQLException | ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        }
                        txtNIC1.setText("");
                        txtName1.setText("");
                        txtMobile1.setText("");
                        txtTotal.setText("0.00");
                        chkWholeSale.setSelected(false);
                        txtBarcode.setText("");
                        txtBarcode.requestFocus();
                    } else {
                        JOptionPane.showMessageDialog(this, "failed");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please Add Item..");
                }
            } catch (HeadlessException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number input !\n" + e.getMessage());
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_btnPlaceActionPerformed

    private void txtBarcodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarcodeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            txtKey.requestFocus();
        }
    }//GEN-LAST:event_txtBarcodeKeyPressed

    private void txtDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDiscountActionPerformed
        btnPlace.doClick();
    }//GEN-LAST:event_txtDiscountActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        int ok = JOptionPane.showConfirmDialog(this, "Do you want to exit order ?");
        if (ok == 0) {
            dispose();
        }
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int ok = JOptionPane.showConfirmDialog(this, "Do you want to exit order ?");
        if (ok == 0) {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlace;
    private javax.swing.JCheckBox chkNic1;
    public static javax.swing.JCheckBox chkWholeSale;
    private javax.swing.JMenuBar item;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private static javax.swing.JLabel lblTotal;
    public static javax.swing.JTable tableOrderDetail;
    private javax.swing.JTextField txtBarcode;
    private javax.swing.JLabel txtDate;
    private static javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextField txtMobile1;
    private javax.swing.JTextField txtNIC1;
    private javax.swing.JTextField txtName1;
    private javax.swing.JLabel txtOID;
    private static javax.swing.JTextField txtTotal;
    private javax.swing.JLabel txtUser;
    // End of variables declaration//GEN-END:variables
    public static void addDetail(String uPrice, String qty, Item item, String batch) {
        dtm = (DefaultTableModel) tableOrderDetail.getModel();
        double amount = Double.parseDouble(uPrice) * Double.parseDouble(qty);
        Object row[] = {item.getCode(), batch, item.getDesciption(), false, qty, uPrice, amount, "-"};
        if (tableOrderDetail.getRowCount() == 0) {
            clearFile();
        }
        dtm.addRow(row);
        saveToFile(row);
        calcTotal();
        if (tableOrderDetail.getRowCount() > 0) {
            chkWholeSale.setEnabled(false);
        } else {
            chkWholeSale.setEnabled(true);
        }
    }

    private static void saveToFile(Object[] row) {
        try {
            String s = "false";
            if (chkWholeSale.isSelected()) {
                s = "true";
            }
            TempOrder order = new TempOrder(row[0].toString(), row[1].toString(), row[2].toString(),
                    row[3].toString(), row[4].toString(), row[5].toString(), row[6].toString(), s, row[7].toString(), 1);
            boolean isAdded = FILE_ACCESS.addorderdetail(order, s);
            if (isAdded) {
                System.out.println("file ok");
            } else {
                System.out.println("file err");
            }
        } catch (IOException | ClassNotFoundException ex) {
            StringWriter swp = new StringWriter();
            ex.printStackTrace(new PrintWriter(swp));
            String trace = swp.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    public void updateFile(String batch, String qty) {
        try {
            boolean updateOrder = FILE_ACCESS.updateOrder(qty, batch);
            if (updateOrder) {
                System.out.println("file updated");
            } else {
                System.out.println("update fail");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void deleteFileEntry(String bid) {
        try {
            boolean deleteEntry = FILE_ACCESS.deleteEntry(bid);
            if (deleteEntry) {
                System.out.println("file entry deleted");
            } else {
                System.out.println("file entry delete fail");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private static void clearFile() {
        try {
            boolean deleteAll = FILE_ACCESS.deleteAll();
            boolean deleteAll1 = SERIAL_FILE_ACCESS.deleteAll();
            if (deleteAll && deleteAll1) {
                System.out.println("file cleard");
            } else {
                System.out.println("file clear fail");
            }
        } catch (IOException ex) {
            StringWriter swp = new StringWriter();
            ex.printStackTrace(new PrintWriter(swp));
            String trace = swp.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    public void setSerials(String bID, ArrayList<TempSerial> serialList, String period) {
        if (hashMap.containsKey(bID)) {
            try {
                hashMap.remove(bID);
                if (SERIAL_FILE_ACCESS.deleteBatch(bID)) {
                    System.out.println("deleted batch file");
                } else {
                    System.out.println("delete batch fail");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
        hashMap.put(bID, serialList);
        try {
            if (SERIAL_FILE_ACCESS.addSerial(bID, serialList)) {
                boolean updateOrderWarrenty = FILE_ACCESS.updateOrderWarrenty(period, bID);
                if (updateOrderWarrenty) {
                    System.out.println("warranty updated");
                }
                System.out.println("batch added");
            } else {
                System.out.println("batch add fail");
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
        if (!serialList.isEmpty()) {
            dtm.setValueAt(true, clickIndex, 3);
            dtm.setValueAt(period, clickIndex, 7);
        } else {
            dtm.setValueAt(false, clickIndex, 3);
            dtm.setValueAt("-", clickIndex, 7);
        }
    }

    private void getNewOrderId() throws SQLException, ClassNotFoundException {
        String newId = IdGenerator.getNewId(1);
        txtOID.setText(newId);
    }

    private static void calcTotal() {
        try {
            double total = 0.0;
            if (tableOrderDetail.getRowCount() > 0) {
                dtm = (DefaultTableModel) tableOrderDetail.getModel();
                for (int i = 0; i < tableOrderDetail.getRowCount(); i++) {
                    total += Double.parseDouble(dtm.getValueAt(i, 6).toString());
                }
            } else {
                total = 0.0;
            }
            txtTotal.setText(Double.toString(total));
            if (!txtDiscount.getText().isEmpty()) {
                total -= Double.valueOf(txtDiscount.getText());
            }
            lblTotal.setText("Rs. " + total);
        } catch (NumberFormatException ex) {
            ex.printStackTrace();
            StringWriter sw1 = new StringWriter();
            ex.printStackTrace(new PrintWriter(sw1));
            String trace = sw1.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void removeTableData() {
        try {
            if (tableOrderDetail.getRowCount() > 0) {
                if (tableOrderDetail.getSelectedRow() != -1) {
                    dtm = (DefaultTableModel) tableOrderDetail.getModel();
                    String batch = dtm.getValueAt(tableOrderDetail.getSelectedRow(), 1).toString();
                    try {
                        if (SERIAL_FILE_ACCESS.deleteBatch(batch)) {
                            System.out.println("batch deleted from file");
                        } else {
                            System.out.println("batch delete fail");
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                        ex.printStackTrace(new PrintWriter(sw));
                        String trace = sw.toString();
                        LoggerFileAcceess.exceptionLogger(trace);
                    }
                    deleteFileEntry(dtm.getValueAt(tableOrderDetail.getSelectedRow(), 1).toString());
                    dtm.removeRow(tableOrderDetail.getSelectedRow());
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(this, "Please select a table data to delete !");
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
            }
        } catch (NumberFormatException | HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } finally {
            if (tableOrderDetail.getRowCount() > 0) {
                chkWholeSale.setEnabled(false);
            } else {
                chkWholeSale.setEnabled(true);
            }
        }
    }

    private String getDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }

    private String getTime() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("hh:mm");
        return dateFormat.format(date);
    }

    private boolean placeOrder(Orders order, ArrayList<OrderDetail> list) {
        boolean isSaved = false;
        try {
            dtm = (DefaultTableModel) tableOrderDetail.getModel();
            int addOrder = OrderController.addOrder(order);
            if (addOrder > 0) {
                int count = 0;
                for (int i = 0; i < list.size(); i++) {
                    int added = OrderDetailController.addOrderDetail(list.get(i));
                    if (added > 0) {
                        count++;
                        if (dtm.getValueAt(i, 3).toString().equals("true")) {
                            String split = dtm.getValueAt(i, 1).toString();
                            ArrayList<TempSerial> get = hashMap.get(split);
                            for (TempSerial serial : get) {
                                int addSerial = CustomerSerialController.addCustomerSerial(new CustomerSerial(0,
                                        serial.getSerial(), Integer.parseInt(serial.getTag1()),
                                        Integer.parseInt(serial.getTag2()), added, serial.getPeriod()));
                                if (addSerial > 0) {
                                    System.out.println(added + serial.getSerial());
                                }
                            }
                        }
                    }
                }
                isSaved = (count == list.size());
            }
            Customer searchCustomerByID = CustomerController.searchCustomerByID(order.getCusId());
            if (searchCustomerByID == null) {
                customer2 = new Customer(1, "Annonimous", 0, "0V");
            } else {
                customer2 = searchCustomerByID;
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
        return isSaved;
    }

}
