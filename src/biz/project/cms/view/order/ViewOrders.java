/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.order;

import biz.project.cms.controller.CustomerController;
import biz.project.cms.controller.CustomerPaymentController;
import biz.project.cms.controller.OrderController;
import biz.project.cms.controller.OrderDetailController;
import biz.project.cms.controller.ViewOrderControoller;
import biz.project.cms.model.AllOrders;
import biz.project.cms.model.Customer;
import biz.project.cms.model.CustomerPayment;
import biz.project.cms.model.OrderDetail;
import biz.project.cms.model.Orders;
import biz.project.cms.other.SearchCombo;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kisal Suranjaya
 */
public class ViewOrders extends javax.swing.JPanel {

    private DefaultTableModel dtm = null;
    private ArrayList<AllOrders> allOrdersArray = null;
    private AllOrders allOrders = null;
    private boolean dateChanged = false;
    private boolean dataload = false;
    ArrayList<CustomerPayment> payments = null;
    private boolean pIdChanged = false;

    /**
     * Creates new form ViewOrders
     */
    public ViewOrders() {
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        Color white = new Color(255, 255, 255);
        
        tblAllOrders.setOpaque(true);
        tblAllOrders.setFillsViewportHeight(true);
        tblAllOrders.setBackground(white);
        tblOrderDetail.setOpaque(true);
        tblOrderDetail.setFillsViewportHeight(true);
        tblOrderDetail.setBackground(white);

        datePick.setFormats(new SimpleDateFormat("yyyy-MM-dd"));
        loadAllOrders();
        makeSearchable();
        btnMakePayment.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAllOrders = new javax.swing.JTable();
        panelCustomerDetails = new javax.swing.JPanel();
        lblCustomerName = new javax.swing.JLabel();
        lblDate2 = new javax.swing.JLabel();
        txtNIC = new javax.swing.JTextField();
        txtContact = new javax.swing.JTextField();
        lblContact = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        panelOrderDetail = new javax.swing.JPanel();
        lblOrderId = new javax.swing.JLabel();
        cmbOrderId = new javax.swing.JComboBox<String>();
        lblPeriod1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txtOrderTime = new javax.swing.JTextField();
        lblDate1 = new javax.swing.JLabel();
        txtOrderType = new javax.swing.JTextField();
        txtOrderDate = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox<String>();
        panelPaymentDetails = new javax.swing.JPanel();
        lblCustomerName1 = new javax.swing.JLabel();
        lblDate4 = new javax.swing.JLabel();
        txtPaymentAmount = new javax.swing.JTextField();
        lblDate5 = new javax.swing.JLabel();
        cmbPID = new javax.swing.JComboBox<String>();
        txtOrderAmount = new javax.swing.JTextField();
        lblDate6 = new javax.swing.JLabel();
        lblDate7 = new javax.swing.JLabel();
        txtBalancePayment = new javax.swing.JTextField();
        lblDate8 = new javax.swing.JLabel();
        txtTotalPament = new javax.swing.JTextField();
        txtPDate = new javax.swing.JTextField();
        btnMakePayment = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderDetail = new javax.swing.JTable();
        lblUser1 = new javax.swing.JLabel();
        txtTotalOrderAmount = new javax.swing.JTextField();
        lblUser2 = new javax.swing.JLabel();
        datePick = new org.jdesktop.swingx.JXDatePicker();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(774, 720));
        setPreferredSize(new java.awt.Dimension(774, 720));

        tblAllOrders.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tblAllOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Date", "Order ID", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAllOrders.setRowHeight(22);
        tblAllOrders.setSelectionBackground(new java.awt.Color(0, 153, 153));
        tblAllOrders.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAllOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAllOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAllOrders);

        panelCustomerDetails.setBackground(new java.awt.Color(255, 255, 255));
        panelCustomerDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Info :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        lblCustomerName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCustomerName.setText(" Name :");

        lblDate2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate2.setText("NIC :");

        txtNIC.setEditable(false);
        txtNIC.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtNIC.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtContact.setEditable(false);
        txtContact.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtContact.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblContact.setText("Contact :");

        txtCustomerName.setEditable(false);
        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCustomerName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelCustomerDetailsLayout = new javax.swing.GroupLayout(panelCustomerDetails);
        panelCustomerDetails.setLayout(panelCustomerDetailsLayout);
        panelCustomerDetailsLayout.setHorizontalGroup(
            panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCustomerDetailsLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblContact)
                    .addComponent(lblDate2)
                    .addComponent(lblCustomerName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustomerName)
                    .addComponent(txtNIC)
                    .addComponent(txtContact)))
        );
        panelCustomerDetailsLayout.setVerticalGroup(
            panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCustomerDetailsLayout.createSequentialGroup()
                .addGroup(panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustomerName)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate2)
                    .addComponent(txtNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCustomerDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContact)
                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        panelOrderDetail.setBackground(new java.awt.Color(255, 255, 255));
        panelOrderDetail.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Orders Info :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        lblOrderId.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblOrderId.setText("Order Id :");

        cmbOrderId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbOrderId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbOrderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderIdActionPerformed(evt);
            }
        });

        lblPeriod1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPeriod1.setText("Order Type :");

        lblDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate.setText("Date :");

        txtOrderTime.setEditable(false);
        txtOrderTime.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOrderTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDate1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate1.setText("Time :");

        txtOrderType.setEditable(false);
        txtOrderType.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOrderType.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtOrderDate.setEditable(false);
        txtOrderDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOrderDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelOrderDetailLayout = new javax.swing.GroupLayout(panelOrderDetail);
        panelOrderDetail.setLayout(panelOrderDetailLayout);
        panelOrderDetailLayout.setHorizontalGroup(
            panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelOrderDetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelOrderDetailLayout.createSequentialGroup()
                        .addComponent(lblOrderId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOrderId, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelOrderDetailLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOrderDate)))
                .addGap(10, 10, 10)
                .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPeriod1)
                    .addComponent(lblDate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOrderType)
                    .addComponent(txtOrderTime)))
        );
        panelOrderDetailLayout.setVerticalGroup(
            panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrderDetailLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderId)
                    .addComponent(cmbOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPeriod1)
                    .addComponent(txtOrderType, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOrderTime, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDate)
                        .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblDate1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblUser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser.setText("User :");

        cmbUser.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbUser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "User 1", "User 2", "User 3", "User 4" }));
        cmbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserActionPerformed(evt);
            }
        });

        panelPaymentDetails.setBackground(new java.awt.Color(255, 255, 255));
        panelPaymentDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Info :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        lblCustomerName1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCustomerName1.setText("PID :");

        lblDate4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate4.setText("Amount :");

        txtPaymentAmount.setEditable(false);
        txtPaymentAmount.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPaymentAmount.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDate5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate5.setText("Date :");

        cmbPID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbPID.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPIDActionPerformed(evt);
            }
        });

        txtOrderAmount.setEditable(false);
        txtOrderAmount.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOrderAmount.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDate6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate6.setText("Order Amount :");

        lblDate7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate7.setText("Balance:");

        txtBalancePayment.setEditable(false);
        txtBalancePayment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtBalancePayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDate8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate8.setText("Total Payment:");

        txtTotalPament.setEditable(false);
        txtTotalPament.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTotalPament.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtPDate.setEditable(false);
        txtPDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnMakePayment.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnMakePayment.setText("Make Payment");
        btnMakePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakePaymentActionPerformed(evt);
            }
        });

        tblOrderDetail.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tblOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Item", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrderDetail.setRowHeight(22);
        tblOrderDetail.setSelectionBackground(new java.awt.Color(0, 153, 102));
        tblOrderDetail.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblOrderDetail.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblOrderDetail);

        javax.swing.GroupLayout panelPaymentDetailsLayout = new javax.swing.GroupLayout(panelPaymentDetails);
        panelPaymentDetails.setLayout(panelPaymentDetailsLayout);
        panelPaymentDetailsLayout.setHorizontalGroup(
            panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPaymentDetailsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnMakePayment))
            .addGroup(panelPaymentDetailsLayout.createSequentialGroup()
                .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCustomerName1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtPDate, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPID, javax.swing.GroupLayout.Alignment.LEADING, 0, 109, Short.MAX_VALUE)
                    .addComponent(txtOrderAmount))
                .addGap(18, 18, 18)
                .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblDate8)
                        .addComponent(lblDate4, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(lblDate7))
                .addGap(18, 18, 18)
                .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTotalPament, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(txtPaymentAmount)
                    .addComponent(txtBalancePayment)))
            .addGroup(panelPaymentDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        panelPaymentDetailsLayout.setVerticalGroup(
            panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPaymentDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPaymentDetailsLayout.createSequentialGroup()
                        .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotalPament, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBalancePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDate7)))
                    .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelPaymentDetailsLayout.createSequentialGroup()
                            .addComponent(cmbPID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDate5))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(panelPaymentDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtOrderAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblDate6)))
                        .addComponent(lblCustomerName1)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMakePayment))
        );

        lblUser1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser1.setText("Total Order Value  :");

        txtTotalOrderAmount.setEditable(false);
        txtTotalOrderAmount.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTotalOrderAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotalOrderAmount.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblUser2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser2.setText("Date :");

        datePick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblUser)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblUser1)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotalOrderAmount))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblUser2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(datePick, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 30, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPaymentDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelCustomerDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelOrderDetail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser2)
                    .addComponent(datePick, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser1)
                    .addComponent(txtTotalOrderAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelOrderDetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(panelCustomerDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPaymentDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbOrderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderIdActionPerformed
        loadOrderDetails();
    }//GEN-LAST:event_cmbOrderIdActionPerformed

    private void cmbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserActionPerformed
        //dataload = false;
        loadSelectedOrders();
    }//GEN-LAST:event_cmbUserActionPerformed

    private void cmbPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPIDActionPerformed
        loadPayment();
    }//GEN-LAST:event_cmbPIDActionPerformed

    private void tblAllOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAllOrdersMouseClicked
        loadSelectdOrder();
    }//GEN-LAST:event_tblAllOrdersMouseClicked

    private void btnMakePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakePaymentActionPerformed
        loadMakePayment();
    }//GEN-LAST:event_btnMakePaymentActionPerformed

    private void datePickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickActionPerformed
        dateChanged = true;
        loadSelectedOrders();
        dateChanged = false;
    }//GEN-LAST:event_datePickActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMakePayment;
    private javax.swing.JComboBox<String> cmbOrderId;
    private javax.swing.JComboBox<String> cmbPID;
    private javax.swing.JComboBox<String> cmbUser;
    private org.jdesktop.swingx.JXDatePicker datePick;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerName1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblDate4;
    private javax.swing.JLabel lblDate5;
    private javax.swing.JLabel lblDate6;
    private javax.swing.JLabel lblDate7;
    private javax.swing.JLabel lblDate8;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPeriod1;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUser1;
    private javax.swing.JLabel lblUser2;
    private javax.swing.JPanel panelCustomerDetails;
    private javax.swing.JPanel panelOrderDetail;
    private javax.swing.JPanel panelPaymentDetails;
    private javax.swing.JTable tblAllOrders;
    private javax.swing.JTable tblOrderDetail;
    private javax.swing.JTextField txtBalancePayment;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtNIC;
    private javax.swing.JTextField txtOrderAmount;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtOrderTime;
    private javax.swing.JTextField txtOrderType;
    private javax.swing.JTextField txtPDate;
    private javax.swing.JTextField txtPaymentAmount;
    private javax.swing.JTextField txtTotalOrderAmount;
    private javax.swing.JTextField txtTotalPament;
    // End of variables declaration//GEN-END:variables

    private void loadAllOrders() {
        dataload = true;
        dtm = (DefaultTableModel) tblAllOrders.getModel();
        dtm.setRowCount(0);
        cmbUser.removeAllItems();
        cmbUser.addItem("All Users");
        cmbOrderId.removeAllItems();
        double tot = 0;
        try {
            allOrdersArray = ViewOrderControoller.getAllOrders();
            for (AllOrders orders : allOrdersArray) {
                Object[] rowData = {orders.getCusName(), orders.getDate(), orders.getOrdrId(), orders.getAmount()};
                tot += orders.getAmount();
                dtm.addRow(rowData);
                cmbOrderId.addItem(orders.getOrdrId());
                if (cmbUser.getItemCount() == 0) {
                    cmbUser.addItem(orders.getUsrName());
                } else {
                    boolean b = true;
                    for (int i = 0; i < cmbUser.getItemCount(); i++) {
                        if (cmbUser.getItemAt(i).equals(orders.getUsrName())) {
                            //System.out.println("RUN");
                            b = false;
                        }
                    }
                    if (b) {
                        cmbUser.addItem(orders.getUsrName());
                    }
                }
            }
            txtTotalOrderAmount.setText(tot + "");

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
        dataload = false;
    }

    private void loadSelectedOrders() {
        double tot = 0;
        pIdChanged = false;
        String userName = (String) cmbUser.getSelectedItem();
        if (dateChanged && !dataload) {
            Date date = datePick.getDate();
            String toString = new SimpleDateFormat("yyyy-MM-dd").format(date);
            if (userName.equals("All Users")) {
                try {
                    allOrdersArray = ViewOrderControoller.getAllOrdersByDate(date);
                    dtm.setRowCount(0);
                    if (!allOrdersArray.isEmpty()) {
                        for (AllOrders orders : allOrdersArray) {
                            Object[] rowData = {orders.getCusName(), orders.getDate(), orders.getOrdrId(), orders.getAmount()};
                            tot += orders.getAmount();
                            dtm.addRow(rowData);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Orders in this Date");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    allOrdersArray = ViewOrderControoller.getAllOrdersByDate(userName, date);
                    dtm.setRowCount(0);
                    if (!allOrdersArray.isEmpty()) {
                        for (AllOrders orders : allOrdersArray) {
                            Object[] rowData = {orders.getCusName(), orders.getDate(), orders.getOrdrId(), orders.getAmount()};
                            tot += orders.getAmount();
                            dtm.addRow(rowData);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No Orders in this Date");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } else if (!dataload) {
            try {
                if (userName.equals("All Users")) {
                    loadAllOrders();
                } else {
                    allOrdersArray = ViewOrderControoller.getAllOrdersByUser(userName);
                    dtm.setRowCount(0);
                    for (AllOrders orders : allOrdersArray) {
                        Object[] rowData = {orders.getCusName(), orders.getDate(), orders.getOrdrId(), orders.getAmount()};
                        tot += orders.getAmount();
                        dtm.addRow(rowData);
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        txtTotalOrderAmount.setText(tot + "");
    }

    private void makeSearchable() {
        SearchCombo searchCombo = new SearchCombo();
        searchCombo.setSearchableCombo(cmbOrderId, true, "No Order Found !", false);
    }

    private void loadSelectdOrder() {
        int row = tblAllOrders.getSelectedRow();
        if (row != -1) {
            String orderId = (String) tblAllOrders.getValueAt(row, 2);
            for (int i = 0; i < cmbOrderId.getItemCount(); i++) {
                if (orderId.equals(cmbOrderId.getItemAt(i))) {
                    cmbOrderId.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    private void loadOrderDetails() {
        pIdChanged = false;
        if (!dataload) {
            String orderId = cmbOrderId.getSelectedItem().toString();
            cmbPID.removeAllItems();
            txtOrderDate.setText("");
            txtOrderTime.setText("");
            txtOrderType.setText("");
            txtCustomerName.setText("");
            txtNIC.setText("");
            txtContact.setText("");
            txtPDate.setText("");
            txtPaymentAmount.setText("");
            txtTotalPament.setText("");
            txtBalancePayment.setText("");
            try {
                ArrayList<OrderDetail> details = OrderDetailController.getAllOrderDetails(orderId);
                Orders orders = OrderController.searchOrderByOrderid(orderId);
                if (!details.isEmpty() && orders != null) {
                    if (orders.getStatus() == 1) {
                        txtOrderType.setText("Retail");
                    } else {
                        txtOrderType.setText("Whole Sale");
                    }
                    txtOrderDate.setText(orders.getDate());
                    txtOrderTime.setText(orders.getTime());
                    txtOrderAmount.setText(orders.getAmount() + "");
                    System.out.println(orders.getCusId());
                    Customer customer = CustomerController.searchCustomerByID(orders.getCusId());
                    if (customer != null) {
                        txtCustomerName.setText(customer.getName());
                        txtNIC.setText(customer.getNic());
                        txtContact.setText(customer.getContact() + "");
                    }
                    payments = CustomerPaymentController.getAllCustomerPaymentOfOrder(orderId);
                    if (!payments.isEmpty()) {
                        double tot = 0;
                        for (CustomerPayment payment : payments) {
                            cmbPID.addItem(payment.getId());
                            tot += payment.getAmount();
                        }
                        txtPDate.setText(payments.get(0).getDate());
                        txtPaymentAmount.setText(payments.get(0).getAmount() + "");
                        txtTotalPament.setText(tot + "");
                        txtBalancePayment.setText(orders.getAmount() - tot + "");
                        if ((orders.getAmount() - tot) > 0) {
                            btnMakePayment.setEnabled(true);
                        } else {
                            btnMakePayment.setEnabled(false);
                        }
                    } else {
                        txtBalancePayment.setText(orders.getAmount() + "");
                        btnMakePayment.setEnabled(true);
                    }
                    DefaultTableModel model = (DefaultTableModel) tblOrderDetail.getModel();
                    model.setRowCount(0);
                    for (OrderDetail detail : details) {
                        Object[] row = {detail.getBid(), detail.getItemCode(), detail.getQty(), detail.getSoldPrice()};
                        model.addRow(row);
                    }

                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        pIdChanged = true;
//        if (!txtBalancePayment.getText().equals("")) {
//            if (Integer.parseInt(txtBalancePayment.getText()) > 0) {
//                btnMakePayment.setEnabled(true);
//            } else {
//                btnMakePayment.setEnabled(false);
//            }
//        }
    }

    private void loadPayment() {
        if (pIdChanged) {
            String pid = (String) cmbPID.getSelectedItem();
            for (CustomerPayment payment : payments) {
                if (payment.getId().equals(pid)) {
                    txtPDate.setText(payment.getDate());
                    txtPaymentAmount.setText(payment.getAmount() + "");
                }
            }
        }
    }

    private void loadMakePayment() {
        AddOrderPayLater addOrderPay = new AddOrderPayLater(null, true);
        addOrderPay.setAmount(Double.parseDouble(txtBalancePayment.getText()));
        addOrderPay.setCID(cmbOrderId.getSelectedItem().toString());
        addOrderPay.setVisible(true);
    }
}
