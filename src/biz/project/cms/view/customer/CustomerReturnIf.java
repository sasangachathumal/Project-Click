/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.customer;

import biz.project.cms.controller.CustomerReturnController;
import biz.project.cms.controller.CustomerSerialController;
import biz.project.cms.controller.OrderController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.CustomerSerial;
import biz.project.cms.model.LoadOrderItmBachCatDital;
import biz.project.cms.model.Orders;
import biz.project.cms.model.ReturnItem;
import biz.project.cms.other.IdGenerator;
import biz.project.cms.other.Validation;
import biz.project.cms.view.main.HomeFrame;
import java.awt.Color;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kisal Suranjaya
 */
public class CustomerReturnIf extends javax.swing.JPanel {

    /**
     * Creates new form CustomerReturn
     */
    private DefaultTableModel dtm1, dtm2, dtm;
    private HashMap<Integer, ArrayList<String>> hashMap;
    private String oid;
    private String odid;

    /**
     * Creates new form CustomerReturnIf
     */
    private ArrayList<LoadOrderItmBachCatDital> dital = new ArrayList<>();
    private ArrayList<CustomerSerial> List = new ArrayList<>();
    private CustomerSerial cs = null;

    double totalamount = 0;
    java.sql.Date sqlDate;
    private String NewCusRetuID;

    public CustomerReturnIf() {
        initComponents();
        oid = "";
        odid = "";
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        Color white = new Color(255, 255, 255);
        tableSerial.setOpaque(true);
        tableSerial.setFillsViewportHeight(true);
        tableSerial.setBackground(white);
        tblBatch.setOpaque(true);
        tblBatch.setFillsViewportHeight(true);
        tblBatch.setBackground(white);
        tbReturn.setOpaque(true);
        tbReturn.setFillsViewportHeight(true);
        tbReturn.setBackground(white);

        dtm1 = (DefaultTableModel) tblBatch.getModel();
        dtm2 = (DefaultTableModel) tbReturn.getModel();
        dtm = (DefaultTableModel) tableSerial.getModel();
        curruntDate();

        hashMap = new HashMap<>();

        try {
            getNewCutReturmID();
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            StringWriter sw = new StringWriter();
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblOID = new javax.swing.JLabel();
        txtOID = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        lblTime = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBatch = new javax.swing.JTable();
        panelSerialInfo = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSerial = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbReturn = new javax.swing.JTable();
        lblQty = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        lblReturnQty = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        txtReturnQty = new javax.swing.JTextField();
        lblTotal3 = new javax.swing.JLabel();
        txtTotal3 = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jRadioButton1 = new javax.swing.JRadioButton();
        chkMyReturn = new javax.swing.JRadioButton();
        chkDamage = new javax.swing.JRadioButton();
        datePickerDate = new org.jdesktop.swingx.JXDatePicker();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(774, 720));
        setPreferredSize(new java.awt.Dimension(774, 720));

        lblOID.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblOID.setText("OID :");

        txtOID.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtOID.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtOID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOIDActionPerformed(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate.setText("Date : ");

        txtTime.setEditable(false);
        txtTime.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTime.setEnabled(false);

        lblTime.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTime.setText("Time : ");

        tblBatch.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tblBatch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OD ID", "Batch ID", "Item ID", "Description", "Selling Price", "Qty", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBatch.setRowHeight(22);
        tblBatch.setSelectionBackground(new java.awt.Color(0, 204, 153));
        tblBatch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblBatch.getTableHeader().setReorderingAllowed(false);
        tblBatch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblBatchMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblBatch);

        panelSerialInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelSerialInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Info :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 102, 255))); // NOI18N

        tableSerial.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableSerial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSerial.setRowHeight(22);
        tableSerial.setSelectionBackground(new java.awt.Color(0, 204, 153));
        tableSerial.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableSerial.getTableHeader().setReorderingAllowed(false);
        tableSerial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableSerialMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tableSerial);

        javax.swing.GroupLayout panelSerialInfoLayout = new javax.swing.GroupLayout(panelSerialInfo);
        panelSerialInfo.setLayout(panelSerialInfoLayout);
        panelSerialInfoLayout.setHorizontalGroup(
            panelSerialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelSerialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelSerialInfoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelSerialInfoLayout.setVerticalGroup(
            panelSerialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(panelSerialInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
        );

        lblTotal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTotal.setText("Total : ");

        txtTotal.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTotal.setEnabled(false);

        tbReturn.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tbReturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderID", "Batch", "Damage", "My Return", "Return Qty", "Selling Price", "Amount", "serial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbReturn.setRowHeight(22);
        tbReturn.setSelectionBackground(new java.awt.Color(0, 204, 153));
        tbReturn.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbReturn.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tbReturn);
        if (tbReturn.getColumnModel().getColumnCount() > 0) {
            tbReturn.getColumnModel().getColumn(7).setMinWidth(0);
            tbReturn.getColumnModel().getColumn(7).setPreferredWidth(0);
            tbReturn.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        lblQty.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblQty.setText("Qty : ");

        txtQty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQty.setEnabled(false);

        lblReturnQty.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblReturnQty.setText("Return Qty : ");

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(255, 255, 255));
        btnRemove.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        txtReturnQty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtReturnQty.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtReturnQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtReturnQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReturnQtyActionPerformed(evt);
            }
        });
        txtReturnQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtReturnQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtReturnQtyKeyTyped(evt);
            }
        });

        lblTotal3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTotal3.setText("Total : ");

        txtTotal3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTotal3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal3.setText("0.0");
        txtTotal3.setEnabled(false);

        btnSave.setBackground(new java.awt.Color(153, 204, 255));
        btnSave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Normal");

        chkMyReturn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(chkMyReturn);
        chkMyReturn.setText("My Return");

        chkDamage.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(chkDamage);
        chkDamage.setText("Damage");

        datePickerDate.setEnabled(false);
        datePickerDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOID, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(lblDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(datePickerDate, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(lblTime)
                        .addGap(18, 18, 18)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSerialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblQty, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblReturnQty, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblTotal, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkDamage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkMyReturn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtReturnQty, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                .addComponent(txtQty))
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTotal3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTotal3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(datePickerDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOID)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSerialInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtReturnQty, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblReturnQty))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkMyReturn)
                            .addComponent(chkDamage)
                            .addComponent(jRadioButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemove)
                            .addComponent(btnAdd))
                        .addGap(87, 87, 87)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTotal3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addGap(6, 6, 6))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (!"".equals(txtQty.getText()) && !"".equals(txtOID.getText()) && !"".equals(txtReturnQty.getText())
                && dtm1.getRowCount() != 0) {
            String cserial = "-1";
            if (dtm.getRowCount() != 0 && tableSerial.getSelectedRow() != -1) {
                cserial = dtm.getValueAt(tableSerial.getSelectedRow(), 0).toString();
            }
            if (Integer.parseInt(txtQty.getText()) >= Integer.parseInt(txtReturnQty.getText())
                    && Integer.parseInt(txtReturnQty.getText()) > 0) {

                if (tbReturn.getRowCount() == 0) {
                    loadReturnTbl(cserial);
                } else {
                    int duplicateRow = -1;
                    for (int i = 0; i < dtm2.getRowCount(); i++) {
                        if (dital.get(tblBatch.getSelectedRow()).getOrderDitailID() == tbReturn.getValueAt(i, 0)) {
                            duplicateRow = i;
                            break;
                        }
                    }
                    if (duplicateRow == -1) {
                        loadReturnTbl(cserial);
                    } else {
                        String qty = txtReturnQty.getText();
                        tbReturn.setValueAt(qty, duplicateRow, 4);
                        //JOptionPane.showMessageDialog(null, "ID Added Alrady");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Invaled Return Qty");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Fill All");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if (tbReturn.getSelectedRow() != -1) {
            int removerow = tbReturn.getSelectedRow();
            if (hashMap.containsKey(Integer.parseInt(dtm2.getValueAt(removerow, 1).toString()))) {
                hashMap.remove(Integer.parseInt(dtm2.getValueAt(removerow, 1).toString()));
            }
            double amount = (double) tbReturn.getValueAt(removerow, 6);
            double minAmount = Double.parseDouble(txtTotal3.getText());
            double totalAmount = minAmount - amount;
            txtTotal3.setText(totalAmount + "");
            dtm2.removeRow(removerow);

        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (dtm1.getRowCount() != 0 && dtm2.getRowCount() != 0 && !"".equals(txtQty.getText()) && !"".equals(txtOID.getText()) && !"".equals(txtReturnQty.getText())) {
            try {
                returnSave();
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                StringWriter sw = new StringWriter();
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        } else {
            JOptionPane.showMessageDialog(null, "fill All");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtOIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOIDActionPerformed
        if (!"".equals(txtOID.getText())) {
            dtm.setRowCount(0);
            dtm2.setRowCount(0);
            txtReturnQty.setText("");
            txtQty.setText("0");
            locadIDbyOrders();
            txtTotal3.setText("0.0");
        } else {
            dtm1.setRowCount(0);
            txtQty.setText("0");
            dtm.setRowCount(0);
            dtm2.setRowCount(0);
            txtTotal3.setText("0.0");
            JOptionPane.showMessageDialog(null, "Enter OrderID");
        }
    }//GEN-LAST:event_txtOIDActionPerformed

    private void tblBatchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBatchMouseReleased
        int orderQty = dital.get(tblBatch.getSelectedRow()).getQty();
        String codid = dital.get(tblBatch.getSelectedRow()).getCodid();
        txtQty.setText(orderQty + "");
        txtReturnQty.setEnabled(true);
        odid = dtm1.getValueAt(tblBatch.getSelectedRow(), 0).toString();
        DefaultTableModel dtm9 = (DefaultTableModel) tableSerial.getModel();
        if (dtm1.getRowCount() != 0) {
            dtm9.setRowCount(0);
            try {
                List = CustomerSerialController.searchCusSerialByCodID(codid);
                for (CustomerSerial List1 : List) {
                    Object[] o = {List1.getSerialNo(), false};
                    dtm9.addRow(o);
                    txtReturnQty.setEnabled(false);
                }

            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                StringWriter sw = new StringWriter();
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);

            }
        } else {
            cleancomponents();
            JOptionPane.showMessageDialog(null, "is Empty");
        }


    }//GEN-LAST:event_tblBatchMouseReleased

    private void txtReturnQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReturnQtyActionPerformed
        btnAdd.doClick();
    }//GEN-LAST:event_txtReturnQtyActionPerformed

    private void tableSerialMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSerialMouseReleased
        if (tableSerial.getSelectedRow() != -1) {
            int count = 0;
            DefaultTableModel dtm = (DefaultTableModel) tableSerial.getModel();
            for (int i = 0; i < tableSerial.getRowCount(); i++) {
                if ((boolean) dtm.getValueAt(i, 1) == true) {
                    count++;
                }
            }
            txtReturnQty.setText(count + "");
        }
    }//GEN-LAST:event_tableSerialMouseReleased

    private void txtReturnQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReturnQtyKeyTyped
        Validation.limitesIntegers(txtReturnQty, 4);
    }//GEN-LAST:event_txtReturnQtyKeyTyped

    private void txtReturnQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtReturnQtyKeyReleased
        Validation.limitesIntegers(txtReturnQty, 4);        // TODO add your handling code here:
    }//GEN-LAST:event_txtReturnQtyKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton chkDamage;
    private javax.swing.JRadioButton chkMyReturn;
    private org.jdesktop.swingx.JXDatePicker datePickerDate;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblOID;
    private javax.swing.JLabel lblQty;
    private javax.swing.JLabel lblReturnQty;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTotal3;
    private javax.swing.JPanel panelSerialInfo;
    private javax.swing.JTable tableSerial;
    private javax.swing.JTable tbReturn;
    private javax.swing.JTable tblBatch;
    private javax.swing.JTextField txtOID;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtReturnQty;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtTotal3;
    // End of variables declaration//GEN-END:variables

    private void cleancomponents() {
        txtTime.setText("");
        datePickerDate.setDate(sqlDate);
        txtTotal.setText("0.0");
        txtQty.setText("0");
        txtReturnQty.setText("");
        dtm1.setRowCount(0);
        dtm.setRowCount(0);
    }

    private void curruntDate() {
        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.util.Date utilDate = cal.getTime();
        sqlDate = new Date(utilDate.getTime());
    }

    private String getNewCutReturmID() throws ClassNotFoundException, SQLException {
        String jobCode = IdGenerator.getNewCutReturmID();
        NewCusRetuID = jobCode;
        return jobCode;
    }

    private String getNewMyReturmID() throws ClassNotFoundException, SQLException {
        String jobCode = IdGenerator.getNewMyReturmID();
        NewCusRetuID = jobCode;
        return jobCode;
    }

    private void locadIDbyOrders() {
        totalamount = Double.parseDouble(txtTotal3.getText());
        try {
            dital = CustomerReturnController.locadIDbyOrders(txtOID.getText());

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(CustomerReturnIf.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!dital.isEmpty()) {

            dtm1.setRowCount(0);
            for (LoadOrderItmBachCatDital loadDateTim : dital) {
                datePickerDate.setDate(loadDateTim.getDate());
                txtTime.setText(loadDateTim.getTime() + "");
            }
            oid = txtOID.getText();
            // txtTotal.setText("");
            for (LoadOrderItmBachCatDital dital1 : dital) {
                double amount = dital1.getQty() * dital1.getSoldPrice();
                dtm1.addRow(new Object[]{dital1.getOrderDitailID(), dital1.getBachID(), dital1.getItmCode(), dital1.getDescription(), dital1.getSoldPrice(), dital1.getQty(), amount});
                totalamount += amount;
            }
            try {
                Orders o = OrderController.searchOrderByOrderid(txtOID.getText());
                txtTotal.setText(o.getAmount() + "");
            } catch (ClassNotFoundException | SQLException e) {

            }
        } else {
            cleancomponents();
            JOptionPane.showMessageDialog(null, "Enter Valed ID");
        }

    }

    private void loadReturnTbl(String cseria) {
        double totalAmountRetun = Double.parseDouble(txtTotal3.getText());
        String orderID = dital.get(tblBatch.getSelectedRow()).getOrderDitailID();
        String bachID = dital.get(tblBatch.getSelectedRow()).getBachID();
        double sellPrice = dital.get(tblBatch.getSelectedRow()).getSoldPrice();
        //int qty = dital.get(tblBatch.getSelectedRow()).getQty();
        int returnqty = Integer.parseInt(txtReturnQty.getText());
        double amount = returnqty * sellPrice;
        boolean damage = false;
        boolean myret = false;
        if (chkDamage.isSelected()) {
            damage = true;
        }
        if (chkMyReturn.isSelected()) {
            myret = true;
        }
        dtm2.addRow(new Object[]{
            orderID, bachID, damage, myret, returnqty, sellPrice, amount, cseria
        });
        // DefaultTableModel dtm = (DefaultTableModel) tableSerial.getModel();
        ArrayList<String> list = new ArrayList<>();
        for (int i = 0; i < tableSerial.getRowCount(); i++) {
            if ((boolean) dtm.getValueAt(i, 1) == true) {
                list.add(dtm.getValueAt(i, 0).toString());
            }
        }
        if (!list.isEmpty()) {
            hashMap.put(Integer.parseInt(orderID), list);
        }

//        for (int i = 0; i < tbReturn.getRowCount(); i++) {
//            //totalAmountRetun += amount;
//            double amount1 = Double.parseDouble(tbReturn.getValueAt(i, 6) + "");
        totalAmountRetun += amount;
//        }
        txtTotal3.setText(totalAmountRetun + "");
    }

//    private void UpdateReturnTb1() {
//        System.out.println("updeted");
//        String orderID = dital.get(tblBatch.getSelectedRow()).getOrderDitailID();
//        String itemCode = dital.get(tblBatch.getSelectedRow()).getItmCode();
//        double sellPrice = dital.get(tblBatch.getSelectedRow()).getSoldPrice();
//        int qty = dital.get(tblBatch.getSelectedRow()).getQty();
//        double amount = qty * sellPrice;
//        dtm2.addRow(new Object[]{
//            orderID, txtReturnQty.getText(), itemCode, sellPrice, amount
//        });
//    }
    private void returnSave() throws SQLException, ClassNotFoundException {
        int result = 0;
        boolean myr;
        boolean dam;
        String serial;
        for (int i = 0; i < tbReturn.getRowCount(); i++) {
            dam = false;
            myr = false;
            serial = null;
            if ((boolean) dtm2.getValueAt(i, 3) == true) {
                myr = true;
            }
            if ((boolean) dtm2.getValueAt(i, 2) == true) {
                dam = true;
            }
            if (!dtm2.getValueAt(i, 7).toString().equals("-1")) {
                serial = dtm2.getValueAt(i, 7).toString();
            }
            ReturnItem ri;
//            if (hashMap.containsKey(Integer.parseInt(dtm2.getValueAt(i, 1).toString()))) {
//                for (Entry<Integer, ArrayList<String>> entry : hashMap.entrySet()) {
//                    if (Integer.parseInt(dtm2.getValueAt(i, 1).toString()) == entry.getKey()) {
//                        for (String serial : entry.getValue()) {
//                            if (dam) {
//                                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
//                                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, null, 1, "Customer order return",
//                                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
//                            } else if (myr) {
//                                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
//                                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, null, 2, null,
//                                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
//                            } else {
//                                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
//                                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, serial, 0, null,
//                                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
//                            }
//                        }
//                    }
//                }
//            } else 
            if (dam) {
                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, serial, 1, "Customer order return",
                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
            } else if (myr) {
                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, serial, 2, null,
                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
            } else {
                ri = new ReturnItem(Integer.parseInt(dtm2.getValueAt(i, 1).toString()),
                        Integer.parseInt(dtm2.getValueAt(i, 4).toString()), oid, serial, 0, null,
                        getNewCutReturmID(), getNewMyReturmID(), HomeFrame.user.getUid());
            }
            System.out.println(Integer.parseInt(dtm2.getValueAt(i, 1).toString()) + "      "
                    + Integer.parseInt(dtm2.getValueAt(i, 4).toString()) + "      " + oid + "      " + null + "      " + 1 + "      " + "Customer order return" + "      "
                    + getNewCutReturmID() + "      " + getNewMyReturmID() + "      " + HomeFrame.user.getUid());
            // if (ri != null) {
            int add = CustomerReturnController.addCustomerReturnProcedure(ri);
            result++;
            //   }
            System.out.println("result " + result);
        }
        if (result == dtm2.getRowCount()) {
            JOptionPane.showMessageDialog(null, "Saved.. !");
            dtm.setRowCount(0);
            txtReturnQty.setText("");
            txtTotal3.setText("0.0");
            //txtQty.setText("0");
            dtm2.setRowCount(0);
            txtOID.requestFocus();
            txtOID.selectAll();
        } else {
            JOptionPane.showMessageDialog(null, "Save Faild");
        }
    }

}
