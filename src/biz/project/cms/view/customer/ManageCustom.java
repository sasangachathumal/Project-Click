/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.customer;

import biz.project.cms.controller.CustomerController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Customer;
import biz.project.cms.other.Validation;
import java.awt.Color;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vihanga
 */
public class ManageCustom extends javax.swing.JDialog {

    private ArrayList<Customer> allCustomers = null;
    private ArrayList<Customer> allCustomer = null;
    private Customer customer;

    /**
     * Creates new form ManageCustom
     */
    public ManageCustom(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);

        Color white = new Color(255, 255, 255);
        tblCustomer.setOpaque(true);
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        tblCustomer.setFillsViewportHeight(true);
        tblCustomer.setBackground(white);
        //
        //AutoCompleteDecorator.decorate(comboSearch);
        loadAllCustomers();
        //   makeSearchable();
        setLocationRelativeTo(parent);
        setTitle("Manage Customer");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtCustomerContact = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCustomerNic = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        chkNewNic = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tblCustomer.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Contact", "NIC", "Debit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomer.setSelectionBackground(new java.awt.Color(0, 153, 153));
        tblCustomer.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCustomer.getTableHeader().setReorderingAllowed(false);
        tblCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomer);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Info :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 0, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Name :");

        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCustomerName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Contact :");

        txtCustomerContact.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCustomerContact.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCustomerContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerContactKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustomerContactKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("NIC :");

        txtCustomerNic.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCustomerNic.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCustomerNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNicActionPerformed(evt);
            }
        });
        txtCustomerNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNicKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCustomerNicKeyTyped(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(245, 245, 234));
        btnUpdate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        chkNewNic.setBackground(new java.awt.Color(255, 252, 252));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCustomerName)
                    .addComponent(txtCustomerContact, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCustomerNic, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkNewNic)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerContact, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerNic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(chkNewNic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomerMouseClicked
        setValuesToText();
    }//GEN-LAST:event_tblCustomerMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateCustomer();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtCustomerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyReleased
        Validation.name(txtCustomerName);
    }//GEN-LAST:event_txtCustomerNameKeyReleased

    private void txtCustomerNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyTyped
        Validation.name(txtCustomerName);
    }//GEN-LAST:event_txtCustomerNameKeyTyped

    private void txtCustomerContactKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerContactKeyReleased
        Validation.phoneNumber(txtCustomerContact, evt);
    }//GEN-LAST:event_txtCustomerContactKeyReleased

    private void txtCustomerContactKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerContactKeyTyped
        Validation.phoneNumber(txtCustomerContact, evt);
    }//GEN-LAST:event_txtCustomerContactKeyTyped

    private void txtCustomerNicKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNicKeyTyped
        if (chkNewNic.isSelected()) {
            Validation.textNewNIC(txtCustomerNic);
        } else {
            Validation.textNIC(txtCustomerNic);
        }
    }//GEN-LAST:event_txtCustomerNicKeyTyped

    private void txtCustomerNicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNicKeyReleased
        if (chkNewNic.isSelected()) {
            Validation.validateNIC(txtCustomerNic);
        } else {
            Validation.validateNIC(txtCustomerNic);
        }
    }//GEN-LAST:event_txtCustomerNicKeyReleased

    private void txtCustomerNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerNicActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageCustom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageCustom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageCustom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCustom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ManageCustom dialog = new ManageCustom(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkNewNic;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCustomer;
    private javax.swing.JTextField txtCustomerContact;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtCustomerNic;
    // End of variables declaration//GEN-END:variables

    private void loadAllCustomers() {
        DefaultTableModel dtm = (DefaultTableModel) tblCustomer.getModel();
        dtm.setRowCount(0);
        //comboSearch.removeAllItems();
        //comboSearch.addItem("All Customers");
        try {
            allCustomers = CustomerController.allCustomersWithDebits();
            allCustomer = CustomerController.allCustomers();

            for (Customer cus : allCustomers) {
                Object[] rowData = {cus.getName(), cus.getContact(), cus.getNic(), cus.getDebit()};
                dtm.addRow(rowData);
                // comboSearch.addItem(cus.getName() + " - " + cus.getNic() + " - " + cus.getContact());
            }
            for (Customer cus : allCustomer) {
                boolean b = true;
                for (Customer c : allCustomers) {
                    if (c.getCid() == cus.getCid()) {
                        b = false;
                        break;
                    }
                }
                Object[] rowData = {cus.getName(), cus.getContact(), cus.getNic(), "0.0"};
                dtm.addRow(rowData);
                //  comboSearch.addItem(cus.getName() + " - " + cus.getNic() + " - " + cus.getContact());

            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void setValuesToText() {
        int selectedRow = tblCustomer.getSelectedRow();
        String name = String.valueOf(tblCustomer.getValueAt(selectedRow, 0));
        String contact = String.valueOf(tblCustomer.getValueAt(selectedRow, 1));
        String nic = String.valueOf(tblCustomer.getValueAt(selectedRow, 2));
        for (Customer cus : allCustomer) {
            if (Integer.parseInt(contact) == cus.getContact()) {
                customer = cus;
                break;
            }
        }
        txtCustomerName.setText(customer.getName());
        txtCustomerContact.setText(customer.getContact() + "");
        txtCustomerNic.setText(customer.getNic());

    }

    private void updateCustomer() {
        try {
            if (customer != null) {
                String name = txtCustomerName.getText();
                String con = txtCustomerContact.getText();
                String nic = txtCustomerNic.getText();
                customer.setName(name);
                customer.setContact(Integer.parseInt(con));
                customer.setNic(nic);
                boolean isupdateCustomer = CustomerController.updateCustomer(customer);
                if (isupdateCustomer) {
                    JOptionPane.showMessageDialog(this, "Customer Successfully Updated !!!");
                    txtCustomerName.setText("");
                    txtCustomerContact.setText("");
                    txtCustomerNic.setText("");
                    loadAllCustomers();
                } else {
                    JOptionPane.showMessageDialog(this, "Customer Update fail !!!" + "\n" + "Try Again");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Error Refresh this page.");
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid contact number !");
        }

    }

    private void deleteCustomer() {
        if (customer != null) {
            try {
                int deleteCustomerbyName = CustomerController.deleteCustomer(customer.getCid());
                if (deleteCustomerbyName > 0) {
                    JOptionPane.showMessageDialog(this, "Customer Successfully Deleted !!!");
                    txtCustomerName.setText("");
                    txtCustomerContact.setText("");
                    txtCustomerNic.setText("");
                    loadAllCustomers();
                } else {
                    JOptionPane.showMessageDialog(this, "Sorry! This customer has orders. \nCustomer cannot be deleted due to data security concerns.");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Text Feilds are empty");
        }
    }

    private void searchCombo() {
//        if (comboSearch.getSelectedIndex() != -1) {
//            try {
//                String[] split = comboSearch.getSelectedItem().toString().split(" - ");
//                Customer customer = CustomerController.searchSupplier(split[0]);
//                if (supplier1 != null) {
//                    supplier=supplier1;
//                    txtSupplierName.setText(supplier1.getName());
//                    txtCompanyName.setText(supplier1.getCompany());
//                    txtMobileNo.setText(supplier1.getMobile() + "");
//                    txtOfficeNo.setText(supplier1.getOffice() + "");
//                    txtFax.setText(supplier1.getFax() + "");
//                    txtEmail.setText(supplier1.getEmail());
//                }
//            } catch (ClassNotFoundException | SQLException ex) {
//                Logger.getLogger(ManageSupplier.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }
}
