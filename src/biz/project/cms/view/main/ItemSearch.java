/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.main;

import biz.project.cms.controller.BatchController;
import biz.project.cms.controller.CategoryController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.controller.SupplierController;
import biz.project.cms.model.Category;
import biz.project.cms.model.Item;
import biz.project.cms.model.ItemBatch;
import biz.project.cms.view.order.QtyBatches;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vihanga
 */
public class ItemSearch extends javax.swing.JDialog {

    private final DefaultTableModel dtm;
    private static final String solve = "Solve";
    public boolean order;

    /**
     * Creates new form ItemSearch
     */
    public ItemSearch(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        order = false;
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        this.dtm = (DefaultTableModel) jTable1.getModel();
        KeyStroke enter = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
        jTable1.getInputMap(JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(enter, solve);
        jTable1.setOpaque(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setBackground(Color.white);
        setLocationRelativeTo(parent);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        rCode = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        chkManual = new javax.swing.JCheckBox();
        rDescMid = new javax.swing.JRadioButton();
        chkSup = new javax.swing.JCheckBox();
        rDesc = new javax.swing.JRadioButton();
        chkCat = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Items");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        rCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rCode);
        rCode.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rCode.setText("Item Code [F3]");
        rCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rCodeItemStateChanged(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 102));
        jLabel1.setFont(new java.awt.Font("sansserif", 2, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Result - 0");

        txtKey.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        txtKey.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyActionPerformed(evt);
            }
        });
        txtKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeyKeyReleased(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(0, 0, 255));
        jTable1.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Barcode", "Qty", "Category", "Suppler"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(25);
        jTable1.setSelectionBackground(new java.awt.Color(0, 153, 102));
        jTable1.setSelectionForeground(new java.awt.Color(255, 255, 204));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(240);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(5);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(40);
        }

        chkManual.setBackground(new java.awt.Color(255, 255, 255));
        chkManual.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        chkManual.setSelected(true);
        chkManual.setText("Manual [F4]");

        rDescMid.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rDescMid);
        rDescMid.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rDescMid.setText("Description Middle [F2]");
        rDescMid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rDescMidItemStateChanged(evt);
            }
        });

        chkSup.setBackground(new java.awt.Color(255, 255, 255));
        chkSup.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        chkSup.setText("Supplier [F5]");

        rDesc.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rDesc);
        rDesc.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rDesc.setSelected(true);
        rDesc.setText("Description [F1]");
        rDesc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rDescItemStateChanged(evt);
            }
        });

        chkCat.setBackground(new java.awt.Color(255, 255, 255));
        chkCat.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        chkCat.setText("Category [F6]");

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("[INSERT]");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkManual)
                            .addComponent(rDesc))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rDescMid)
                            .addComponent(chkSup)))
                    .addComponent(jLabel2))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(chkCat)
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(rCode)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, 0)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkManual)
                            .addComponent(chkSup)
                            .addComponent(chkCat))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rDesc)
                            .addComponent(rDescMid)
                            .addComponent(rCode))))
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setPreferredSize(new java.awt.Dimension(70, 0));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("desc");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setText("desc m");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setText("code");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setText("sup");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem5.setText("MANUAL");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem6.setText("cat");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem7.setText("cat");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyActionPerformed
        dtm.setRowCount(0);
        if (!txtKey.getText().isEmpty()) {
            if (chkManual.isSelected()) {
                try {
                    String keyWord = txtKey.getText().toLowerCase();
                    search(keyWord);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (chkSup.isSelected()) {
                try {
                    String keyWord = txtKey.getText().toLowerCase();
                    search(keyWord);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            getToolkit().beep();
        }
    }//GEN-LAST:event_txtKeyActionPerformed

    private void txtKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeyKeyReleased
        if (!chkManual.isSelected()) {
            try {
                String keyWord = txtKey.getText().toLowerCase();
                search(keyWord);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            if (dtm.getRowCount() > 0) {
                jTable1.requestFocus();
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            dispose();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyKeyReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txtKey.requestFocus();
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (jTable1.getSelectedRow() != -1) {
                if (order) {
                    try {
                        if (Integer.parseInt(dtm.getValueAt(jTable1.getSelectedRow(), 3).toString()) > 0) {
                            try {
                                Item item = ItemController.searchIstemByCode(dtm.getValueAt(jTable1.getSelectedRow(), 0).toString());
                                if (item != null) {
                                    this.setVisible(false);
                                    QtyBatches qb = new QtyBatches(null, true);
                                    qb.setItem(item);
                                    qb.setVisible(true);
                                }
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SQLException ex) {
                                Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            getToolkit().beep();
                        }
                    } catch (NumberFormatException numberFormatException) {
                        getToolkit().beep();
                    }
                }
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            dispose();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    private void rDescItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rDescItemStateChanged
        if (!txtKey.getText().isEmpty()) {
            try {
                String keyWord = txtKey.getText().toLowerCase();
                search(keyWord);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rDescItemStateChanged

    private void rDescMidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rDescMidItemStateChanged
        if (!txtKey.getText().isEmpty()) {
            try {
                String keyWord = txtKey.getText().toLowerCase();
                search(keyWord);
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rDescMidItemStateChanged

    private void rCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rCodeItemStateChanged
        if (!txtKey.getText().isEmpty()) {
            if (rCode.isSelected()) {
                try {
                    String keyWord = txtKey.getText().toLowerCase();
                    search(keyWord);
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ItemSearch.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_rCodeItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        rDesc.setSelected(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        rDescMid.setSelected(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        rCode.setSelected(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (chkSup.isSelected()) {
            chkSup.setSelected(false);
        } else {
            chkSup.setSelected(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if (chkManual.isSelected()) {
            chkManual.setSelected(false);
        } else {
            chkManual.setSelected(true);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        if (chkCat.isSelected()) {
            chkCat.setSelected(false);
        } else {
            chkCat.setSelected(true);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        txtKey.requestFocus();
        txtKey.selectAll();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void catSearch() throws SQLException, ClassNotFoundException {
        String keyWord = txtKey.getText().toLowerCase();
        ArrayList<Category> list = CategoryController.getAllCategorySearch("%" + keyWord + "%");
        if (!list.isEmpty()) {
            for (Category cat : list) {
                ArrayList<Item> items = ItemController.getItemsByCategory(cat.getCatID() + "");
                if (!items.isEmpty()) {
                    fillTable(items, false);
                }
            }
        }
    }

    public void search(String keyWord) throws ClassNotFoundException, SQLException {
        if (keyWord.startsWith("it")) {
            System.out.println("..");
            String split[] = keyWord.split("it");
            try {
//                if (rCat.isSelected()) {
//                    if (split[1] != null) {
//                        ArrayList<Item> items = ItemController.searchCodeLike("%" + split[1] + "%", 3);
//                        if (!items.isEmpty()) {
//                            fillTable(items, true);
//                        } else {
//                            //no such item
//                        }
//                    }
//                } else 
                if (rDesc.isSelected()) {
                    if (split[1] != null) {
                        ArrayList<Item> items = ItemController.searchCodeLike("%" + split[1] + "%", 2);
                        if (!items.isEmpty()) {
                            fillTable(items, true);
                        } else {
                            dtm.setRowCount(0);
                            jLabel1.setText("Search Result - 0");
                        }
                    }
                } else {
                    if (split[1] != null) {
                        ArrayList<Item> items = ItemController.searchCodeLike("%" + split[1] + "%", 1);
                        if (!items.isEmpty()) {
                            fillTable(items, true);
                        } else {
                            dtm.setRowCount(0);
                            jLabel1.setText("Search Result - 0");
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                ArrayList<Item> items = ItemController.getAllItem();
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");// no item
                }
            }
        } else if (chkSup.isSelected()) {
            if (rCode.isSelected()) {
                ArrayList<Item> items = ItemController.searchItemBySup("%" + keyWord + "%", 1);
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            } else if (rDescMid.isSelected()) {
                ArrayList<Item> items = ItemController.searchItemBySup("%" + keyWord + "%", 2);
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            } else {
                System.out.println("123465987");
                ArrayList<Item> items = ItemController.searchItemBySup(keyWord + "%", 3);
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            }
        } else if (chkCat.isSelected()) {
            if (rCode.isSelected()) {
                ArrayList<Category> cats = CategoryController.getAllCategorySearch("%" + keyWord + "%");
                if (!cats.isEmpty()) {
                    for (Category categ : cats) {
                        System.out.println("categ " + "");
                        ArrayList<Item> items = ItemController.getItemsByCategory(categ.getCatID() + "");
                        if (!items.isEmpty()) {
                            fillTable(items, false);
                        } else {
                            dtm.setRowCount(0);
                            jLabel1.setText("Search Result - 0");// no item
                        }
                    }

                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            } else {
                ArrayList<Category> cats = CategoryController.getAllCategorySearch("%" + keyWord + "%");
                if (!cats.isEmpty()) {
                    for (Category categ : cats) {
                        ArrayList<Item> items = ItemController.getItemsByCategoryOrderDes(categ.getCatID() + "");
                        if (!items.isEmpty()) {
                            fillTable(items, false);
                        } else {
                            dtm.setRowCount(0);
                            jLabel1.setText("Search Result - 0"); // no item
                        }
                    }

                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            }
        } else {
            if (rCode.isSelected()) {
                ArrayList<Item> items = ItemController.searchDescLike("%" + keyWord + "%", 1);
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            } else if (rDescMid.isSelected()) {
                ArrayList<Item> items = ItemController.searchDescLike("%" + keyWord + "%", 2);
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            } else if (rDesc.isSelected()) {
                System.out.println("123465987");
                ArrayList<Item> items = ItemController.searchDescStartWith(keyWord + "%");
                if (!items.isEmpty()) {
                    fillTable(items, true);
                } else {
                    dtm.setRowCount(0);
                    jLabel1.setText("Search Result - 0");//no such item
                }
            }
//            else if (rCat.isSelected()) {
//                ArrayList<Item> items = ItemController.searchDescLike("%" + keyWord + "%", 3);
//                if (!items.isEmpty()) {
//                    fillTable(items, true);
//                } else {
//                    //no such item
//                }
//            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ItemSearch dialog = new ItemSearch(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCat;
    private javax.swing.JCheckBox chkManual;
    private javax.swing.JCheckBox chkSup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public javax.swing.JRadioButton rCode;
    private javax.swing.JRadioButton rDesc;
    private javax.swing.JRadioButton rDescMid;
    public static javax.swing.JTextField txtKey;
    // End of variables declaration//GEN-END:variables

    private void fillTable(ArrayList<Item> items, boolean clear) throws ClassNotFoundException, SQLException {
        if (clear) {
            dtm.setRowCount(0);
        }
        int res = 0;
        String supplier, cat;
        for (Item item : items) {
            int qty = 0;
            ArrayList<ItemBatch> batchs = BatchController.getItemBatches(item.getCode());
            if (!batchs.isEmpty()) {
                for (ItemBatch batch : batchs) {
                    qty += batch.getQty();
                }
            }
            supplier = "-";
            cat = "-";
            String sup = SupplierController.searchSupplierItemCode(item.getCode());
            Category c = CategoryController.searchCategoryByID(item.getCatId() + "");
            if (c != null) {
                cat = c.getName();
            }
            if (sup != null) {
                supplier = sup;
            }
            if ("0".equals(Integer.toString(qty))) {
                String t = "<html> <font color='#AE4D4D'>" + qty + "</font> </html>";
                Object o[] = {"<html> <font color='#AE4D4D'>" + item.getCode() + "</font> </html>", "<html> <font color='#AE4D4D'>" + item.getDesciption() + "</font> </html>", "<html> <font color='#AE4D4D'>" + item.getSerial() + "</font> </html>", t,
                    "<html> <font color='#AE4D4D'>" + cat + "</font> </html>",
                    "<html> <font color='#AE4D4D'>" + supplier + "</font> </html>"};
                dtm.addRow(o);
            } else {
                Object o[] = {item.getCode(), item.getDesciption(), item.getSerial(), qty, cat, supplier};
                dtm.addRow(o);
            }

            res++;

        }
        jLabel1.setText("Search Result - " + res);

    }

}
