/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.controller.CategoryController;
import biz.project.cms.controller.DealerSerialController;
import biz.project.cms.controller.GrnController;
import biz.project.cms.controller.GrnDetailController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.controller.SupplierController;
import biz.project.cms.fileaccess.GRNSerialFileAccess;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.fileaccess.NewGRNFileAccess;
import biz.project.cms.model.Category;
import biz.project.cms.model.DealerSerial;
import biz.project.cms.model.GRN;
import biz.project.cms.model.GRNDetailBatch;
import biz.project.cms.model.Item;
import biz.project.cms.model.Supplier;
import biz.project.cms.model.TempOrder;
import biz.project.cms.other.IdGenerator;
import biz.project.cms.other.SearchCombo;
import biz.project.cms.other.Validation;
import biz.project.cms.view.main.HomeFrame;
import biz.project.cms.view.other.Progress;
import biz.project.cms.view.supplier.AddSupplier;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Vihanga
 */
public class GRNs extends javax.swing.JPanel {

    private final DefaultTableModel dtmbatch, dtm;
    private HashMap<String, ArrayList<DealerSerial>> hashMap;
    private ArrayList<DealerSerial> serials;
    private static final NewGRNFileAccess ACCESS = new NewGRNFileAccess();
    private static final GRNSerialFileAccess GRNSFA = new GRNSerialFileAccess();
    private final StringWriter sw;

    /**
     * Creates new form GRNs
     */
    public GRNs() {

        this.sw = new StringWriter();
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        Color white = new Color(255, 255, 255);
        tableSerialNo.setOpaque(true);
        tableSerialNo.setFillsViewportHeight(true);
        tableSerialNo.setBackground(white);
        table.setOpaque(true);
        table.setFillsViewportHeight(true);
        table.setBackground(white);

        dtm = (DefaultTableModel) table.getModel();
        dtmbatch = (DefaultTableModel) tableSerialNo.getModel();
        hashMap = new HashMap<>();
        serials = new ArrayList<>();
        fillComboSupplier();
        fillComboItem();
        fillCategory();
        try {
            newItemCode();
            newGRNID();
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
        add(jMenuBar1);
        SearchCombo combo = new SearchCombo();
        combo.setSearchableCombo(comboDesc, true, "No such item !", false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        panelSupplierInfo1 = new javax.swing.JPanel();
        txtGrnId1 = new javax.swing.JTextField();
        lblGrnId1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblSupplier1 = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        comboSupplier1 = new javax.swing.JComboBox<String>();
        btnNewSupplier1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        panelWarrentyInfo = new javax.swing.JPanel();
        txtPeriod = new javax.swing.JTextField();
        lblPeriod = new javax.swing.JLabel();
        txtSerial = new javax.swing.JTextField();
        lblSerial = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSerialNo = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        panelNewItemInfo = new javax.swing.JPanel();
        lblNewItemBarcode = new javax.swing.JLabel();
        txtNewCode = new javax.swing.JTextField();
        lblNewItemCode = new javax.swing.JLabel();
        txtNewBarcode = new javax.swing.JTextField();
        lblROL = new javax.swing.JLabel();
        lblNewItemDescription = new javax.swing.JLabel();
        txtROL = new javax.swing.JTextField();
        txtNewDesc = new javax.swing.JTextField();
        btnAddNewItem = new javax.swing.JButton();
        cmbCategory = new javax.swing.JComboBox<String>();
        lblNewItemBarcode1 = new javax.swing.JLabel();
        btnAddItem = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtMin = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        txtCode = new javax.swing.JTextField();
        txtBarcode = new javax.swing.JTextField();
        comboDesc = new javax.swing.JComboBox();
        txtUnit = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        txtDiscount = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();

        jMenu4.setPreferredSize(new java.awt.Dimension(0, 3));

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem11.setText("Sell Price");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem12.setText("Insert Qty");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jMenuItem13.setText("Insert Code");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem14.setText("Barcode");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem15.setText("Description");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem17.setText("Clear All");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem17);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem19.setText("Save");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem20.setText("Add to Table");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem20);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Sell Price");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem16);

        jMenuBar1.add(jMenu4);

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(774, 720));
        setPreferredSize(new java.awt.Dimension(774, 720));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(0, 0));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton1.setText("Restore");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton2.setText("Print");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton3.setText("Calculator");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        panelSupplierInfo1.setBackground(new java.awt.Color(255, 255, 255));
        panelSupplierInfo1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GRN Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(141, 141, 237))); // NOI18N

        txtGrnId1.setEditable(false);
        txtGrnId1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtGrnId1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtGrnId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrnId1ActionPerformed(evt);
            }
        });

        lblGrnId1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblGrnId1.setText("GRN ID:");

        txtName.setEditable(false);
        txtName.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblSupplier1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSupplier1.setText("Company :");

        lblDate1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate1.setText("Date :");

        lblName1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblName1.setText("Name :");

        comboSupplier1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSupplier1ItemStateChanged(evt);
            }
        });
        comboSupplier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSupplier1ActionPerformed(evt);
            }
        });

        btnNewSupplier1.setBackground(new java.awt.Color(255, 255, 255));
        btnNewSupplier1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnNewSupplier1.setText("New");
        btnNewSupplier1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNewSupplier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSupplier1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSupplierInfo1Layout = new javax.swing.GroupLayout(panelSupplierInfo1);
        panelSupplierInfo1.setLayout(panelSupplierInfo1Layout);
        panelSupplierInfo1Layout.setHorizontalGroup(
            panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSupplierInfo1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblGrnId1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtGrnId1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jXDatePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSupplierInfo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSupplier1)
                    .addComponent(lblName1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboSupplier1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator2)
        );
        panelSupplierInfo1Layout.setVerticalGroup(
            panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSupplierInfo1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGrnId1)
                    .addComponent(lblDate1)
                    .addComponent(txtGrnId1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSupplier1)
                    .addComponent(btnNewSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelWarrentyInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelWarrentyInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Waranty Info ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        txtPeriod.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtPeriod.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodActionPerformed(evt);
            }
        });
        txtPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPeriodKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPeriodKeyTyped(evt);
            }
        });

        lblPeriod.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPeriod.setText("Period :");

        txtSerial.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtSerial.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialActionPerformed(evt);
            }
        });
        txtSerial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerialKeyReleased(evt);
            }
        });

        lblSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSerial.setText("Serial :");

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        tableSerialNo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "                             Serial Number"
            }
        ));
        tableSerialNo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableSerialNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableSerialNoKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableSerialNo);

        jComboBox1.setFont(new java.awt.Font("sansserif", 2, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(102, 102, 102));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DAYS", "MONTHS", "YEARS" }));

        javax.swing.GroupLayout panelWarrentyInfoLayout = new javax.swing.GroupLayout(panelWarrentyInfo);
        panelWarrentyInfo.setLayout(panelWarrentyInfoLayout);
        panelWarrentyInfoLayout.setHorizontalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                        .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPeriod)
                            .addComponent(lblSerial))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSerial)
                            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                                .addComponent(txtPeriod)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelWarrentyInfoLayout.setVerticalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPeriod)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSerial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        panelNewItemInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelNewItemInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Item ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        lblNewItemBarcode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNewItemBarcode.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNewItemBarcode.setText("Barcode :");

        txtNewCode.setEditable(false);
        txtNewCode.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtNewCode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNewCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewCodeActionPerformed(evt);
            }
        });

        lblNewItemCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNewItemCode.setText("Code :");

        txtNewBarcode.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtNewBarcode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNewBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewBarcodeActionPerformed(evt);
            }
        });

        lblROL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblROL.setText("ROL :");

        lblNewItemDescription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNewItemDescription.setText("Decs. :");

        txtROL.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtROL.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtROL.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtROLFocusGained(evt);
            }
        });
        txtROL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtROLActionPerformed(evt);
            }
        });
        txtROL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtROLKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtROLKeyTyped(evt);
            }
        });

        txtNewDesc.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtNewDesc.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNewDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtNewDescFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNewDescFocusLost(evt);
            }
        });
        txtNewDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewDescActionPerformed(evt);
            }
        });
        txtNewDesc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNewDescKeyReleased(evt);
            }
        });

        btnAddNewItem.setBackground(new java.awt.Color(255, 255, 255));
        btnAddNewItem.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        btnAddNewItem.setText("+");
        btnAddNewItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewItemActionPerformed(evt);
            }
        });

        cmbCategory.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N

        lblNewItemBarcode1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNewItemBarcode1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNewItemBarcode1.setText("Cat. :");

        btnAddItem.setBackground(new java.awt.Color(255, 255, 255));
        btnAddItem.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        btnAddItem.setText("Add");
        btnAddItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNewItemInfoLayout = new javax.swing.GroupLayout(panelNewItemInfo);
        panelNewItemInfo.setLayout(panelNewItemInfoLayout);
        panelNewItemInfoLayout.setHorizontalGroup(
            panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblNewItemCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewCode))
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addComponent(lblNewItemBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewBarcode))
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblNewItemDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNewDesc))
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addComponent(lblNewItemBarcode1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCategory, 0, 1, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddNewItem)
                .addContainerGap())
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lblROL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtROL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelNewItemInfoLayout.setVerticalGroup(
            panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNewItemInfoLayout.createSequentialGroup()
                .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewItemCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewItemBarcode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNewItemDescription))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblNewItemBarcode1)
                    .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddNewItem)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelNewItemInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtROL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblROL)
                    .addComponent(btnAddItem)))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(153, 153, 255)), "Item Info ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(340, 267));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Item Code :");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Description :");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Cost Price :");

        txtMin.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMin.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMin.setCaretColor(new java.awt.Color(116, 7, 7));
        txtMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinActionPerformed(evt);
            }
        });
        txtMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinKeyTyped(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setText(" Barcode :");

        jLabel26.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel26.setText("Qty :");

        txtQty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQty.setCaretColor(new java.awt.Color(116, 7, 7));
        txtQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQtyFocusLost(evt);
            }
        });
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        txtCode.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCode.setCaretColor(new java.awt.Color(116, 7, 7));
        txtCode.setSelectionColor(new java.awt.Color(153, 153, 255));
        txtCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtCodeFocusGained(evt);
            }
        });
        txtCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodeActionPerformed(evt);
            }
        });
        txtCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodeKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodeKeyTyped(evt);
            }
        });

        txtBarcode.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtBarcode.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtBarcode.setCaretColor(new java.awt.Color(116, 7, 7));
        txtBarcode.setSelectionColor(new java.awt.Color(153, 153, 255));
        txtBarcode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBarcodeFocusGained(evt);
            }
        });
        txtBarcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBarcodeActionPerformed(evt);
            }
        });
        txtBarcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBarcodeKeyReleased(evt);
            }
        });

        comboDesc.setEditable(true);
        comboDesc.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        comboDesc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboDescItemStateChanged(evt);
            }
        });
        comboDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboDescActionPerformed(evt);
            }
        });

        txtUnit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtUnit.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtUnit.setCaretColor(new java.awt.Color(116, 7, 7));
        txtUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitActionPerformed(evt);
            }
        });
        txtUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUnitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnitKeyTyped(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel31.setText("Unit Price :");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Min. Price :");

        txtCost.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCost.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCost.setCaretColor(new java.awt.Color(116, 7, 7));
        txtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostActionPerformed(evt);
            }
        });
        txtCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostKeyTyped(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(255, 255, 255));
        btnAdd.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(51, 51, 0));
        btnAdd.setText("ADD");
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setMaximumSize(new java.awt.Dimension(50, 30));
        btnAdd.setMinimumSize(new java.awt.Dimension(50, 30));
        btnAdd.setPreferredSize(new java.awt.Dimension(50, 30));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(255, 255, 255));
        btnRemove.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(51, 0, 0));
        btnRemove.setText("REMOVE");
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.setMaximumSize(new java.awt.Dimension(50, 30));
        btnRemove.setMinimumSize(new java.awt.Dimension(50, 30));
        btnRemove.setPreferredSize(new java.awt.Dimension(50, 30));
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(txtCode)
                                        .addGap(4, 4, 4))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtMin, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCost))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBarcode)
                                    .addComponent(txtUnit)
                                    .addComponent(txtQty)))
                            .addComponent(comboDesc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel24)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(jLabel9)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        table.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Code", "Description", "Warranty", "Qty", "Cost Price", "Unit Price", "Min. Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setMinimumSize(new java.awt.Dimension(0, 0));
        table.setRowHeight(22);
        table.setSelectionBackground(new java.awt.Color(0, 153, 102));
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getTableHeader().setReorderingAllowed(false);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(0).setPreferredWidth(5);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(1).setPreferredWidth(50);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(2).setPreferredWidth(350);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(3).setPreferredWidth(10);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(4).setPreferredWidth(10);
            table.getColumnModel().getColumn(5).setResizable(false);
            table.getColumnModel().getColumn(5).setPreferredWidth(40);
            table.getColumnModel().getColumn(6).setResizable(false);
            table.getColumnModel().getColumn(6).setPreferredWidth(10);
            table.getColumnModel().getColumn(7).setResizable(false);
            table.getColumnModel().getColumn(7).setPreferredWidth(10);
            table.getColumnModel().getColumn(8).setResizable(false);
            table.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        txtDiscount.setFont(new java.awt.Font("sansserif", 3, 15)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(102, 102, 102));
        txtDiscount.setText("0.00");
        txtDiscount.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtDiscount.setSelectedTextColor(new java.awt.Color(51, 0, 204));
        txtDiscount.setSelectionColor(new java.awt.Color(255, 204, 153));
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel27.setText("Discount : ");

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(242, 242, 242));
        txtTotal.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        txtTotal.setText("0.00");
        txtTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSave.setText("SAVE");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel29.setText("Sub Total : ");

        lblTotal.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 0, 102));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setText("Rs. 0.00");
        lblTotal.setMaximumSize(null);
        lblTotal.setMinimumSize(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel27))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTotal)
                                    .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                                    .addComponent(panelSupplierInfo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panelNewItemInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSupplierInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelNewItemInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSupplier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSupplier1ActionPerformed
        if (comboSupplier1.getSelectedIndex() != -1) {
            try {
                Supplier supplier = SupplierController.searchSupplier(comboSupplier1.getSelectedItem().toString());
                if (supplier != null) {
                    txtName.setText(supplier.getName());
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_comboSupplier1ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (table.getRowCount() > 0) {
            try {
                Supplier sup = SupplierController.searchSupplier(comboSupplier1.getSelectedItem().toString());
                if (sup != null) {
                    String[] tot = lblTotal.getText().split("Rs. ");
                    int addGRN = GrnController.addGRN(new GRN(txtGrnId1.getText(), getSelectedDate(), "" + sup.getSupId(), Double.valueOf(tot[1])));
                    int result = 0;
                    if (addGRN > 0) {
                        GRNDetailBatch detailBatch;
                        for (int i = 0; i < table.getRowCount(); i++) {
                            detailBatch = new GRNDetailBatch();
                            detailBatch.setCost(Double.valueOf(dtm.getValueAt(i, 5).toString()));
                            detailBatch.setDate(getSelectedDate());
                            detailBatch.setGrnID(txtGrnId1.getText());
                            detailBatch.setItemCode(dtm.getValueAt(i, 1).toString());
                            detailBatch.setMin(Double.valueOf(dtm.getValueAt(i, 7).toString()));
                            detailBatch.setQty(Integer.parseInt(dtm.getValueAt(i, 4).toString()));
                            detailBatch.setUnit(Double.valueOf(dtm.getValueAt(i, 6).toString()));
                            int[] returnVal = GrnDetailController.addGRNDetailBatch(detailBatch);
                            if (returnVal != null) {
                                result++;
                                if (hashMap.containsKey(detailBatch.getItemCode())) {
                                    ArrayList<DealerSerial> listSerial = hashMap.get(detailBatch.getItemCode());
                                    for (DealerSerial serial : listSerial) {
                                        serial.setGrnId(returnVal[1]);
                                        DealerSerialController.addDealerSerial(serial);
                                    }
                                }
                            }
                        }
                    }
                    if (result == table.getRowCount()) {
                        JOptionPane.showMessageDialog(this, "GRN " + txtGrnId1.getText() + " successfully added !", "Information", 1);
                        AddGRNPay gRNPay = new AddGRNPay(null, true);
                        gRNPay.setCID(txtGrnId1.getText());
                        gRNPay.setAmount(Double.valueOf(tot[1]));
                        gRNPay.setLocationRelativeTo(this);
                        gRNPay.setVisible(true);
                        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to print a invoice ?");
                        if (confirm == 0) {
                            printGRN(Double.valueOf(tot[1]));
                        }
                        hashMap = new HashMap<>();
                        serials = new ArrayList<>();
                        dtm.setRowCount(0);
                        comboDesc.setSelectedIndex(-1);
                        txtDiscount.setText("0.0");
                        txtTotal.setText("0.0");
                        lblTotal.setText("Rs. 0.0");
                        clearFile();
                    } else {
                        JOptionPane.showMessageDialog(this, "There was an error adding GRN items."
                                + "\nPlease recheck your data.", "Error", 0);
                    }
                    newGRNID();
                    newItemCode();
                } else {
                    JOptionPane.showMessageDialog(this, "No Supplier Selected !");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Select a Company");
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinActionPerformed
        if (txtMin.getText().isEmpty()) {
            getToolkit().beep();
            txtMin.setBackground(new Color(255, 115, 115));
        } else {
            txtQty.requestFocus();
            txtQty.selectAll();
        }
    }//GEN-LAST:event_txtMinActionPerformed

    private void txtQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyFocusLost
        txtQty.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtQtyFocusLost

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        if (!txtQty.getText().isEmpty()) {
            txtPeriod.requestFocus();
        } else {
            Toolkit.getDefaultToolkit().beep();
            txtQty.setBackground(new Color(250, 110, 110));
        }
        if (txtCode.getText().isEmpty()) {
            txtCode.requestFocus();
        }
    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        Validation.limitesIntegers(txtQty, 5);
        txtQty.setBackground(Color.white);
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodeFocusGained
        txtCode.selectAll();
    }//GEN-LAST:event_txtCodeFocusGained

    private void txtCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodeActionPerformed
        if (txtCode.getText().isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            txtCode.setBackground(new Color(255, 115, 115));
            comboDesc.setSelectedIndex(-1);
            txtBarcode.setText("");
            txtQty.setText("");
        } else {
            try {
                Item item = ItemController.searchIstemByCode(txtCode.getText());
                if (item != null) {
                    for (int i = 0; i < comboDesc.getItemCount(); i++) {
                        if (item.getDesciption().equals(comboDesc.getItemAt(i).toString())) {
                            comboDesc.setSelectedIndex(i);
                            break;
                        }
                    }
                    txtCost.requestFocus();
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    txtCode.setBackground(new Color(255, 115, 115));
                    comboDesc.setSelectedIndex(-1);
                    txtCode.selectAll();
                    txtBarcode.setText("");
                    txtQty.setText("");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtCodeActionPerformed

    private void txtCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeKeyPressed

    }//GEN-LAST:event_txtCodeKeyPressed

    private void txtCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeKeyReleased
        txtCode.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtCodeKeyReleased

    private void txtCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeKeyTyped

    }//GEN-LAST:event_txtCodeKeyTyped

    private void txtBarcodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBarcodeFocusGained
        txtBarcode.selectAll();
    }//GEN-LAST:event_txtBarcodeFocusGained

    private void txtBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBarcodeActionPerformed
        if (txtBarcode.getText().isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            txtBarcode.setBackground(new Color(250, 110, 110));
            comboDesc.setSelectedIndex(-1);
            txtCode.setText("");
            txtQty.setText("");
        } else {
            try {
                Item item = ItemController.searchItemBySerial(txtBarcode.getText());
                if (item != null) {
                    for (int i = 0; i < comboDesc.getItemCount(); i++) {
                        if (item.getDesciption().equals(comboDesc.getItemAt(i).toString())) {
                            comboDesc.setSelectedIndex(i);
                            break;
                        }
                    }
                    txtCost.requestFocus();
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    txtBarcode.setBackground(new Color(250, 110, 110));
                    comboDesc.setSelectedIndex(-1);
                    txtBarcode.selectAll();
                    txtCode.setText("");
                    txtQty.setText("");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtBarcodeActionPerformed

    private void txtBarcodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBarcodeKeyReleased
        txtBarcode.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtBarcodeKeyReleased

    private void comboDescItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboDescItemStateChanged
        txtSerial.setEnabled(true);
        if (comboDesc.getSelectedIndex() != -1 && evt.getStateChange() == ItemEvent.SELECTED) {
            try {
                Item item = ItemController.searchItemByDesc(comboDesc.getSelectedItem().toString());
                if (item != null) {
                    txtCode.setText(item.getCode());
                    txtBarcode.setText(item.getSerial());
                }
                dtmbatch.setRowCount(0);
                serials = new ArrayList<>();
                txtQty.setText("");
                txtCost.setText("");
                txtPeriod.setText("");
                txtSerial.setText("");
                txtUnit.setText("");
                txtMin.setText("");
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
        if (comboDesc.getSelectedIndex() == -1) {
            dtmbatch.setRowCount(0);
            serials = new ArrayList<>();
            txtQty.setText("");
            txtCost.setText("");
            txtPeriod.setText("");
            txtCode.setText("");
            txtBarcode.setText("");
            txtSerial.setText("");
            txtUnit.setText("");
            txtMin.setText("");
        }
    }//GEN-LAST:event_comboDescItemStateChanged

    private void txtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostActionPerformed
        if (txtCost.getText().isEmpty()) {
            getToolkit().beep();
            txtCost.setBackground(new Color(255, 115, 115));
        } else {
            txtUnit.requestFocus();
            txtUnit.selectAll();
        }
    }//GEN-LAST:event_txtCostActionPerformed

    private void comboDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboDescActionPerformed

    }//GEN-LAST:event_comboDescActionPerformed

    private void txtGrnId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrnId1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrnId1ActionPerformed

    private void txtCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyReleased
        Validation.priceText(txtCost);
        txtCost.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtCostKeyReleased

    private void txtUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitActionPerformed
        if (txtUnit.getText().isEmpty()) {
            getToolkit().beep();
            txtUnit.setBackground(new Color(255, 115, 115));
        } else {
            txtMin.requestFocus();
            txtMin.selectAll();
        }
    }//GEN-LAST:event_txtUnitActionPerformed

    private void txtUnitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyReleased
        Validation.priceText(txtUnit);
        txtUnit.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtUnitKeyReleased

    private void txtMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyReleased
        Validation.priceText(txtMin);
        txtMin.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtMinKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            if (comboDesc.getSelectedIndex() != -1) {
                if (txtCost.getText().isEmpty()) {
                    getToolkit().beep();
                    txtCost.setBackground(new Color(255, 115, 115));
                    txtCost.requestFocus();
                } else if (txtUnit.getText().isEmpty()) {
                    getToolkit().beep();
                    txtUnit.setBackground(new Color(255, 115, 115));
                    txtUnit.requestFocus();
                } else if (txtMin.getText().isEmpty()) {
                    getToolkit().beep();
                    txtMin.setBackground(new Color(255, 115, 115));
                    txtMin.requestFocus();
                } else if (txtQty.getText().isEmpty() || Integer.parseInt(txtQty.getText()) <= 0) {
                    getToolkit().beep();
                    txtQty.setBackground(new Color(255, 115, 115));
                    txtQty.requestFocus();
                } else if (Double.parseDouble(txtCost.getText()) >= Double.parseDouble(txtUnit.getText())) {
                    getToolkit().beep();
                    JOptionPane.showMessageDialog(this, "Unit price should be heigher than cost price");
                    txtUnit.requestFocus();
                    txtUnit.selectAll();
                } else if (Double.parseDouble(txtMin.getText()) >= Double.parseDouble(txtUnit.getText())) {
                    getToolkit().beep();
                    JOptionPane.showMessageDialog(this, "Minimum price should be lesser than unit price");
                    txtMin.requestFocus();
                    txtMin.selectAll();
                } else if (Double.parseDouble(txtCost.getText()) >= Double.parseDouble(txtMin.getText())) {
                    getToolkit().beep();
                    JOptionPane.showMessageDialog(this, "Minimum price should be heigher than cost price");
                    txtMin.requestFocus();
                    txtMin.selectAll();
                } else {
                    addorderDetail();
                }
            } else {
                Toolkit.getDefaultToolkit().beep();
                txtQty.requestFocus();
            }
            calcTotal();
        } catch (NumberFormatException | HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        removeTableData();
        calcTotal();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void txtPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodActionPerformed
        if (txtPeriod.getText().isEmpty()) {
            getToolkit().beep();
            txtPeriod.setBackground(new Color(245, 118, 112));
        } else {
            txtSerial.requestFocus();
            txtSerial.selectAll();
        }
    }//GEN-LAST:event_txtPeriodActionPerformed

    private void txtPeriodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyReleased
        Validation.limitesIntegers(txtPeriod, 5);         // TODO add your handling code here:
        txtPeriod.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtPeriodKeyReleased

    private void txtSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialActionPerformed
        if (txtSerial.getText().isEmpty()) {
            getToolkit().beep();
            txtSerial.setBackground(new Color(245, 118, 112));
        } else {
            boolean contain = false;
            for (int i = 0; i < tableSerialNo.getRowCount(); i++) {
                if (dtmbatch.getValueAt(i, 0).toString().equals(txtSerial.getText())) {
                    contain = true;
                    break;
                }
            }
            if (!contain) {
                Object o[] = {txtSerial.getText()};
                int period = Integer.valueOf(txtPeriod.getText());
                if (jComboBox1.getSelectedIndex() == 1) {
                    period *= 30;
                }
                if (jComboBox1.getSelectedIndex() == 2) {
                    period *= 365;
                }
                dtmbatch.addRow(o);
                txtSerial.selectAll();
                serials.add(new DealerSerial(0, txtSerial.getText(), 0, period, txtCode.getText()));
                hashMap.put(txtCode.getText(), serials);

            } else {
                JOptionPane.showMessageDialog(this, "Serial number is already in the list.");
            }
        }
    }//GEN-LAST:event_txtSerialActionPerformed

    private void txtSerialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerialKeyReleased
        txtSerial.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtSerialKeyReleased

    private void tableSerialNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSerialNoKeyPressed
        if (tableSerialNo.getSelectedRow() != -1) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                try {
                    boolean deleteSerial = GRNSFA.deleteSerial(txtCode.getText(), tableSerialNo.getValueAt(tableSerialNo.getSelectedRow(), 0).toString());
                    DealerSerial remove = hashMap.get(txtCode.getText()).remove(tableSerialNo.getSelectedRow());
                    System.out.println(remove.getSerial());
                    if (deleteSerial) {
                        System.out.println("serial deleted");
                    } else {
                        System.out.println("serial delete fail");
                    }
                    dtmbatch.removeRow(tableSerialNo.getSelectedRow());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
            }
        }
    }//GEN-LAST:event_tableSerialNoKeyPressed

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased
        if (!txtDiscount.getText().isEmpty()) {
            if (Double.valueOf(txtTotal.getText()) <= Double.valueOf(txtDiscount.getText())) {
                getToolkit().beep();
                txtDiscount.setText("0.00");
                txtDiscount.selectAll();
            }
        }
        calcTotal();
    }//GEN-LAST:event_txtDiscountKeyReleased

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        comboDesc.setSelectedIndex(-1);
        txtSerial.setEnabled(false);
        if (hashMap.containsKey(dtm.getValueAt(table.getSelectedRow(), 1).toString())) {
            ArrayList<DealerSerial> serialList = hashMap.get(dtm.getValueAt(table.getSelectedRow(), 1).toString());
            if (!serialList.isEmpty()) {
                dtmbatch.setRowCount(0);
                for (DealerSerial serial : serialList) {
                    txtPeriod.setText(serial.getPeriod() + "");
                    jComboBox1.setSelectedIndex(0);
                    Object o[] = {serial.getSerial()};
                    dtmbatch.addRow(o);
                }
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    private void tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            btnRemove.doClick();
        }
    }//GEN-LAST:event_tableKeyReleased

    private void comboSupplier1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSupplier1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSupplier1ItemStateChanged

    private void btnNewSupplier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSupplier1ActionPerformed
        AddSupplier addSupplier = new AddSupplier(null, true);
        addSupplier.setLocationRelativeTo(this);
        addSupplier.setVisible(true);
        fillComboSupplier();
        addSupplier.dispose();
    }//GEN-LAST:event_btnNewSupplier1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            ArrayList<TempOrder> allDetail = ACCESS.getAllDetail();
            ArrayList<String[]> allDetail1 = GRNSFA.getAllDetail();
            if (allDetail != null && !allDetail.isEmpty()) {
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "This action will load the last unsaved order detail.\n"
                        + "If you've done changes in your database, this action will harm your database."
                        + "\n\n Do you want to continue ?");
                if (showConfirmDialog == 0) {
                    hashMap = new HashMap<>();
                    ArrayList<DealerSerial> al;
                    dtm.setRowCount(0);
                    boolean contain;
                    new Progress(null, true).setVisible(true);
                    for (TempOrder detail : allDetail) {
                        contain = false;
                        if (allDetail1 != null) {
                            for (String[] data : allDetail1) {
                                if (detail.getCode().equals(data[0])) {
                                    contain = true;
                                    break;
                                }
                            }
                        }
                        System.out.println(contain);
                        Object row[] = {detail.getNo(), detail.getCode(), detail.getDesc(), contain,
                            detail.getQty(), detail.getCost(), detail.getSellingPrice(), detail.getPrice(),
                            detail.getAmount()};
                        dtm.addRow(row);
                    }
                    if (allDetail1 != null) {
                        for (String[] data : allDetail1) {
                            if (hashMap.containsKey(data[0])) {
                                hashMap.get(data[0]).add(new DealerSerial(0, data[1], 0, Integer.parseInt(data[2]), data[0]));
                            } else {
                                al = new ArrayList<>();
                                al.add(new DealerSerial(0, data[1], 0, Integer.parseInt(data[2]), data[0]));
                                hashMap.put(data[0], al);
                            }
                        }
                    }

                    calcTotal();
                }
            } else {
                JOptionPane.showMessageDialog(this, "You don't have an unsaved order !");
            }
        } catch (IOException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] tot = lblTotal.getText().split("Rs. ");
        printGRN(Double.valueOf(tot[1]));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        if (txtNewDesc.getText().isEmpty()) {
            txtNewDesc.setBackground(new Color(255, 125, 100));
            txtNewDesc.requestFocus();
        } else if (txtROL.getText().isEmpty()) {
            txtROL.setBackground(new Color(255, 125, 100));
            txtROL.requestFocus();
        } else if (cmbCategory.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a category");
        } else {
            try {
                newItemCode();
                Category cat = CategoryController.searchCategoryByName(cmbCategory.getSelectedItem().toString());
                if (cat != null) {
                    String barcode = txtNewBarcode.getText();
                    int rol = Integer.valueOf(txtROL.getText());
                    if (barcode.equals("")) {
                        barcode = null;
                    }
                    int addItem = ItemController.addItem(new Item(txtNewCode.getText(), barcode, txtNewDesc.getText().toUpperCase(), cat.getCatID(), rol));
                    if (addItem > 0) {
                        JOptionPane.showMessageDialog(this, "Item Added");
                        fillComboItem();
                        txtNewBarcode.setText("");
                        txtNewDesc.setText("");
                        txtROL.setText("");
                        newGRNID();
                        newItemCode();
                    } else {
                        JOptionPane.showMessageDialog(this, "Add item fail!");
                    }
                }
            } catch (ClassNotFoundException | SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnAddNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewItemActionPerformed
        String category = JOptionPane.showInputDialog(this, "Category Name", "New Category", 1);
        if (category != null && !category.equals("")) {
            try {
                int add = CategoryController.addCategory(new Category(0, category));
                if (add > 0) {
                    fillCategory();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_btnAddNewItemActionPerformed

    private void txtNewDescKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNewDescKeyReleased
        txtNewDesc.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtNewDescKeyReleased

    private void txtNewDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewDescActionPerformed

        try {
            newItemCode();
        } catch (SQLException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!txtNewDesc.getText().isEmpty()) {
            txtROL.requestFocus();
        } else {
            txtNewDesc.setBackground(new Color(255, 125, 100));
        }
    }//GEN-LAST:event_txtNewDescActionPerformed

    private void txtNewDescFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNewDescFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewDescFocusLost

    private void txtNewDescFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNewDescFocusGained

    }//GEN-LAST:event_txtNewDescFocusGained

    private void txtROLKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtROLKeyReleased
        Validation.limitesIntegers(txtROL, 4);
        txtROL.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtROLKeyReleased

    private void txtROLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtROLActionPerformed

        try {
            newItemCode();
        } catch (SQLException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!txtROL.getText().isEmpty()) {
            btnAddItem.doClick();
        } else {
            txtROL.setBackground(new Color(255, 125, 100));
        }
    }//GEN-LAST:event_txtROLActionPerformed

    private void txtROLFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtROLFocusGained

    }//GEN-LAST:event_txtROLFocusGained

    private void txtNewBarcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewBarcodeActionPerformed

        try {
            newItemCode();
        } catch (SQLException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GRNs.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtNewDesc.requestFocus();
    }//GEN-LAST:event_txtNewBarcodeActionPerformed

    private void txtNewCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewCodeActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Runtime rs = Runtime.getRuntime();
        try {
            rs.exec("calc");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Sorry!!! Your system calculator is crashed.\nTry to open manually");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        txtUnit.requestFocus();
        txtUnit.selectAll();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        txtQty.requestFocus();
        txtQty.selectAll();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        txtCode.requestFocus();
        txtCode.selectAll();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        txtBarcode.requestFocus();
        txtBarcode.selectAll();
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        comboDesc.requestFocus();
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        comboDesc.setSelectedIndex(-1);
        txtBarcode.selectAll();
        txtCode.setText("");
        txtUnit.setText("");
        txtQty.setText("");
        txtCode.requestFocus();
        txtCost.setText("");
        txtMin.setText("");
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        btnSave.doClick();
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        btnAdd.doClick();
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        jButton3.doClick();
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void txtPeriodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyTyped
        Validation.limitesIntegers(txtPeriod, 5);         // TODO add your handling code here:
    }//GEN-LAST:event_txtPeriodKeyTyped

    private void txtCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyTyped
        Validation.priceText(txtCost);         // TODO add your handling code here:
    }//GEN-LAST:event_txtCostKeyTyped

    private void txtUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyTyped
        Validation.priceText(txtUnit);          // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitKeyTyped

    private void txtMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyTyped
        Validation.priceText(txtMin);        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinKeyTyped

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        Validation.limitesIntegers(txtQty, 5);         // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyTyped

    private void txtROLKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtROLKeyTyped
        Validation.limitesIntegers(txtROL, 4);         // TODO add your handling code here:
    }//GEN-LAST:event_txtROLKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddNewItem;
    private javax.swing.JButton btnNewSupplier1;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox comboDesc;
    private javax.swing.JComboBox<String> comboSupplier1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblGrnId1;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblNewItemBarcode;
    private javax.swing.JLabel lblNewItemBarcode1;
    private javax.swing.JLabel lblNewItemCode;
    private javax.swing.JLabel lblNewItemDescription;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblROL;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JLabel lblSupplier1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelNewItemInfo;
    private javax.swing.JPanel panelSupplierInfo1;
    private javax.swing.JPanel panelWarrentyInfo;
    private javax.swing.JTable table;
    private javax.swing.JTable tableSerialNo;
    private javax.swing.JTextField txtBarcode;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtGrnId1;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNewBarcode;
    private javax.swing.JTextField txtNewCode;
    private javax.swing.JTextField txtNewDesc;
    private javax.swing.JTextField txtPeriod;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtROL;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables

    private void fillComboItem() {
        try {
            ArrayList<Item> allItems = ItemController.getAllItem();
            if (allItems != null && !allItems.isEmpty()) {
                comboDesc.removeAllItems();
                for (Item item : allItems) {
                    comboDesc.addItem(item.getDesciption());
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void fillComboSupplier() {
        try {
            ArrayList<Supplier> list = SupplierController.allSuppliers();
            if (!list.isEmpty()) {
                comboSupplier1.removeAllItems();
                for (Supplier supplier : list) {
                    comboSupplier1.addItem(supplier.getCompany());
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void addorderDetail() {
        boolean contain = false;
        for (int i = 0; i < table.getRowCount(); i++) {
            if (txtCode.getText().equals(dtm.getValueAt(i, 1).toString())) {
                contain = true;
                break;
            }
        }
        if (!contain) {
            try {
                boolean war = false;
                if (hashMap.containsKey(txtCode.getText())) {
                    war = !hashMap.get(txtCode.getText()).isEmpty();
                }
                if (table.getRowCount() == 0) {
                    clearFile();
                }
                Item item = ItemController.searchItemByDesc(comboDesc.getSelectedItem().toString());
                if (item != null) {
                    double total = Double.parseDouble(txtQty.getText()) * Double.valueOf(txtCost.getText());
                    Object object[] = {table.getRowCount() + 1, item.getCode(), comboDesc.getSelectedItem().toString(), war, txtQty.getText(), txtCost.getText(), txtUnit.getText(), txtMin.getText(), total};
                    dtm.addRow(object);
                    TempOrder order = new TempOrder();
                    order.setAmount(total + "");
                    order.setBatch("VYW");
                    order.setCode(item.getCode());
                    order.setCost(txtCost.getText());
                    order.setDesc(item.getDesciption());
                    order.setNo(table.getRowCount() + "");
                    order.setPrice(txtMin.getText());
                    order.setQty(txtQty.getText());
                    order.setSellingPrice(txtUnit.getText());
                    order.setWarranty(war + "");
                    if (war) {
                        try {
                            boolean addSerial = GRNSFA.addSerial(txtCode.getText(), serials);
                            if (addSerial) {
                                System.out.println("serial entry added");
                            } else {
                                System.out.println("serial entry add fail");
                            }
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        }
                    }
                    if (ACCESS.addorderdetail(order)) {
                        System.out.println("file data added");
                    } else {
                        System.out.println("file data deleted");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error in item", "Error", 0);
                }

            } catch (ClassNotFoundException | SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());

                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        } else {
            JOptionPane.showMessageDialog(this, "This record is already added to list.\n You cannot update unless you delete the recoed from the list");
        }
    }

    private String getSelectedDate() {
        Date date = jXDatePicker1.getDate();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String dormatDate = format.format(date);
        return dormatDate;
    }

    private void removeTableData() {
        if (table.getSelectedRow() != -1) {
            if (hashMap.containsKey(dtm.getValueAt(table.getSelectedRow(), 1).toString())) {
                hashMap.remove(dtm.getValueAt(table.getSelectedRow(), 1).toString());
            }
            try {
                if (ACCESS.deleteEntry(dtm.getValueAt(table.getSelectedRow(), 1).toString())) {
                    System.out.println("entry deleted");
                } else {
                    System.out.println("entry delete fail");
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
            dtm.removeRow(table.getSelectedRow());
        }
    }

    private void calcTotal() {
        double total = 0.0;
        if (table.getRowCount() > 0) {
            for (int i = 0; i < table.getRowCount(); i++) {
                total += Double.parseDouble(dtm.getValueAt(i, 8).toString());
            }
        } else {
            total = 0.0;
        }
        txtTotal.setText(Double.toString(total));
        if (!txtDiscount.getText().isEmpty()) {
            total -= Double.valueOf(txtDiscount.getText());
        }
        lblTotal.setText("Rs. " + total);
    }

    private void fillCategory() {
        try {
            ArrayList<Category> allCategory = CategoryController.getAllCategory();
            if (!allCategory.isEmpty()) {
                cmbCategory.removeAllItems();
                for (Category category : allCategory) {
                    cmbCategory.addItem(category.getName());
                }
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());

            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void clearFile() {
        try {
            if (ACCESS.deleteAll() && GRNSFA.deleteAll()) {
                System.out.println("file cleard");
            } else {
                System.out.println("file clear fail");
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void printGRN(Double valueOf) {
        HashMap<String, Object> map = new HashMap<>();
        JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm);
        try {
            JasperReport compileReport = JasperCompileManager.compileReport(getClass()
                    .getResourceAsStream("../../../../../reports/GRN.jrxml"));
            map.put("INVOICE NO", txtGrnId1.getText());
            map.put("NAME", comboSupplier1.getSelectedItem().toString());
            map.put("NET TOTAL", valueOf);
            map.put("DISCOUNT", "-" + txtDiscount.getText());
            map.put("GRAND TOTAL", txtTotal.getText());
            map.put("DATE", getSelectedDate());
            map.put("USER", HomeFrame.user.getUsername());
            JasperPrint fillReport = JasperFillManager.fillReport(compileReport, map, dataSource);
            JasperViewer.viewReport(fillReport, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private String newItemCode() throws SQLException, ClassNotFoundException {
        String s = IdGenerator.getNewItemId();
        txtNewCode.setText(s);
        return s;

    }

    private String newGRNID() throws SQLException, ClassNotFoundException {
        String s = IdGenerator.getNewGRNID();
        txtGrnId1.setText(s);
        return s;
    }
}
