/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.controller.BatchController;
import biz.project.cms.controller.DealerSerialController;
import biz.project.cms.controller.GrnController;
import biz.project.cms.controller.GrnDetailController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.controller.SupplierController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Batch;
import biz.project.cms.model.DealerSerial;
import biz.project.cms.model.GRN;
import biz.project.cms.model.GRNDetail;
import biz.project.cms.model.GRNDetailBatch;
import biz.project.cms.model.Item;
import biz.project.cms.model.Supplier;
import biz.project.cms.other.Validation;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vihanga
 */
public class UpdateGRN extends javax.swing.JPanel {

    private final DefaultTableModel dtm, dtmGRN, dtmSerial;
    private HashMap<Integer, ArrayList<DealerSerial>> hashMap;
    private String Grnid;
    private HashMap<Integer, Double[]> itemMap;
    private int row = 0;
    private String period = "0";
    private int index = 0;
    private boolean state;

    /**
     * Creates new form UpdateGRN
     */
    public UpdateGRN() {
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        hashMap = new HashMap<>();
        state = true;
        itemMap = new HashMap<>();
        Color white = new Color(255, 255, 255);
        tableGRN.setOpaque(true);
        tableGRN.setFillsViewportHeight(true);
        tableGRN.setBackground(white);
        tableItem.setOpaque(true);
        tableItem.setFillsViewportHeight(true);
        tableItem.setBackground(white);
        tableSerialNo.setOpaque(true);
        tableSerialNo.setFillsViewportHeight(true);
        tableSerialNo.setBackground(white);
        dtm = (DefaultTableModel) tableItem.getModel();
        dtmGRN = (DefaultTableModel) tableGRN.getModel();
        dtmSerial = (DefaultTableModel) tableSerialNo.getModel();
        setGRNTable();
        fillComboSupplier();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblGrnId2 = new javax.swing.JLabel();
        txtGrnId2 = new javax.swing.JTextField();
        comboSupplier2 = new javax.swing.JComboBox<String>();
        lblSupplier2 = new javax.swing.JLabel();
        lblDate2 = new javax.swing.JLabel();
        pickDate = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableGRN = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItem = new javax.swing.JTable();
        panelWarrentyInfo = new javax.swing.JPanel();
        txtPeriod = new javax.swing.JTextField();
        lblPeriod = new javax.swing.JLabel();
        txtSerial = new javax.swing.JTextField();
        lblSerial = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSerialNo = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtMin = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        txtUnit = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(774, 720));
        setPreferredSize(new java.awt.Dimension(774, 720));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(774, 720));

        lblGrnId2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblGrnId2.setText("GRN ID:");

        txtGrnId2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtGrnId2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtGrnId2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrnId2ActionPerformed(evt);
            }
        });
        txtGrnId2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGrnId2KeyReleased(evt);
            }
        });

        comboSupplier2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        comboSupplier2.setMaximumSize(new java.awt.Dimension(60, 29));
        comboSupplier2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSupplier2ItemStateChanged(evt);
            }
        });
        comboSupplier2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                comboSupplier2MouseReleased(evt);
            }
        });
        comboSupplier2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSupplier2ActionPerformed(evt);
            }
        });

        lblSupplier2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSupplier2.setText("Supplier :");

        lblDate2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate2.setText("Date :");

        pickDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pickDateMouseReleased(evt);
            }
        });
        pickDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDateActionPerformed(evt);
            }
        });

        tableGRN.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GRN ID", "Supplier", "Date", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableGRN.setRowHeight(22);
        tableGRN.setSelectionBackground(new java.awt.Color(0, 153, 153));
        tableGRN.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableGRN.getTableHeader().setReorderingAllowed(false);
        tableGRN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableGRNMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableGRN);
        if (tableGRN.getColumnModel().getColumnCount() > 0) {
            tableGRN.getColumnModel().getColumn(0).setResizable(false);
            tableGRN.getColumnModel().getColumn(0).setPreferredWidth(55);
            tableGRN.getColumnModel().getColumn(1).setResizable(false);
            tableGRN.getColumnModel().getColumn(1).setPreferredWidth(85);
            tableGRN.getColumnModel().getColumn(2).setResizable(false);
            tableGRN.getColumnModel().getColumn(2).setPreferredWidth(50);
            tableGRN.getColumnModel().getColumn(3).setResizable(false);
            tableGRN.getColumnModel().getColumn(3).setPreferredWidth(0);
        }

        tableItem.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "GDID", "Item Code", "Description", "Warranty", "Cost Price", "Qty", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableItem.setRowHeight(22);
        tableItem.setSelectionBackground(new java.awt.Color(0, 153, 153));
        tableItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableItem.getTableHeader().setReorderingAllowed(false);
        tableItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tableItemFocusLost(evt);
            }
        });
        tableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableItemMouseReleased(evt);
            }
        });
        tableItem.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tableItemPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tableItem);
        if (tableItem.getColumnModel().getColumnCount() > 0) {
            tableItem.getColumnModel().getColumn(0).setResizable(false);
            tableItem.getColumnModel().getColumn(0).setPreferredWidth(5);
            tableItem.getColumnModel().getColumn(1).setResizable(false);
            tableItem.getColumnModel().getColumn(1).setPreferredWidth(40);
            tableItem.getColumnModel().getColumn(2).setResizable(false);
            tableItem.getColumnModel().getColumn(2).setPreferredWidth(180);
            tableItem.getColumnModel().getColumn(3).setResizable(false);
            tableItem.getColumnModel().getColumn(3).setPreferredWidth(5);
            tableItem.getColumnModel().getColumn(4).setResizable(false);
            tableItem.getColumnModel().getColumn(4).setPreferredWidth(0);
            tableItem.getColumnModel().getColumn(5).setResizable(false);
            tableItem.getColumnModel().getColumn(5).setPreferredWidth(10);
            tableItem.getColumnModel().getColumn(6).setResizable(false);
            tableItem.getColumnModel().getColumn(6).setPreferredWidth(0);
        }

        panelWarrentyInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelWarrentyInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Waranty Info ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N

        txtPeriod.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPeriod.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodActionPerformed(evt);
            }
        });
        txtPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPeriodKeyReleased(evt);
            }
        });

        lblPeriod.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPeriod.setText("Period :");

        txtSerial.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSerial.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialActionPerformed(evt);
            }
        });
        txtSerial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerialKeyReleased(evt);
            }
        });

        lblSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSerial.setText("Serial :");

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        tableSerialNo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "  Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSerialNo.setSelectionBackground(new java.awt.Color(0, 102, 255));
        tableSerialNo.getTableHeader().setReorderingAllowed(false);
        tableSerialNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableSerialNoKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tableSerialNo);
        if (tableSerialNo.getColumnModel().getColumnCount() > 0) {
            tableSerialNo.getColumnModel().getColumn(0).setResizable(false);
        }

        jComboBox1.setFont(new java.awt.Font("sansserif", 2, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(102, 102, 102));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DAYS", "MONTHS", "YEARS" }));

        javax.swing.GroupLayout panelWarrentyInfoLayout = new javax.swing.GroupLayout(panelWarrentyInfo);
        panelWarrentyInfo.setLayout(panelWarrentyInfoLayout);
        panelWarrentyInfoLayout.setHorizontalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPeriod)
                    .addComponent(lblSerial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSerial)
                    .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                        .addComponent(txtPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, 0, 72, Short.MAX_VALUE)))
                .addGap(1, 1, 1))
        );
        panelWarrentyInfoLayout.setVerticalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPeriod)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSerial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(153, 153, 255)), "Item Info ", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(102, 102, 255))); // NOI18N
        jPanel4.setPreferredSize(new java.awt.Dimension(340, 267));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Cost Price :");

        txtMin.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMin.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMin.setCaretColor(new java.awt.Color(116, 7, 7));
        txtMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinActionPerformed(evt);
            }
        });
        txtMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinKeyTyped(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel26.setText("Qty :");

        txtQty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQty.setCaretColor(new java.awt.Color(116, 7, 7));
        txtQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQtyFocusLost(evt);
            }
        });
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        txtUnit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtUnit.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtUnit.setCaretColor(new java.awt.Color(116, 7, 7));
        txtUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitActionPerformed(evt);
            }
        });
        txtUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUnitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnitKeyTyped(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel31.setText("Unit Price :");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Min. Price :");

        txtCost.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCost.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCost.setCaretColor(new java.awt.Color(116, 7, 7));
        txtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostActionPerformed(evt);
            }
        });
        txtCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostKeyTyped(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(153, 153, 153));
        btnUpdate.setForeground(new java.awt.Color(51, 51, 51));
        btnUpdate.setText("Update Data");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdate))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUnit, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(txtMin, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCost)
                            .addComponent(txtQty, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(15, 15, 15))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 51, 0));
        jButton3.setText("Save GRN");
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblGrnId2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGrnId2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSupplier2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSupplier2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(lblDate2)
                        .addGap(15, 15, 15)
                        .addComponent(pickDate, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtGrnId2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblSupplier2)
                        .addComponent(comboSupplier2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblGrnId2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDate2)
                        .addComponent(pickDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtGrnId2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrnId2ActionPerformed
        if (txtGrnId2.getText().isEmpty()) {
            Toolkit.getDefaultToolkit().beep();
            txtGrnId2.setBackground(new Color(255, 115, 115));
            clearText(true);
            dtm.setRowCount(0);
            dtmSerial.setRowCount(0);
        } else {
            try {
                GRN grn = GrnController.searchGRNById(txtGrnId2.getText());
                if (grn != null) {
                    Grnid = grn.getGrnId();
                    hashMap = new HashMap<>();
                    itemMap = new HashMap<>();
                    dtm.setRowCount(0);
                    DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
                    Date date;
                    try {
                        date = format.parse(grn.getDate());
                        pickDate.setDate(date);
                    } catch (ParseException ex) {
                        Logger.getLogger(UpdateGRN.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Supplier sup = SupplierController.searchSupplierBYID(grn.getSupId());
                    state = false;
                    for (int i = 0; i < comboSupplier2.getItemCount(); i++) {
                        if (comboSupplier2.getItemAt(i).equals(sup.getCompany())) {
                            comboSupplier2.setSelectedIndex(i);
                            break;
                        }
                    }
                    ArrayList<GRNDetail> details = GrnDetailController.getAllOrderDetails(Grnid);
                    if (!details.isEmpty()) {
                        int i = -1;
                        for (GRNDetail detail : details) {
                            Batch batch = BatchController.searchBatch(detail.getBatchId());
                            if (batch != null) {
                                Item item = ItemController.searchIstemByCode(batch.getItemCode());
                                if (item != null) {
                                    Object o[] = {detail.getGrnDetailId(), batch.getItemCode(),
                                        item.getDesciption(), false, batch.getCostPrice(), detail.getQty(),
                                        batch.getCostPrice() * detail.getQty()};
                                    dtm.addRow(o);
                                    i++;
                                }
                            }
                            ArrayList<DealerSerial> dsl = DealerSerialController.searchDserialGRNDID(detail.getGrnDetailId() + "");
                            if (!dsl.isEmpty()) {
                                hashMap.put(detail.getGrnDetailId(), dsl);
                                dtm.setValueAt(true, i, 3);
                            }
                        }
                    }

                    clearText(true);
                    dtmSerial.setRowCount(0);
                } else {
                    Toolkit.getDefaultToolkit().beep();
                    txtGrnId2.setBackground(new Color(255, 115, 115));
                    clearText(true);
                    dtm.setRowCount(0);
                    dtmSerial.setRowCount(0);
                    txtGrnId2.selectAll();
                }
            } catch (ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_txtGrnId2ActionPerformed

    private void comboSupplier2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSupplier2ItemStateChanged
        if (state) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                if (comboSupplier2.getSelectedIndex() != -1) {
                    if (comboSupplier2.getSelectedIndex() == 0) {
                        setGRNTable();
                        clearText(state);
                        dtm.setRowCount(0);
                    } else {
                        try {
                            Supplier supplier = SupplierController.searchSupplier(comboSupplier2.getSelectedItem().toString());
                            if (supplier != null) {
                                ArrayList<GRN> grns = GrnController.getAllGRNBySID(supplier.getSupId() + "", getSelectedDate());
                                if (!grns.isEmpty()) {
                                    clearText(state);
                                    dtm.setRowCount(0);
                                    dtmGRN.setRowCount(0);
                                    for (GRN grn : grns) {
                                        Object[] o = {grn.getGrnId(), supplier.getCompany(), grn.getDate(), grn.getAmount()};
                                        dtmGRN.addRow(o);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "No GRN found for " + comboSupplier2.getSelectedItem().toString() + " on " + getSelectedDate());
                                    comboSupplier2.setSelectedIndex(0);
                                }
                            }
                        } catch (ClassNotFoundException | SQLException ex) {
                            StringWriter sw = new StringWriter();
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace(new PrintWriter(sw));
                            String trace = sw.toString();
                            LoggerFileAcceess.exceptionLogger(trace);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_comboSupplier2ItemStateChanged

    private void comboSupplier2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSupplier2ActionPerformed

    }//GEN-LAST:event_comboSupplier2ActionPerformed

    private void txtPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodActionPerformed
        if (txtPeriod.getText().isEmpty()) {
            getToolkit().beep();
            txtPeriod.setBackground(new Color(245, 118, 112));
        } else {
            txtSerial.requestFocus();
            txtSerial.selectAll();
        }
    }//GEN-LAST:event_txtPeriodActionPerformed

    private void txtPeriodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyReleased
        txtPeriod.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtPeriodKeyReleased

    private void txtSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialActionPerformed
        if (txtSerial.getText().isEmpty()) {
            getToolkit().beep();
            txtSerial.setBackground(new Color(245, 118, 112));
        } else {
            boolean contain = false;
            for (int i = 0; i < tableSerialNo.getRowCount(); i++) {
                if (dtmSerial.getValueAt(i, 0).toString().equals(txtSerial.getText())) {
                    contain = true;
                    break;
                }
            }
            if (!contain) {
                Object o[] = {txtSerial.getText()};
                dtmSerial.addRow(o);
                txtSerial.selectAll();
            } else {
                JOptionPane.showMessageDialog(this, "Serial number is already in the list.");
            }
        }
    }//GEN-LAST:event_txtSerialActionPerformed

    private void txtSerialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerialKeyReleased
        txtSerial.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtSerialKeyReleased

    private void tableSerialNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSerialNoKeyPressed
        if (tableSerialNo.getSelectedRow() != -1) {
            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                dtmSerial.removeRow(tableSerialNo.getSelectedRow());
            }
        }
    }//GEN-LAST:event_tableSerialNoKeyPressed

    private void txtCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyReleased
        Validation.priceText(txtCost);
        txtCost.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtCostKeyReleased

    private void txtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostActionPerformed
        if (txtCost.getText().isEmpty()) {
            getToolkit().beep();
            txtCost.setBackground(new Color(255, 115, 115));
        } else {
            txtUnit.requestFocus();
            txtUnit.selectAll();
        }
    }//GEN-LAST:event_txtCostActionPerformed

    private void txtUnitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyReleased
        Validation.priceText(txtUnit);
        txtUnit.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtUnitKeyReleased

    private void txtUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitActionPerformed
        if (txtUnit.getText().isEmpty()) {
            getToolkit().beep();
            txtUnit.setBackground(new Color(255, 115, 115));
        } else {
            txtMin.requestFocus();
            txtMin.selectAll();
        }
    }//GEN-LAST:event_txtUnitActionPerformed

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        Validation.limitesIntegers(txtQty, 4);
        txtQty.setBackground(Color.white);
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        if (!txtQty.getText().isEmpty()) {
            btnUpdate.doClick();
        } else {
            Toolkit.getDefaultToolkit().beep();
            txtQty.setBackground(new Color(250, 110, 110));
        }
    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyFocusLost
        txtQty.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtQtyFocusLost

    private void txtMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyReleased
        Validation.priceText(txtMin);
        txtMin.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtMinKeyReleased

    private void txtMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinActionPerformed
        if (txtMin.getText().isEmpty()) {
            getToolkit().beep();
            txtMin.setBackground(new Color(255, 115, 115));
        } else {
            txtQty.requestFocus();
            txtQty.selectAll();
        }
    }//GEN-LAST:event_txtMinActionPerformed

    private void tableGRNMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableGRNMouseReleased
        if (tableGRN.getSelectedRow() != -1) {
            txtGrnId2.setText(dtmGRN.getValueAt(tableGRN.getSelectedRow(), 0).toString());
            Grnid = txtGrnId2.getText();
            hashMap = new HashMap<>();
            itemMap = new HashMap<>();
            dtm.setRowCount(0);
            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Date date;
            try {
                date = format.parse(dtmGRN.getValueAt(tableGRN.getSelectedRow(), 2).toString());
                pickDate.setDate(date);
            } catch (ParseException ex) {
                Logger.getLogger(UpdateGRN.class.getName()).log(Level.SEVERE, null, ex);
            }
            state = false;
            for (int i = 0; i < comboSupplier2.getItemCount(); i++) {
                if (comboSupplier2.getItemAt(i).equals(dtmGRN.getValueAt(tableGRN.getSelectedRow(), 1).toString())) {
                    comboSupplier2.setSelectedIndex(i);
                    break;
                }
            }
            try {
                ArrayList<GRNDetail> details = GrnDetailController.getAllOrderDetails(Grnid);
                if (!details.isEmpty()) {
                    int i = -1;
                    for (GRNDetail detail : details) {
                        Batch batch = BatchController.searchBatch(detail.getBatchId());
                        if (batch != null) {
                            Item item = ItemController.searchIstemByCode(batch.getItemCode());
                            if (item != null) {
                                Object o[] = {detail.getGrnDetailId(), batch.getItemCode(),
                                    item.getDesciption(), false, batch.getCostPrice(), detail.getQty(),
                                    batch.getCostPrice() * detail.getQty()};
                                dtm.addRow(o);
                                i++;
                            }
                        }
                        ArrayList<DealerSerial> dsl = DealerSerialController.searchDserialGRNDID(detail.getGrnDetailId() + "");
                        if (!dsl.isEmpty()) {
                            hashMap.put(detail.getGrnDetailId(), dsl);
                            dtm.setValueAt(true, i, 3);
                        }
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
            clearText(true);
            dtmSerial.setRowCount(0);
        }
    }//GEN-LAST:event_tableGRNMouseReleased

    private void tableItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableItemMouseReleased
        if (tableItem.getSelectedRow() != -1) {
            try {
                GRNDetail detail = GrnDetailController.searchGRNDetail(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString());
                if (detail != null) {
                    dtmSerial.setRowCount(0);
                    Batch batch = BatchController.getAllBatchesByBatchId(detail.getBatchId());
                    if (batch != null) {
                        txtQty.setText(detail.getQty() + "");
                        txtUnit.setText(batch.getUnitPrice() + "");
                        txtCost.setText(batch.getCostPrice() + "");
                        txtMin.setText(batch.getListPrice() + "");
                    }
                    if (hashMap.containsKey(detail.getGrnDetailId())) {
                        index = 0;
                        jComboBox1.setSelectedIndex(index);
                        ArrayList<DealerSerial> ds = hashMap.get(detail.getGrnDetailId());
                        if (!ds.isEmpty()) {
                            txtPeriod.setText(ds.get(0).getPeriod() + "");
                            for (DealerSerial serial : ds) {
                                Object o[] = {serial.getSerial()};
                                dtmSerial.addRow(o);
                            }
                        }
                    } else {
                        txtPeriod.setText("");
                        txtSerial.setText("");
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        } else {
            clearText(true);
            dtmSerial.setRowCount(0);
        }
        row = tableSerialNo.getRowCount();
        if (!txtPeriod.getText().isEmpty()) {
            period = txtPeriod.getText();
        }
        txtSerial.setText("");
    }//GEN-LAST:event_tableItemMouseReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (tableItem.getSelectedRow() != -1) {
            if (txtCost.getText().isEmpty()) {
                getToolkit().beep();
                txtCost.setBackground(new Color(255, 115, 115));
                txtCost.requestFocus();
            } else if (txtUnit.getText().isEmpty()) {
                getToolkit().beep();
                txtUnit.setBackground(new Color(255, 115, 115));
                txtUnit.requestFocus();
            } else if (txtMin.getText().isEmpty()) {
                getToolkit().beep();
                txtMin.setBackground(new Color(255, 115, 115));
                txtMin.requestFocus();
            } else if (txtQty.getText().isEmpty() || Integer.parseInt(txtQty.getText()) <= 0) {
                getToolkit().beep();
                txtQty.setBackground(new Color(255, 115, 115));
                txtQty.requestFocus();
            } else if (Double.parseDouble(txtCost.getText()) >= Double.parseDouble(txtUnit.getText())) {
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Unit price should be heigher than cost price");
                txtUnit.requestFocus();
                txtUnit.selectAll();
            } else if (Double.parseDouble(txtMin.getText()) >= Double.parseDouble(txtUnit.getText())) {
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Minimum price should be lesser than unit price");
                txtMin.requestFocus();
                txtMin.selectAll();
            } else if (Double.parseDouble(txtCost.getText()) >= Double.parseDouble(txtMin.getText())) {
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Minimum price should be heigher than cost price");
                txtMin.requestFocus();
                txtMin.selectAll();
            } else {
                updateRow();
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            if (itemMap != null && !itemMap.isEmpty()) {
                int i = 0;
                int j = 0;
                String discount = GrnController.getDiscount(Grnid);
                double dis = 0.0;
                if (discount != null) {
                    dis = Double.valueOf(discount);
                }
                for (Map.Entry<Integer, Double[]> entry : itemMap.entrySet()) {
                    String s = null;
                    if (hashMap.containsKey(entry.getKey())) {
                        s = "1";
                    }
                    String f;
                    GRNDetail detail = GrnDetailController.searchGRNDetail(entry.getKey() + "");
                    if (detail != null) {
                        f = detail.getBatchId();
                        Double[] value = entry.getValue();
                        GRNDetailBatch grndb = new GRNDetailBatch();
                        grndb.setCost(value[0]);
                        grndb.setDate(s);
                        grndb.setGrnID(entry.getKey() + "");
                        grndb.setItemCode(f);
                        grndb.setMin(value[2]);
                        grndb.setUnit(value[1]);
                        grndb.setQty(value[3].intValue());
                        String result = GrnDetailController.updateGRNDetailBatch(grndb);
                        if (result.equals("1")) {
                            i++;
                        }
                    }
                    if (s != null) {
                        ArrayList<DealerSerial> key = hashMap.get(entry.getKey());
                        for (DealerSerial key1 : key) {
                            DealerSerialController.addDealerSerial(new DealerSerial(0, key1.getSerial(),
                                    entry.getKey(), key1.getPeriod()));
                        }
                        j++;
                    }
                }
                double tot = 0.0;
                for (int k = 0; k < tableItem.getRowCount(); k++) {
                    tot += Double.valueOf(tableItem.getValueAt(k, 4).toString()) * Double.valueOf(tableItem.getValueAt(k, 5).toString());
                }
                if (i == itemMap.size()) {
                    boolean updateGRNAmount = GrnController.updateGRNAmount(new GRN(Grnid, null, null, tot - dis));
                    if (updateGRNAmount) {
                        System.out.println("updateddddd");
                    }
                    JOptionPane.showMessageDialog(this, "GRN details were updated successfully !");
                    tableGRN.selectAll();
                    dtm.setRowCount(0);
                    clearText(true);
                    row = 0;
                    period = "0";
                    index = 0;

                } else {
                    JOptionPane.showMessageDialog(this, "Error!! There was a problem in updating items.\nPlease recheck your GRN detail before you update again.");
                    tableGRN.selectAll();
                    dtm.setRowCount(0);
                    clearText(true);
                }
            } else {
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "No edited data found !");
            }
        } catch (ClassNotFoundException | SQLException | NumberFormatException | HeadlessException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tableItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableItemFocusLost

    }//GEN-LAST:event_tableItemFocusLost

    private void tableItemPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableItemPropertyChange
    }//GEN-LAST:event_tableItemPropertyChange

    private void txtGrnId2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrnId2KeyReleased
        txtGrnId2.setBackground(Color.WHITE);
    }//GEN-LAST:event_txtGrnId2KeyReleased

    private void comboSupplier2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboSupplier2MouseReleased
        state = true;
    }//GEN-LAST:event_comboSupplier2MouseReleased

    private void pickDateMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pickDateMouseReleased

    }//GEN-LAST:event_pickDateMouseReleased

    private void pickDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDateActionPerformed

    }//GEN-LAST:event_pickDateActionPerformed

    private void txtCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyTyped
        Validation.priceText(txtCost);         // TODO add your handling code here:
    }//GEN-LAST:event_txtCostKeyTyped

    private void txtUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyTyped
        Validation.priceText(txtUnit);         // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitKeyTyped

    private void txtMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyTyped
        Validation.priceText(txtMin);         // TODO add your handling code here:
    }//GEN-LAST:event_txtMinKeyTyped

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        Validation.limitesIntegers(txtQty, 4);         // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> comboSupplier2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblGrnId2;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JLabel lblSupplier2;
    private javax.swing.JPanel panelWarrentyInfo;
    private org.jdesktop.swingx.JXDatePicker pickDate;
    private javax.swing.JTable tableGRN;
    private javax.swing.JTable tableItem;
    private javax.swing.JTable tableSerialNo;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtGrnId2;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtPeriod;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSerial;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables

    private void setGRNTable() {
        try {
            ArrayList<GRN> allGRN = GrnController.getAllGRN();
            if (!allGRN.isEmpty()) {
                dtmGRN.setRowCount(0);
                for (GRN grn : allGRN) {
                    Supplier supplier = SupplierController.searchSupplierBYID(grn.getSupId());
                    if (supplier != null) {
                        Object[] o = {grn.getGrnId(), supplier.getCompany(), grn.getDate(), grn.getAmount()};
                        dtmGRN.addRow(o);
                    }
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private String getSelectedDate() {
        Date date = pickDate.getDate();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String dormatDate = format.format(date);
        return dormatDate;
    }

    private void fillComboSupplier() {
        try {
            ArrayList<Supplier> list = SupplierController.allSuppliers();
            if (!list.isEmpty()) {
                comboSupplier2.removeAllItems();
                comboSupplier2.addItem("All");
                for (Supplier supplier : list) {
                    comboSupplier2.addItem(supplier.getCompany());
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
//            ex.printStackTrace(new PrintWriter(sw));
//            String trace = sw.toString();
//            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void updateRow() {
        int i0 = Integer.valueOf(period);
        if (!txtPeriod.getText().isEmpty()) {
            i0 = Integer.valueOf(txtPeriod.getText());
        }
        index = jComboBox1.getSelectedIndex();
        if (!itemMap.containsKey(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()))) {
            itemMap.remove(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()));
        }
        String s = period;
        Double d[] = {Double.parseDouble(txtCost.getText()), Double.parseDouble(txtUnit.getText()), Double.parseDouble(txtMin.getText()), Double.valueOf(txtQty.getText())};
        itemMap.put(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()), d);
        dtm.setValueAt(txtCost.getText(), tableItem.getSelectedRow(), 4);
        dtm.setValueAt(txtQty.getText(), tableItem.getSelectedRow(), 5);
        ArrayList<DealerSerial> list = new ArrayList<>();
        if (row != tableSerialNo.getRowCount() || Integer.valueOf(period) != i0
                || index != 0) {
            for (int i = 0; i < tableSerialNo.getRowCount(); i++) {
                if (!period.equals("")) {
                    s = txtPeriod.getText();
                }
                int period1 = Integer.valueOf(s);
                if (jComboBox1.getSelectedIndex() == 1) {
                    period1 *= 30;
                }
                if (jComboBox1.getSelectedIndex() == 2) {
                    period1 *= 365;
                }
                list.add(new DealerSerial(0, dtmSerial.getValueAt(i, 0).toString(), 0, period1));
            }
            if (hashMap.containsKey(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()))) {
                hashMap.remove(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()));
            }
            hashMap.put(Integer.valueOf(dtm.getValueAt(tableItem.getSelectedRow(), 0).toString()), list);
            dtm.setValueAt(true, tableItem.getSelectedRow(), 3);
            if (tableSerialNo.getRowCount() == 0) {
                dtm.setValueAt(false, tableItem.getSelectedRow(), 3);
            }
            clearText(true);
            dtmSerial.setRowCount(0);
            tableItem.selectAll();
        }
    }

    private void clearText(boolean c) {
        txtCost.setText("");
        txtMin.setText("");
        txtQty.setText("");
        txtUnit.setText("");
        txtSerial.setText("");
        if (c) {
            txtPeriod.setText("");
        }
    }
}
