/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.model.DealerSerial;
import biz.project.cms.other.Validation;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amila(Polta)
 */
public class AddWarenty extends javax.swing.JDialog {

    private DefaultTableModel dtmbatch;
    private ArrayList<Object> list;
    private ArrayList<DealerSerial> serials;
    private boolean update = false;

    /**
     * Creates new form AddWarenty
     */
    public AddWarenty(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        initComponents();
    }

    public AddWarenty(java.awt.Frame parent, boolean modal, ArrayList<Object> list) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        this.list = list;
        txtPeriod.requestFocus();
        dtmbatch = (DefaultTableModel) tblSerial.getModel();
        dtmbatch.setRowCount(0);
        setLocationRelativeTo(null);
        tblSerial.setOpaque(true);
        tblSerial.setFillsViewportHeight(true);
        tblSerial.setBackground(Color.white);

    }

    public AddWarenty(java.awt.Frame parent, boolean modal, ArrayList<Object> list, boolean update) {
        super(parent, modal);
        initComponents();
        this.list = list;
        txtPeriod.requestFocus();
        dtmbatch = (DefaultTableModel) tblSerial.getModel();
        dtmbatch.setRowCount(0);
        setLocationRelativeTo(null);
        this.update = update;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelWarrentyInfo = new javax.swing.JPanel();
        txtPeriod = new javax.swing.JTextField();
        lblPeriod = new javax.swing.JLabel();
        txtSerial = new javax.swing.JTextField();
        lblSerial = new javax.swing.JLabel();
        cmbType = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSerial = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelWarrentyInfo.setBackground(new java.awt.Color(255, 255, 255));
        panelWarrentyInfo.setBorder(null);

        txtPeriod.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtPeriod.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtPeriod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPeriodActionPerformed(evt);
            }
        });
        txtPeriod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPeriodKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPeriodKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPeriodKeyTyped(evt);
            }
        });

        lblPeriod.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPeriod.setText("Period :");

        txtSerial.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtSerial.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialActionPerformed(evt);
            }
        });
        txtSerial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSerialKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSerialKeyReleased(evt);
            }
        });

        lblSerial.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSerial.setText("Serial :");

        cmbType.setFont(new java.awt.Font("sansserif", 2, 12)); // NOI18N
        cmbType.setForeground(new java.awt.Color(102, 102, 102));
        cmbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DAYS", "MONTHS", "YEARS" }));
        cmbType.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbTypeKeyPressed(evt);
            }
        });

        tblSerial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSerial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSerialKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblSerial);

        javax.swing.GroupLayout panelWarrentyInfoLayout = new javax.swing.GroupLayout(panelWarrentyInfo);
        panelWarrentyInfo.setLayout(panelWarrentyInfoLayout);
        panelWarrentyInfoLayout.setHorizontalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                        .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPeriod)
                            .addComponent(lblSerial))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSerial)
                            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                                .addComponent(txtPeriod, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelWarrentyInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelWarrentyInfoLayout.setVerticalGroup(
            panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWarrentyInfoLayout.createSequentialGroup()
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPeriod)
                    .addComponent(cmbType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(panelWarrentyInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSerial))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelWarrentyInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPeriodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPeriodActionPerformed
        if (txtPeriod.getText().isEmpty()) {
            getToolkit().beep();
            txtPeriod.setBackground(new Color(245, 118, 112));
        } else {
            txtSerial.requestFocus();
            txtSerial.selectAll();
        }
    }//GEN-LAST:event_txtPeriodActionPerformed

    private void txtPeriodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyReleased
        Validation.limitesIntegers(txtPeriod, 5);         // TODO add your handling code here:
        txtPeriod.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtPeriodKeyReleased

    private void txtPeriodKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyTyped
        Validation.limitesIntegers(txtPeriod, 5);         // TODO add your handling code here:
    }//GEN-LAST:event_txtPeriodKeyTyped

    private void txtSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialActionPerformed
        if (txtSerial.getText().isEmpty()) {
            getToolkit().beep();
            txtPeriod.setBackground(new Color(245, 118, 112));
        } else {
            addSerail();
            txtSerial.requestFocus();
            txtSerial.selectAll();
        }
    }//GEN-LAST:event_txtSerialActionPerformed

    private void txtSerialKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerialKeyReleased
        txtSerial.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtSerialKeyReleased

    private void txtPeriodKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPeriodKeyPressed
        setForcus(evt);
    }//GEN-LAST:event_txtPeriodKeyPressed

    private void cmbTypeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTypeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtSerial.requestFocus();
        } else {
        }
    }//GEN-LAST:event_cmbTypeKeyPressed

    private void txtSerialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSerialKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblSerial.requestFocus();
        }
    }//GEN-LAST:event_txtSerialKeyPressed

    private void tblSerialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSerialKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int rn = tblSerial.getSelectedRow();
            if (rn != -1) {
                int i = JOptionPane.showConfirmDialog(this, "Remove this serail from list");
                if (i == 0) {
                    dtmbatch.removeRow(rn);
                }
            }
        }
    }//GEN-LAST:event_tblSerialKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        JOptionPane.showMessageDialog(this, "Warranty will not be added !");
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddWarenty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddWarenty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddWarenty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddWarenty.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AddWarenty dialog = new AddWarenty(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbType;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblSerial;
    private javax.swing.JPanel panelWarrentyInfo;
    private javax.swing.JTable tblSerial;
    private javax.swing.JTextField txtPeriod;
    private javax.swing.JTextField txtSerial;
    // End of variables declaration//GEN-END:variables

    private void setForcus(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            MakeGrn makeGrn = MakeGrn.getMakeGrn();
            makeGrn.setValues(list, false);
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cmbType.requestFocus();
        }
    }

    private void addSerail() {
        int rowCount = tblSerial.getRowCount();
        if (Integer.parseInt(list.get(2).toString()) != rowCount) {
            boolean contains = false;
            for (int i = 0; i < tblSerial.getRowCount(); i++) {
                String a = tblSerial.getValueAt(i, 0).toString();
                if (a.equals(txtSerial.getText())) {
                    contains = true;
                    break;
                }
            }
            if (!contains) {
                Object[] row = {txtSerial.getText()};
                dtmbatch.addRow(row);
            } else {
                JOptionPane.showMessageDialog(this, "This serail exisist");
            }
        } else if (Integer.parseInt(list.get(2).toString()) == rowCount) {

            int i = JOptionPane.showConfirmDialog(this, "Add Serials");
            if (i != 0) {
                list.add(new ArrayList<DealerSerial>());
                MakeGrn makeGrn = MakeGrn.getMakeGrn();
                if (update) {
                    makeGrn.setTableUpdateValue(list, false);
                } else {
                    makeGrn.setValues(list, false);
                }
            } else if (i == 0) {
                serials = new ArrayList<>();
                int perioud = 0;
                if ("DAYS".equals(cmbType.getSelectedItem().toString())) {
                    perioud = Integer.parseInt(txtPeriod.getText());
                } else if ("MONTHS".equals(cmbType.getSelectedItem().toString())) {
                    perioud = 30 * Integer.parseInt(txtPeriod.getText());
                } else if ("YEARS".equals(cmbType.getSelectedItem().toString())) {
                    perioud = 350 * Integer.parseInt(txtPeriod.getText());
                }
                for (int j = 0; j < rowCount; j++) {
                    //JOptionPane.showMessageDialog(this, j);
                    serials.add(new DealerSerial(tblSerial.getValueAt(j, 0).toString(), 0, perioud));
                    //System.out.println(tblSerial.getValueAt(j, 0).toString() + "    " + perioud);
                }
                list.add(serials);
                MakeGrn makeGrn = MakeGrn.getMakeGrn();
                if (update) {
                    makeGrn.setTableUpdateValue(list, true);
                } else {
                    makeGrn.setValues(list, true);
                }
                this.dispose();

            } else {
                JOptionPane.showMessageDialog(this, "This serail exisist");
            }

        }
    }
}
