/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.model.DealerSerial;
import biz.project.cms.other.Validation;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Amila(Polta)
 */
public class EditItemInfo extends javax.swing.JDialog {

    private ArrayList<Object> list;
    private boolean update ;

    /**
     * Creates new form ItemInfo
     */
    public EditItemInfo(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        setLocationRelativeTo(null);
    }

    public EditItemInfo(java.awt.Frame parent, boolean modal, ArrayList<Object> list) {
        super(parent, modal);
        initComponents();
        this.list = list;
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        setLocationRelativeTo(null);
    }
    
    public EditItemInfo(java.awt.Frame parent, boolean modal, ArrayList<Object> list,boolean update) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        this.list = list;
        this.update = update;
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtMin = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        txtQty = new javax.swing.JTextField();
        txtUnit = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(null);
        jPanel4.setPreferredSize(new java.awt.Dimension(340, 267));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("Cost Price :");

        txtMin.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMin.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMin.setCaretColor(new java.awt.Color(116, 7, 7));
        txtMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinActionPerformed(evt);
            }
        });
        txtMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMinKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMinKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinKeyTyped(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel26.setText("Qty :");

        txtQty.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtQty.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtQty.setCaretColor(new java.awt.Color(116, 7, 7));
        txtQty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQtyFocusLost(evt);
            }
        });
        txtQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyActionPerformed(evt);
            }
        });
        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        txtUnit.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtUnit.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtUnit.setCaretColor(new java.awt.Color(116, 7, 7));
        txtUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitActionPerformed(evt);
            }
        });
        txtUnit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUnitKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUnitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUnitKeyTyped(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel31.setText("Unit Price :");

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Min. Price :");

        txtCost.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCost.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCost.setCaretColor(new java.awt.Color(116, 7, 7));
        txtCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCostActionPerformed(evt);
            }
        });
        txtCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCostKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCostKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCostKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtMin)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtUnit)
                                .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 282, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinActionPerformed
         if (txtMin.getText().isEmpty()) {
            getToolkit().beep();
            txtMin.setBackground(new Color(255, 115, 115));
        } else if (Double.parseDouble(txtCost.getText()) > Double.parseDouble(txtMin.getText())) {
            getToolkit().beep();
            txtMin.setBackground(new Color(255, 115, 115));
        } else if (Double.parseDouble(txtUnit.getText()) < Double.parseDouble(txtMin.getText())) {
            getToolkit().beep();
            txtMin.setBackground(new Color(255, 115, 115));
        } else {
            txtQty.requestFocus();
            txtQty.selectAll();
        }
    }//GEN-LAST:event_txtMinActionPerformed

    private void txtMinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyPressed
        setKeyForcus(evt);
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtMin.requestFocus();
        }
    }//GEN-LAST:event_txtMinKeyPressed

    private void txtMinKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyReleased
        Validation.priceText(txtMin);
        txtMin.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtMinKeyReleased

    private void txtMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyTyped
        Validation.priceText(txtMin);        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinKeyTyped

    private void txtQtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyFocusLost
        txtQty.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtQtyFocusLost

    private void txtQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyActionPerformed
        if (txtQty.getText().isEmpty()) {
            getToolkit().beep();
            txtQty.setBackground(new Color(255, 115, 115));
        } else {
            next();
        }
    }//GEN-LAST:event_txtQtyActionPerformed

    private void txtQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyPressed
        setKeyForcus(evt);
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtMin.requestFocus();
        }
    }//GEN-LAST:event_txtQtyKeyPressed

    private void txtQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyReleased
        Validation.limitesIntegers(txtQty, 5);
        txtQty.setBackground(Color.white);
    }//GEN-LAST:event_txtQtyKeyReleased

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        Validation.limitesIntegers(txtQty, 5);         // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyKeyTyped

    private void txtUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitActionPerformed
        if (txtUnit.getText().isEmpty()) {
            getToolkit().beep();
            txtUnit.setBackground(new Color(255, 115, 115));
        } else if (Double.parseDouble(txtCost.getText()) > Double.parseDouble(txtUnit.getText())) {
            getToolkit().beep();
            txtUnit.setBackground(new Color(255, 115, 115));
        } else {
            txtMin.requestFocus();
            txtMin.selectAll();
        }
    }//GEN-LAST:event_txtUnitActionPerformed

    private void txtUnitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyPressed
        setKeyForcus(evt);
        if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtCost.requestFocus();
        }
    }//GEN-LAST:event_txtUnitKeyPressed

    private void txtUnitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyReleased
        Validation.priceText(txtUnit);
        txtUnit.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtUnitKeyReleased

    private void txtUnitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitKeyTyped
        Validation.priceText(txtUnit);          // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitKeyTyped

    private void txtCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCostActionPerformed
        if (txtCost.getText().isEmpty()) {
            getToolkit().beep();
            txtCost.setBackground(new Color(255, 115, 115));
        } else {
            txtUnit.requestFocus();
            txtUnit.selectAll();
        }
    }//GEN-LAST:event_txtCostActionPerformed

    private void txtCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyPressed
        setKeyForcus(evt);
        if (evt.getKeyCode() == KeyEvent.VK_UP) {

        }
    }//GEN-LAST:event_txtCostKeyPressed

    private void txtCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyReleased
        Validation.priceText(txtCost);
        txtCost.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_txtCostKeyReleased

    private void txtCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCostKeyTyped
        Validation.priceText(txtCost);         // TODO add your handling code here:
    }//GEN-LAST:event_txtCostKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditItemInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditItemInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditItemInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditItemInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditItemInfo dialog = new EditItemInfo(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtMin;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables

    private void next() {
        String cost = txtCost.getText();
        String unitPrice = txtUnit.getText();
        String minPrice = txtMin.getText();
        String qty = txtQty.getText();

        list.add(qty);
        list.add(cost);
        list.add(unitPrice);
        list.add(minPrice);

        int addW = JOptionPane.showConfirmDialog(this, "Do you want to add warrenty");
        if (addW == 0) {
            AddWarenty itemInfo = new AddWarenty(null, true, list,true);
            itemInfo.setVisible(true);
            this.dispose();
        } else {
            list.add(new ArrayList<DealerSerial>());
            MakeGrn makeGrn = MakeGrn.getMakeGrn();
            makeGrn.setTableUpdateValue(list, false);
            this.dispose();
        }
    }

    private void setKeyForcus(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }
}
