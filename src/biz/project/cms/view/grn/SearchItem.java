/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.controller.ItemController;
import biz.project.cms.model.Items;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amila(Polta)
 */
public class SearchItem extends javax.swing.JDialog {

    private String itemName;
    private DefaultTableModel dtm;

    /**
     * Creates new form ItemSearch
     */
    public SearchItem(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        txtSearch.requestFocus();
        setLocationRelativeTo(null);
        tblItem.setOpaque(true);
        tblItem.setFillsViewportHeight(true);
        tblItem.setBackground(Color.white);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        rCode = new javax.swing.JRadioButton();
        txtCount = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        chkManual = new javax.swing.JCheckBox();
        rDescMid = new javax.swing.JRadioButton();
        rDesc = new javax.swing.JRadioButton();
        chkCat = new javax.swing.JCheckBox();
        jXHyperlink1 = new org.jdesktop.swingx.JXHyperlink();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        rCode.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rCode);
        rCode.setText("Item Code [F3]");
        rCode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rCodeItemStateChanged(evt);
            }
        });

        txtCount.setBackground(new java.awt.Color(0, 0, 102));
        txtCount.setFont(new java.awt.Font("sansserif", 2, 16)); // NOI18N
        txtCount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtCount.setText("Search Result - 0");

        txtSearch.setFont(new java.awt.Font("sansserif", 0, 16)); // NOI18N
        txtSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        tblItem.setFont(new java.awt.Font("SansSerif", 0, 16)); // NOI18N
        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "Barcode", "Category", "ROL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItem.setRowHeight(25);
        tblItem.setSelectionBackground(new java.awt.Color(0, 153, 102));
        tblItem.setSelectionForeground(new java.awt.Color(255, 255, 204));
        tblItem.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblItem.getTableHeader().setReorderingAllowed(false);
        tblItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblItemKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblItemKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0) {
            tblItem.getColumnModel().getColumn(0).setPreferredWidth(40);
            tblItem.getColumnModel().getColumn(1).setPreferredWidth(240);
            tblItem.getColumnModel().getColumn(2).setPreferredWidth(40);
            tblItem.getColumnModel().getColumn(3).setPreferredWidth(40);
            tblItem.getColumnModel().getColumn(4).setPreferredWidth(30);
        }

        chkManual.setBackground(new java.awt.Color(255, 255, 255));
        chkManual.setSelected(true);
        chkManual.setText("Manual [F4]");

        rDescMid.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rDescMid);
        rDescMid.setText("Description Middle [F2]");
        rDescMid.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rDescMidItemStateChanged(evt);
            }
        });

        rDesc.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rDesc);
        rDesc.setSelected(true);
        rDesc.setText("Description [F1]");
        rDesc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rDescItemStateChanged(evt);
            }
        });

        chkCat.setBackground(new java.awt.Color(255, 255, 255));
        chkCat.setText("Category [F6]");

        jXHyperlink1.setText("New Item");
        jXHyperlink1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXHyperlink1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rDesc)
                            .addComponent(chkManual))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkCat)
                            .addComponent(rDescMid))
                        .addGap(65, 65, 65))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rCode)
                    .addComponent(jXHyperlink1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkCat)
                            .addComponent(chkManual)
                            .addComponent(jXHyperlink1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rDesc)
                            .addComponent(rDescMid)
                            .addComponent(rCode)))
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setPreferredSize(new java.awt.Dimension(70, 0));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("desc");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setText("desc m");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setText("code");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem4.setText("sup");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem5.setText("MANUAL");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem6.setText("cat");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        searchItem();
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        setKeyEvents(evt);

        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyReleased

    private void tblItemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemKeyReleased

    }//GEN-LAST:event_tblItemKeyReleased

    private void tblItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemKeyPressed
        setTableKeyEvent(evt);
    }//GEN-LAST:event_tblItemKeyPressed

    private void rDescItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rDescItemStateChanged

    }//GEN-LAST:event_rDescItemStateChanged

    private void rCodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rCodeItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_rCodeItemStateChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void rDescMidItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rDescMidItemStateChanged

    }//GEN-LAST:event_rDescMidItemStateChanged

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        if (!chkManual.isSelected()) {
            searchItem();
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    private void jXHyperlink1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXHyperlink1ActionPerformed
        NewItem newItem = new NewItem(null, true);
        newItem.setVisible(true);
    }//GEN-LAST:event_jXHyperlink1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SearchItem dialog = new SearchItem(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkCat;
    private javax.swing.JCheckBox chkManual;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXHyperlink jXHyperlink1;
    private javax.swing.JRadioButton rCode;
    private javax.swing.JRadioButton rDesc;
    private javax.swing.JRadioButton rDescMid;
    private javax.swing.JTable tblItem;
    private javax.swing.JLabel txtCount;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    /**
     * @param itemName the itemName to set
     */
    public void setItemName(String itemName) {
        this.itemName = itemName;
        txtSearch.setText(itemName);
    }

    private void setKeyEvents(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        } else if (evt.getKeyCode() == KeyEvent.VK_F7) {
            NewItem newItem = new NewItem(null, true);
            newItem.setVisible(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F6) {
            if (chkCat.isSelected()) {
                chkCat.setSelected(false);
            } else {
                chkCat.setSelected(true);
                if (rCode.isSelected()) {
                    rDesc.setSelected(true);
                }
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_F4) {
            if (chkManual.isSelected()) {
                chkManual.setSelected(false);
            } else {
                chkManual.setSelected(true);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblItem.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
            rDesc.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F2) {
            rDescMid.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F3) {
            rCode.setSelected(true);
            chkCat.setSelected(false);
        }
    }

    private void searchItem() {
        String name = txtSearch.getText().toLowerCase();
        dtm = (DefaultTableModel) tblItem.getModel();
        dtm.setRowCount(0);
        ArrayList<Items> list = null;
        if (rDesc.isSelected()) {
            if (chkCat.isSelected()) {
                try {
                    list = ItemController.getItemLikeByCategory(name);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                    //txtCount.setText("Search Result - " + dtm.getRowCount());
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    list = ItemController.getItemLikeByDes(name);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (rDescMid.isSelected()) {
            if (chkCat.isSelected()) {
                try {
                    list = ItemController.getItemLikeByCategoryBoth(name);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                    //txtCount.setText("Search Result - " + dtm.getRowCount());
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    list = ItemController.getItemLikeByDesBoth(name);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (rCode.isSelected() && chkManual.isSelected() == false) {
            if (chkCat.isSelected()) {
                try {
                    list = ItemController.getItemLikeByCategoryBoth(name);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                    //txtCount.setText("Search Result - " + dtm.getRowCount());
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    //System.out.println("name");
                    String split[] = name.split("it");
                    //System.out.println(split[0]);
                    list = ItemController.getItemLikeCode(split[0]);
                    if (list.isEmpty()) {
                        int i = JOptionPane.showConfirmDialog(this, "Do you want to add new Item");
                        if (i == 0) {
                            NewItem newItem = new NewItem(null, true);
                            newItem.setVisible(true);
                        }
                    } else {
                        for (Items items : list) {
                            Object[] row = {items.getCode(), items.getDescription(), items.getBarcode(), items.getCategory(), items.getRol()};
                            dtm.addRow(row);
                        }
                        txtCount.setText("Search Result - " + dtm.getRowCount());
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(SearchItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void setTableKeyEvent(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        } else if (evt.getKeyCode() == KeyEvent.VK_F7) {
            NewItem newItem = new NewItem(null, true);
            newItem.setVisible(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F6) {
            if (chkCat.isSelected()) {
                chkCat.setSelected(false);
                txtSearch.requestFocus();
            } else {
                chkCat.setSelected(true);
                if (rCode.isSelected()) {
                    rDesc.setSelected(true);
                }
                txtSearch.requestFocus();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_F4) {
            if (chkManual.isSelected()) {
                chkManual.setSelected(false);
                txtSearch.requestFocus();
            } else {
                chkManual.setSelected(true);
                txtSearch.requestFocus();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ArrayList<Object> list = new ArrayList<>();
            int row = tblItem.getSelectedRow();
            String code = (String) tblItem.getValueAt(row, 0);
            String desc = (String) tblItem.getValueAt(row, 1);
            System.out.println(code + desc);
            list.add(code);
            list.add(desc);
            ItemInfo itemInfo = new ItemInfo(null, true, list);
            itemInfo.setVisible(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F1) {
            rDesc.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F2) {
            rDescMid.setSelected(true);
        } else if (evt.getKeyCode() == KeyEvent.VK_F3) {
            rCode.setSelected(true);
            chkCat.setSelected(false);
        }
    }

}
