/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.grn;

import biz.project.cms.controller.DealerSerialController;
import biz.project.cms.controller.GrnController;
import biz.project.cms.controller.GrnDetailController;
import biz.project.cms.controller.ItemController;
import biz.project.cms.controller.SupplierController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.DealerSerial;
import biz.project.cms.model.GRN;
import biz.project.cms.model.GRNDetailBatch;
import biz.project.cms.model.Item;
import biz.project.cms.model.Supplier;
import biz.project.cms.other.IdGenerator;
import biz.project.cms.view.main.HomeFrame;
import biz.project.cms.view.supplier.AddSupplier;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Amila(Polta)
 */
public class MakeGrn extends javax.swing.JPanel {

    private final DefaultTableModel dtm;
    private HashMap<String, ArrayList<DealerSerial>> hashMap;
    private HashMap<String, ArrayList<Object>> itemMap;
    private ArrayList<DealerSerial> serials;
    private final StringWriter sw;
    private static MakeGrn makeGrn;
    private int sR;

    /**
     * Creates new form GRNs public MakeGrn() { }*
     */
    public MakeGrn() {
        this.sw = new StringWriter();
        initComponents();

        dtm = (DefaultTableModel) tblItems.getModel();
        dtm.setRowCount(0);
        datePicker.setFormats(new SimpleDateFormat("yyyy-MM-dd"));
        itemMap = new HashMap<>();

        newGRNID();
        fillComboSupplier();

        setMakeGrn(this);
        
        tblItems.setOpaque(true);
        tblItems.setFillsViewportHeight(true);
        tblItems.setBackground(Color.white);
        txtSearch.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    @SuppressWarnings(value = "unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        panelSupplierInfo1 = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        lblSupplier1 = new javax.swing.JLabel();
        lblName1 = new javax.swing.JLabel();
        comboSupplier1 = new javax.swing.JComboBox<String>();
        btnNewSupplier1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        txtDiscount = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblGrnId1 = new javax.swing.JLabel();
        txtGrnId1 = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        lblGrnId2 = new javax.swing.JLabel();
        lblDate1 = new javax.swing.JLabel();
        datePicker = new org.jdesktop.swingx.JXDatePicker();
        radioBarcode = new javax.swing.JRadioButton();

        jMenu4.setPreferredSize(new java.awt.Dimension(0, 3));

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem11.setText("Sell Price");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem12.setText("Insert Qty");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jMenuItem13.setText("Insert Code");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem14.setText("Barcode");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem15.setText("Description");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem15);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem17.setText("Clear All");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem17);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem19.setText("Save");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem20.setText("Add to Table");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem20);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Sell Price");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem16);

        jMenuBar1.add(jMenu4);

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(774, 720));
        setPreferredSize(new java.awt.Dimension(774, 720));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(0, 0));

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton2.setText("Print");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jButton3.setText("Calculator");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        panelSupplierInfo1.setBackground(new java.awt.Color(255, 255, 255));
        panelSupplierInfo1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Supplier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("sansserif", 1, 12), new java.awt.Color(141, 141, 237))); // NOI18N

        txtName.setEditable(false);
        txtName.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblSupplier1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSupplier1.setText("Company :");

        lblName1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblName1.setText("Name :");

        comboSupplier1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSupplier1ItemStateChanged(evt);
            }
        });
        comboSupplier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSupplier1ActionPerformed(evt);
            }
        });

        btnNewSupplier1.setBackground(new java.awt.Color(255, 255, 255));
        btnNewSupplier1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnNewSupplier1.setText("New");
        btnNewSupplier1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNewSupplier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSupplier1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSupplierInfo1Layout = new javax.swing.GroupLayout(panelSupplierInfo1);
        panelSupplierInfo1.setLayout(panelSupplierInfo1Layout);
        panelSupplierInfo1Layout.setHorizontalGroup(
            panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSupplierInfo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSupplier1)
                    .addComponent(lblName1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboSupplier1, 0, 308, Short.MAX_VALUE)
                    .addComponent(txtName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelSupplierInfo1Layout.setVerticalGroup(
            panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSupplierInfo1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSupplier1)
                    .addComponent(btnNewSupplier1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSupplierInfo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblItems.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Code", "Description", "Warranty", "Qty", "Cost Price", "Unit Price", "Min. Price", "Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.setMinimumSize(new java.awt.Dimension(0, 0));
        tblItems.setRowHeight(22);
        tblItems.setSelectionBackground(new java.awt.Color(0, 153, 102));
        tblItems.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblItems.getTableHeader().setReorderingAllowed(false);
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
        });
        tblItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblItemsKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblItemsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblItems);
        if (tblItems.getColumnModel().getColumnCount() > 0) {
            tblItems.getColumnModel().getColumn(0).setResizable(false);
            tblItems.getColumnModel().getColumn(0).setPreferredWidth(5);
            tblItems.getColumnModel().getColumn(1).setResizable(false);
            tblItems.getColumnModel().getColumn(1).setPreferredWidth(50);
            tblItems.getColumnModel().getColumn(2).setResizable(false);
            tblItems.getColumnModel().getColumn(2).setPreferredWidth(350);
            tblItems.getColumnModel().getColumn(3).setResizable(false);
            tblItems.getColumnModel().getColumn(3).setPreferredWidth(10);
            tblItems.getColumnModel().getColumn(4).setResizable(false);
            tblItems.getColumnModel().getColumn(4).setPreferredWidth(10);
            tblItems.getColumnModel().getColumn(5).setResizable(false);
            tblItems.getColumnModel().getColumn(5).setPreferredWidth(40);
            tblItems.getColumnModel().getColumn(6).setResizable(false);
            tblItems.getColumnModel().getColumn(6).setPreferredWidth(10);
            tblItems.getColumnModel().getColumn(7).setResizable(false);
            tblItems.getColumnModel().getColumn(7).setPreferredWidth(10);
            tblItems.getColumnModel().getColumn(8).setResizable(false);
            tblItems.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        txtDiscount.setFont(new java.awt.Font("sansserif", 3, 15)); // NOI18N
        txtDiscount.setForeground(new java.awt.Color(102, 102, 102));
        txtDiscount.setText("0.00");
        txtDiscount.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtDiscount.setSelectedTextColor(new java.awt.Color(51, 0, 204));
        txtDiscount.setSelectionColor(new java.awt.Color(255, 204, 153));
        txtDiscount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDiscountKeyReleased(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel27.setText("Discount : ");

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(242, 242, 242));
        txtTotal.setFont(new java.awt.Font("sansserif", 1, 16)); // NOI18N
        txtTotal.setText("0.00");
        txtTotal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(255, 255, 255));
        btnSave.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSave.setText("SAVE");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel29.setText("Sub Total : ");

        lblTotal.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 0, 102));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTotal.setText("Rs. 0.00");
        lblTotal.setMaximumSize(null);
        lblTotal.setMinimumSize(null);

        lblGrnId1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblGrnId1.setText("GRN ID:");

        txtGrnId1.setEditable(false);
        txtGrnId1.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtGrnId1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtGrnId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrnId1ActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtSearch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblGrnId2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblGrnId2.setText("Search :");

        lblDate1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate1.setText("Date :");

        datePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerActionPerformed(evt);
            }
        });
        datePicker.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                datePickerKeyReleased(evt);
            }
        });

        radioBarcode.setBackground(new java.awt.Color(255, 255, 255));
        radioBarcode.setText("Barcode [F6]");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelSupplierInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 35, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel29)
                                            .addComponent(jLabel27))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtTotal)
                                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblGrnId1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGrnId1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(lblDate1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(lblGrnId2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(radioBarcode)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGrnId1)
                    .addComponent(txtGrnId1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate1)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGrnId2)
                    .addComponent(radioBarcode))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSupplierInfo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboSupplier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSupplier1ActionPerformed
        if (comboSupplier1.getSelectedIndex() != -1) {
            try {
                Supplier supplier = SupplierController.searchSupplier(comboSupplier1.getSelectedItem().toString());
                if (supplier != null) {
                    txtName.setText(supplier.getName());
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }//GEN-LAST:event_comboSupplier1ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveGRN();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtGrnId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrnId1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrnId1ActionPerformed

    private void txtDiscountKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDiscountKeyReleased

    }//GEN-LAST:event_txtDiscountKeyReleased

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked

    }//GEN-LAST:event_tblItemsMouseClicked

    private void tblItemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemsKeyReleased

    }//GEN-LAST:event_tblItemsKeyReleased

    private void comboSupplier1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSupplier1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSupplier1ItemStateChanged

    private void btnNewSupplier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSupplier1ActionPerformed
        new AddSupplier(null, true).setVisible(true);
        fillComboSupplier();
    }//GEN-LAST:event_btnNewSupplier1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] tot = lblTotal.getText().split("Rs. ");
        printGRN(Double.valueOf(tot[1]));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed

    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed

    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed

    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed

    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed

    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed

    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed

    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed

    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed

    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        if (radioBarcode.isSelected()) {
            try {
                Item item = ItemController.searchItemBySerial(txtSearch.getText());
                if (item != null) {
                    int i = JOptionPane.showConfirmDialog(this, "Item Code :" + item.getCode() + "\n Item Description :" + item.getDesciption() + "\n Add Item to GRN");
                    if (i == 0) {
                        ArrayList<Object> list = new ArrayList<>();
                        list.add(item.getCode());
                        list.add(item.getDesciption());
                        ItemInfo itemInfo = new ItemInfo(null, true, list);
                        itemInfo.setVisible(true);
                    } else {
                        SearchItem searchItem = new SearchItem(null, true);
                        searchItem.setItemName(item.getDesciption());
                        searchItem.setVisible(true);
                    }
                } else {
                    int i = JOptionPane.showConfirmDialog(this, "No Item Found! \nSearch by other Means");
                    if (i == 0) {
                        SearchItem searchItem = new SearchItem(null, true);
                        searchItem.setVisible(true);
                    } else {
                        radioBarcode.setSelected(false);
                    }
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(MakeGrn.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            SearchItem searchItem = new SearchItem(null, true);
            searchItem.setItemName(txtSearch.getText());
            searchItem.setVisible(true);
        }
    }//GEN-LAST:event_txtSearchActionPerformed

    private void datePickerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_datePickerKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            txtSearch.requestFocus();
        }
    }//GEN-LAST:event_datePickerKeyReleased

    private void datePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerActionPerformed
        //txtSearch.requestFocus();
    }//GEN-LAST:event_datePickerActionPerformed

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        setKeyEvent(evt);
    }//GEN-LAST:event_txtSearchKeyPressed

    private void tblItemsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblItemsKeyPressed
        setTalbeKeyEvent(evt);
    }//GEN-LAST:event_tblItemsKeyPressed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        
    }//GEN-LAST:event_txtSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewSupplier1;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> comboSupplier1;
    private org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblDate1;
    private javax.swing.JLabel lblGrnId1;
    private javax.swing.JLabel lblGrnId2;
    private javax.swing.JLabel lblName1;
    private javax.swing.JLabel lblSupplier1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelSupplierInfo1;
    private javax.swing.JRadioButton radioBarcode;
    private javax.swing.JTable tblItems;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtGrnId1;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private String getSelectedDate() {
        Date date = datePicker.getDate();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String dormatDate = format.format(date);
        return dormatDate;
    }

    /*private void removeTableData() {
     if (table.getSelectedRow() != -1) {
     if (hashMap.containsKey(dtm.getValueAt(table.getSelectedRow(), 1).toString())) {
     hashMap.remove(dtm.getValueAt(table.getSelectedRow(), 1).toString());
     }
     try {
     if (ACCESS.deleteEntry(dtm.getValueAt(table.getSelectedRow(), 1).toString())) {
     System.out.println("entry deleted");
     } else {
     System.out.println("entry delete fail");
     }
     } catch (IOException ex) {
     JOptionPane.showMessageDialog(this, ex.getMessage());
     ex.printStackTrace(new PrintWriter(sw));
     String trace = sw.toString();
     LoggerFileAcceess.exceptionLogger(trace);
     }
     dtm.removeRow(table.getSelectedRow());
     }
     }*/
    private void calcTotal() {
        double total = 0.0;
        if (tblItems.getRowCount() > 0) {
            for (int i = 0; i < tblItems.getRowCount(); i++) {
                total += Double.parseDouble(dtm.getValueAt(i, 8).toString());
            }
        } else {
            total = 0.0;
        }
        txtTotal.setText(Double.toString(total));
        if (!txtDiscount.getText().isEmpty()) {
            total -= Double.valueOf(txtDiscount.getText());
        }
        lblTotal.setText("Rs. " + total);
    }

    /*
     private void clearFile() {
     try {
     if (ACCESS.deleteAll() && GRNSFA.deleteAll()) {
     System.out.println("file cleard");
     } else {
     System.out.println("file clear fail");
     }
     } catch (IOException ex) {
     JOptionPane.showMessageDialog(this, ex.getMessage());
     ex.printStackTrace(new PrintWriter(sw));
     String trace = sw.toString();
     LoggerFileAcceess.exceptionLogger(trace);
     }
     }
    
     private void printGRN(Double valueOf) {
     HashMap<String, Object> map = new HashMap<>();
     JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm);
     try {
     JasperReport compileReport = JasperCompileManager.compileReport(getClass()
     .getResourceAsStream("../../../../../reports/GRN.jrxml"));
     map.put("INVOICE NO", txtGrnId1.getText());
     map.put("NAME", comboSupplier1.getSelectedItem().toString());
     map.put("NET TOTAL", valueOf);
     map.put("DISCOUNT", "-" + txtDiscount.getText());
     map.put("GRAND TOTAL", txtTotal.getText());
     map.put("DATE", getSelectedDate());
     map.put("USER", HomeFrame.user.getUsername());
     JasperPrint fillReport = JasperFillManager.fillReport(compileReport, map, dataSource);
     JasperViewer.viewReport(fillReport, false);
     } catch (JRException ex) {
     JOptionPane.showMessageDialog(this, ex.getMessage());
     ex.printStackTrace(new PrintWriter(sw));
     String trace = sw.toString();
     LoggerFileAcceess.exceptionLogger(trace);
     }
     }*/
    /**
     * @return the makeGrn
     */
    public static MakeGrn getMakeGrn() {
        return makeGrn;
    }

    /**
     * @param makeGrn the makeGrn to set
     */
    public void setMakeGrn(MakeGrn makeGrn) {
        this.makeGrn = makeGrn;
    }

    void setValues(ArrayList<Object> list, boolean b) {
        boolean conains = false;
        if (!list.isEmpty() && list.size() == 7) {
            for (int i = 0; i < tblItems.getRowCount(); i++) {
                if (tblItems.getValueAt(i, 1).equals(list.get(0).toString())) {
                    conains = true;
                    sR = i;
                    break;
                }
            }
            if (conains) {
                int i = JOptionPane.showConfirmDialog(this, "Update this Items row");
                if (i == 0) {
                    setTableUpdateValue(list, b);
                }
            } else {
                int rowCount = tblItems.getRowCount();
                Object[] row = {rowCount + 1, list.get(0).toString(), list.get(1).toString(), b, list.get(2).toString(), list.get(3).toString(), list.get(4).toString(), list.get(5).toString(), Double.parseDouble(list.get(2).toString()) * Double.parseDouble(list.get(3).toString())};
                dtm.addRow(row);
                Object[] mapData = {list.get(0), list.get(2).toString(), list.get(3).toString(), list.get(4).toString(), list.get(5).toString(), b, list.get(6)};
                ArrayList<Object> itemD = new ArrayList<>();
                itemD.add(list.get(0));
                itemD.add(list.get(2));
                itemD.add(list.get(3));
                itemD.add(list.get(4));
                itemD.add(list.get(5));
                itemD.add(b);
                itemD.add(list.get(6));
                itemMap.put(String.valueOf(rowCount + 1), itemD);
            }
            calcTotal();
        } else {
            JOptionPane.showMessageDialog(this, "Size Error");
        }
    }

    private void setKeyEvent(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblItems.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP) {
            datePicker.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN) {
            comboSupplier1.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_F6) {
            if (radioBarcode.isSelected()) {
                radioBarcode.setSelected(false);
            } else {
                radioBarcode.setSelected(true);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
            tblItems.requestFocus();
        }
    }

    private String newGRNID() {
        String s = null;
        try {

            s = IdGenerator.getNewGRNID();
            txtGrnId1.setText(s);

        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(MakeGrn.class.getName()).log(Level.SEVERE, null, ex);
        }
        return s;
    }

    private void fillComboSupplier() {
        try {
            ArrayList<Supplier> list = SupplierController.allSuppliers();
            if (!list.isEmpty()) {
                comboSupplier1.removeAllItems();
                for (Supplier supplier : list) {
                    comboSupplier1.addItem(supplier.getCompany());
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void setTalbeKeyEvent(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int i = tblItems.getSelectedRow();
            if (i != -1) {
                sR = i;
                System.out.println("" + i);
                ArrayList<Object> list = new ArrayList<>();
                list.add(tblItems.getValueAt(i, 1));
                list.add(tblItems.getValueAt(i, 2));
                EditItemInfo info = new EditItemInfo(null, true, list, true);
                info.setVisible(true);
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int i = tblItems.getSelectedRow();
            if (i != -1) {
                boolean containsKey = itemMap.containsKey(String.valueOf(tblItems.getValueAt(i, 0)));
                if (containsKey) {
                    int j = JOptionPane.showConfirmDialog(null, "Remove this item.");
                    if (j == 0) {
                        itemMap.remove(String.valueOf(tblItems.getValueAt(i, 0)));
                        dtm.removeRow(i);
                        calcTotal();
                    }
                }
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_PLUS) {
            txtSearch.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            int r = tblItems.getSelectedRow();
            if (r != -1) {
                Object v = tblItems.getValueAt(r, 3);
                if ("false".equals(v.toString())) {
                    int i = JOptionPane.showConfirmDialog(null, "Add Warranty");
                    if (i == 0) {
                        ArrayList<Object> list = new ArrayList<>();
                        list.add(tblItems.getValueAt(r, 1));
                        list.add(tblItems.getValueAt(r, 2));
                        list.add(tblItems.getValueAt(r, 4));
                        list.add(tblItems.getValueAt(r, 5));
                        list.add(tblItems.getValueAt(r, 6));
                        list.add(tblItems.getValueAt(r, 7));
                        sR = r;
                        new AddWarenty(null, true, list, true).setVisible(true);
                    }
                } else if ("true".equals(v.toString())) {
                    int i = JOptionPane.showConfirmDialog(null, "Remove Warranty?");
                    if (i == 0) {
                        String key = tblItems.getValueAt(r, 0).toString();
                        boolean containsKey = itemMap.containsKey(key);
                        if (containsKey) {
                            dtm.setValueAt(false, r, 3);
                            ArrayList<Object> get = itemMap.get(key);
                            get.set(5, false);
                            //JOptionPane.showMessageDialog(this, get.toString());
                            itemMap.replace(key, get);
                        }
                    }
                }
            }
        }
    }

    public void setTableUpdateValue(ArrayList<Object> list, boolean b) {
        if (!list.isEmpty() && list.size() == 7) {
            int rowCount = tblItems.getSelectedRow();
            //Object[] row = {rowCount + 1, list.get(0).toString(), list.get(1).toString(), b, list.get(2).toString(), list.get(3).toString(), list.get(4).toString(), list.get(5).toString(), Double.parseDouble(list.get(2).toString()) * Double.parseDouble(list.get(3).toString())};
            dtm.setValueAt(b, sR, 3);
            dtm.setValueAt(list.get(2).toString(), sR, 4);
            dtm.setValueAt(list.get(3).toString(), sR, 5);
            dtm.setValueAt(list.get(4).toString(), sR, 6);
            dtm.setValueAt(list.get(5).toString(), sR, 7);
            dtm.setValueAt(Double.parseDouble(list.get(2).toString()) * Double.parseDouble(list.get(3).toString()), sR, 8);
            Object[] mapData = {list.get(0), list.get(2).toString(), list.get(3).toString(), list.get(4).toString(), list.get(5).toString(), b, list.get(6)};
            ArrayList<Object> itemD = new ArrayList<>();
            itemD.add(list.get(0));
            itemD.add(list.get(2));
            itemD.add(list.get(3));
            itemD.add(list.get(4));
            itemD.add(list.get(5));
            itemD.add(b);
            itemD.add(list.get(6));
            boolean containsKey = itemMap.containsKey(String.valueOf(tblItems.getValueAt(sR, 0)));
            if (containsKey) {
                itemMap.replace(String.valueOf(tblItems.getValueAt(sR, 0)), itemD);
                calcTotal();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Size Error");
        }
    }

    private void saveGRN() {
        if (tblItems.getRowCount() > 0) {
            try {
                Supplier sup = SupplierController.searchSupplier(comboSupplier1.getSelectedItem().toString());
                if (sup != null) {
                    String[] tot = lblTotal.getText().split("Rs. ");
                    int addGRN = GrnController.addGRN(new GRN(txtGrnId1.getText(), getSelectedDate(), "" + sup.getSupId(), Double.valueOf(tot[1])));
                    int result = 0;
                    if (addGRN > 0) {
                        GRNDetailBatch detailBatch;
//                        for (int i = 0; i < tblItems.getRowCount(); i++) {
//                            detailBatch = new GRNDetailBatch();
//                            detailBatch.setCost(Double.valueOf(dtm.getValueAt(i, 5).toString()));
//                            detailBatch.setDate(getSelectedDate());
//                            detailBatch.setGrnID(txtGrnId1.getText());
//                            detailBatch.setItemCode(dtm.getValueAt(i, 1).toString());
//                            detailBatch.setMin(Double.valueOf(dtm.getValueAt(i, 7).toString()));
//                            detailBatch.setQty(Integer.parseInt(dtm.getValueAt(i, 4).toString()));
//                            detailBatch.setUnit(Double.valueOf(dtm.getValueAt(i, 6).toString()));
//                            int[] returnVal = GrnDetailController.addGRNDetailBatch(detailBatch);
//                            if (returnVal != null) {
//                                result++;
//                                if (hashMap.containsKey(detailBatch.getItemCode())) {
//                                    ArrayList<DealerSerial> listSerial = hashMap.get(detailBatch.getItemCode());
//                                    for (DealerSerial serial : listSerial) {
//                                        serial.setGrnId(returnVal[1]);
//                                        DealerSerialController.addDealerSerial(serial);
//                                    }
//                                }
//                            }
//                        }
                        for (int i = 0; i < tblItems.getRowCount(); i++) {
                            if (itemMap.containsKey(tblItems.getValueAt(i, 0).toString())) {
                                ArrayList<Object> get = itemMap.get(tblItems.getValueAt(i, 0).toString());
                                detailBatch = new GRNDetailBatch();
                                detailBatch.setCost(Double.parseDouble(get.get(2).toString()));
                                detailBatch.setDate(getSelectedDate());
                                detailBatch.setGrnID(txtGrnId1.getText());
                                detailBatch.setItemCode(get.get(0).toString());
                                detailBatch.setMin(Double.parseDouble(get.get(4).toString()));
                                detailBatch.setQty(Integer.parseInt(get.get(1).toString()));
                                detailBatch.setUnit(Double.parseDouble(get.get(3).toString()));
                                int[] returnVal = GrnDetailController.addGRNDetailBatch(detailBatch);
                                if (returnVal != null) {
                                    result++;
                                    if (get.get(5).toString().equals("true")) {
                                        ArrayList<DealerSerial> listSerial = (ArrayList<DealerSerial>) get.get(6);
                                        if (!listSerial.isEmpty()) {
                                            for (DealerSerial dealerSerial : listSerial) {
                                                dealerSerial.setItemcode(get.get(0).toString());
                                                dealerSerial.setGrnId(returnVal[1]);
                                                DealerSerialController.addDealerSerial(dealerSerial);
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                    if (result == tblItems.getRowCount()) {
                        JOptionPane.showMessageDialog(this, "GRN " + txtGrnId1.getText() + " successfully added !", "Information", 1);
                        AddGRNPay gRNPay = new AddGRNPay(null, true);
                        gRNPay.setCID(txtGrnId1.getText());
                        gRNPay.setAmount(Double.valueOf(tot[1]));
                        gRNPay.setLocationRelativeTo(this);
                        gRNPay.setVisible(true);
                        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to print a invoice ?");
                        if (confirm == 0) {
                            printGRN(Double.valueOf(tot[1]));
                        }
                        itemMap = new HashMap<>();
                        serials = new ArrayList<>();
                        dtm.setRowCount(0);
                        txtDiscount.setText("0.0");
                        txtTotal.setText("0.0");
                        txtSearch.setText("");
                        radioBarcode.setSelected(false);
                        lblTotal.setText("Rs. 0.0");
                    } else {
                        JOptionPane.showMessageDialog(this, "There was an error adding GRN items."
                                + "\nPlease recheck your data.", "Error", 0);
                    }
                    newGRNID();
                } else {
                    JOptionPane.showMessageDialog(this, "No Supplier Selected !");
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Select a Company");
            }
        }
    }

    private void printGRN(Double valueOf) {
        HashMap<String, Object> map = new HashMap<>();
        JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm);
        try {
            JasperReport compileReport = JasperCompileManager.compileReport(getClass()
                    .getResourceAsStream("../../../../../reports/GRN.jrxml"));
            map.put("INVOICE NO", txtGrnId1.getText());
            map.put("NAME", comboSupplier1.getSelectedItem().toString());
            map.put("NET TOTAL", valueOf);
            map.put("DISCOUNT", "-" + txtDiscount.getText());
            map.put("GRAND TOTAL", txtTotal.getText());
            map.put("DATE", getSelectedDate());
            map.put("USER", HomeFrame.user.getUsername());
            JasperPrint fillReport = JasperFillManager.fillReport(compileReport, map, dataSource);
            JasperViewer.viewReport(fillReport, false);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

}
