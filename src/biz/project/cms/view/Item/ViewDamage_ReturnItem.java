/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.Item;

import biz.project.cms.controller.ItemController;
import biz.project.cms.model.ViewDamageNReturn;
import java.awt.Color;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kisal Suranjaya
 */
public class ViewDamage_ReturnItem extends javax.swing.JDialog {

    /**
     * Creates new form ViewDamage_ReturnItem
     */
    public ViewDamage_ReturnItem(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
//
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        Color white = new Color(255, 255, 255);
        tableReturn.setOpaque(true);
        tableReturn.setFillsViewportHeight(true);
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
        tableReturn.setBackground(white);
        radioAll.setSelected(true);
        datePickerDate.setEnabled(false);
        datePickerDate.setFormats(new SimpleDateFormat("yyyy-MM-dd"));
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        panelMain = new javax.swing.JPanel();
        radioMyReturn = new javax.swing.JRadioButton();
        radioDamage = new javax.swing.JRadioButton();
        radioAll = new javax.swing.JRadioButton();
        checkBoxUseDate = new javax.swing.JCheckBox();
        datePickerDate = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableReturn = new javax.swing.JTable();
        radioCustomerReturn = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Item Return / Damage");
        setResizable(false);

        panelMain.setBackground(new java.awt.Color(255, 255, 255));

        radioMyReturn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioMyReturn);
        radioMyReturn.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        radioMyReturn.setText("My Return");
        radioMyReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioMyReturnMouseClicked(evt);
            }
        });

        radioDamage.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioDamage);
        radioDamage.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        radioDamage.setText("Damage");
        radioDamage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioDamageMouseClicked(evt);
            }
        });

        radioAll.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioAll);
        radioAll.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        radioAll.setSelected(true);
        radioAll.setText("All");
        radioAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioAllMouseClicked(evt);
            }
        });

        checkBoxUseDate.setBackground(new java.awt.Color(255, 255, 255));
        checkBoxUseDate.setText("Use Date");
        checkBoxUseDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxUseDateMouseClicked(evt);
            }
        });

        datePickerDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerDateActionPerformed(evt);
            }
        });

        tableReturn.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableReturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Name", "Type", "Date", "Cost Price"
            }
        ));
        tableReturn.setRowHeight(22);
        tableReturn.setSelectionBackground(new java.awt.Color(0, 204, 102));
        tableReturn.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableReturn.getTableHeader().setReorderingAllowed(false);
        tableReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableReturnMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableReturn);

        radioCustomerReturn.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(radioCustomerReturn);
        radioCustomerReturn.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        radioCustomerReturn.setText("Customer Return");
        radioCustomerReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioCustomerReturnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(checkBoxUseDate)
                                .addGap(18, 18, 18)
                                .addComponent(datePickerDate, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(radioAll)
                                .addGap(52, 52, 52)
                                .addComponent(radioDamage)
                                .addGap(78, 78, 78)
                                .addComponent(radioMyReturn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(radioCustomerReturn)))))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioMyReturn)
                    .addComponent(radioDamage)
                    .addComponent(radioAll)
                    .addComponent(radioCustomerReturn))
                .addGap(0, 0, 0)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxUseDate)
                    .addComponent(datePickerDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableReturnMouseClicked

    }//GEN-LAST:event_tableReturnMouseClicked

    private void checkBoxUseDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxUseDateMouseClicked
        if (checkBoxUseDate.isSelected()) {
            datePickerDate.setEnabled(true);
        } else {
            datePickerDate.setEnabled(false);
            loadTable();
        }
    }//GEN-LAST:event_checkBoxUseDateMouseClicked

    private void radioAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioAllMouseClicked
        loadTable();
    }//GEN-LAST:event_radioAllMouseClicked

    private void datePickerDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerDateActionPerformed
        loadTable();
    }//GEN-LAST:event_datePickerDateActionPerformed

    private void radioDamageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioDamageMouseClicked
        loadTable();
    }//GEN-LAST:event_radioDamageMouseClicked

    private void radioMyReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioMyReturnMouseClicked
        loadTable();
    }//GEN-LAST:event_radioMyReturnMouseClicked

    private void radioCustomerReturnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioCustomerReturnMouseClicked
        loadTable();
    }//GEN-LAST:event_radioCustomerReturnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewDamage_ReturnItem dialog = new ViewDamage_ReturnItem(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkBoxUseDate;
    private org.jdesktop.swingx.JXDatePicker datePickerDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelMain;
    private javax.swing.JRadioButton radioAll;
    private javax.swing.JRadioButton radioCustomerReturn;
    private javax.swing.JRadioButton radioDamage;
    private javax.swing.JRadioButton radioMyReturn;
    private javax.swing.JTable tableReturn;
    // End of variables declaration//GEN-END:variables

    private void loadTable() {
        ArrayList<ViewDamageNReturn> al = null;
        DefaultTableModel dtm = (DefaultTableModel) tableReturn.getModel();
        dtm.setRowCount(0);
        if (radioAll.isSelected()) {
            if (datePickerDate.isEnabled()) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(datePickerDate.getDate());
                try {
                    al = ItemController.getAllDamageByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Damage Item", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                    al = ItemController.getAllMyReturnByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "My Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                    al = ItemController.getCustomerReturnByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Customer Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    al = ItemController.getAllDamageToView();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Damage Item", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                    al = ItemController.getAllMyReturn();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "My Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                    al = ItemController.getCustomerReturn();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Customer Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (radioDamage.isSelected()) {
            if (datePickerDate.isEnabled()) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(datePickerDate.getDate());
                try {
                    al = ItemController.getAllDamageByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Damage Item", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    al = ItemController.getAllDamageToView();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Damage Item", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (radioMyReturn.isSelected()) {
            if (datePickerDate.isEnabled()) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(datePickerDate.getDate());
                try {
                    al = ItemController.getAllMyReturnByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "My Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    al = ItemController.getAllMyReturn();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "My Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (radioCustomerReturn.isSelected()) {
            if (datePickerDate.isEnabled()) {
                String date = new SimpleDateFormat("yyyy-MM-dd").format(datePickerDate.getDate());
                try {
                    al = ItemController.getCustomerReturnByDate(date);
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Customer Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    al = ItemController.getCustomerReturn();
                    for (ViewDamageNReturn vdnr : al) {
                        Object[] row = {vdnr.getCode(), vdnr.getName(), "Customer Return ", vdnr.getDate(), vdnr.getCostPrice()};
                        dtm.addRow(row);
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(ViewDamage_ReturnItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
