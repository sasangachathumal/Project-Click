/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.Jobs;

import biz.project.cms.controller.CustomerController;
import biz.project.cms.controller.JobCategoryController;
import biz.project.cms.controller.JobController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Customer;
import biz.project.cms.model.Job;
import biz.project.cms.model.JobCategory;
import biz.project.cms.model.JobCheque;
import biz.project.cms.model.JobPayment;
import biz.project.cms.model.JobSerial;
import biz.project.cms.other.IdGenerator;
import biz.project.cms.other.Validation;
import biz.project.cms.view.customer.AddNewCustomer;
import biz.project.cms.view.main.HomeFrame;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;

/**
 *
 * @author Dilhan Mendis
 */
public class CreateNewJob extends javax.swing.JPanel {

    private DefaultTableModel dtm;
    private int selectRow = -1;
    private int customerId = 0;
    private String jobDate = "";
    private String jobId = "";
    private String jobPayID = "";
    public static JobCheque cheque;

    /**
     * Creates new form CreateNewJob
     */
    public CreateNewJob() {
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //

        Color white = new Color(255, 255, 255);
        tableSerialNumber.setOpaque(true);
        tableSerialNumber.setFillsViewportHeight(true);
        tableSerialNumber.setBackground(white);
        dtm = (DefaultTableModel) tableSerialNumber.getModel();
        add(jMenuBar1);
        try {
            loadJobCategory();
            loadTime();
            getNewJobID();
            getNewJobPaymentId();
            setDate();
            rbtnCash.setSelected(true);
            cmbJobCategory.requestFocus();
            txtJobAdvancePayment.setText("0.00");
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        textPainter1 = new org.jdesktop.swingx.painter.TextPainter();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        focusJobDetail = new javax.swing.JMenuItem();
        focusSerial = new javax.swing.JMenuItem();
        focusSearchCustomer = new javax.swing.JMenuItem();
        focusNewCustomer = new javax.swing.JMenuItem();
        focusPayByCash = new javax.swing.JMenuItem();
        focusPayByCheque = new javax.swing.JMenuItem();
        focusSearchByContact = new javax.swing.JMenuItem();
        focusSave = new javax.swing.JMenuItem();
        focusClear = new javax.swing.JMenuItem();
        focusComplete = new javax.swing.JMenuItem();
        focusNewCategory = new javax.swing.JMenuItem();
        panelTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        panelJobDetails = new javax.swing.JPanel();
        lblJobId = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        ibiDescription = new javax.swing.JLabel();
        txtJobId = new javax.swing.JTextField();
        cmbJobCategory = new javax.swing.JComboBox<>();
        btnNewCategory = new javax.swing.JButton();
        scrlDescription = new javax.swing.JScrollPane();
        txaJobDescription = new javax.swing.JTextArea();
        lblTotal = new javax.swing.JLabel();
        txtJobTotalPayment = new javax.swing.JTextField();
        panelSerial = new javax.swing.JPanel();
        lblSerialNo = new javax.swing.JLabel();
        txtSerialNumber = new javax.swing.JTextField();
        scrlSerial = new javax.swing.JScrollPane();
        tableSerialNumber = new javax.swing.JTable();
        panelCustomer = new javax.swing.JPanel();
        lblNic = new javax.swing.JLabel();
        lblContact = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtNIC = new javax.swing.JTextField();
        txtMobile = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        hplNewCustomer = new org.jdesktop.swingx.JXHyperlink();
        chkNewNic = new javax.swing.JCheckBox();
        panelPayment = new javax.swing.JPanel();
        lblPayId = new javax.swing.JLabel();
        lblPay = new javax.swing.JLabel();
        txtJobPaymentId = new javax.swing.JTextField();
        txtJobAdvancePayment = new javax.swing.JTextField();
        lblType = new javax.swing.JLabel();
        rbtnCash = new javax.swing.JRadioButton();
        rbtnCheque = new javax.swing.JRadioButton();
        btnChequeDetails = new javax.swing.JButton();
        chkBoxJobStatus = new javax.swing.JCheckBox();
        btnAddJob = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();

        jMenu2.setText("Edit");

        focusJobDetail.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        focusJobDetail.setText("jMenuItem1");
        focusJobDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusJobDetailActionPerformed(evt);
            }
        });
        jMenu2.add(focusJobDetail);

        focusSerial.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        focusSerial.setText("jMenuItem1");
        focusSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusSerialActionPerformed(evt);
            }
        });
        jMenu2.add(focusSerial);

        focusSearchCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        focusSearchCustomer.setText("jMenuItem1");
        focusSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusSearchCustomerActionPerformed(evt);
            }
        });
        jMenu2.add(focusSearchCustomer);

        focusNewCustomer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        focusNewCustomer.setText("jMenuItem1");
        focusNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusNewCustomerActionPerformed(evt);
            }
        });
        jMenu2.add(focusNewCustomer);

        focusPayByCash.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        focusPayByCash.setText("jMenuItem1");
        focusPayByCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusPayByCashActionPerformed(evt);
            }
        });
        jMenu2.add(focusPayByCash);

        focusPayByCheque.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        focusPayByCheque.setText("jMenuItem1");
        focusPayByCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusPayByChequeActionPerformed(evt);
            }
        });
        jMenu2.add(focusPayByCheque);

        focusSearchByContact.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, java.awt.event.InputEvent.ALT_MASK));
        focusSearchByContact.setText("jMenuItem1");
        focusSearchByContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusSearchByContactActionPerformed(evt);
            }
        });
        jMenu2.add(focusSearchByContact);

        focusSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        focusSave.setText("jMenuItem2");
        focusSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusSaveActionPerformed(evt);
            }
        });
        jMenu2.add(focusSave);

        focusClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        focusClear.setText("jMenuItem1");
        focusClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusClearActionPerformed(evt);
            }
        });
        jMenu2.add(focusClear);

        focusComplete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        focusComplete.setText("jMenuItem1");
        focusComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusCompleteActionPerformed(evt);
            }
        });
        jMenu2.add(focusComplete);

        focusNewCategory.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        focusNewCategory.setText("jMenuItem1");
        focusNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                focusNewCategoryActionPerformed(evt);
            }
        });
        jMenu2.add(focusNewCategory);

        jMenuBar1.add(jMenu2);

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(0, 0));
        setPreferredSize(new java.awt.Dimension(774, 720));

        panelTitle.setBackground(new java.awt.Color(255, 255, 255));
        panelTitle.setMinimumSize(new java.awt.Dimension(0, 0));
        panelTitle.setPreferredSize(new java.awt.Dimension(774, 80));

        lblTitle.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/job.png"))); // NOI18N
        lblTitle.setText("Create A New Job");
        lblTitle.setMaximumSize(new java.awt.Dimension(330, 80));
        lblTitle.setMinimumSize(new java.awt.Dimension(330, 80));

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelJobDetails.setBackground(new java.awt.Color(255, 255, 255));
        panelJobDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Job Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        panelJobDetails.setMinimumSize(new java.awt.Dimension(0, 0));
        panelJobDetails.setPreferredSize(new java.awt.Dimension(320, 0));

        lblJobId.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblJobId.setText("ID  :");

        lblCategory.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCategory.setText("Category ** :");

        ibiDescription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ibiDescription.setText("Description ** :");

        txtJobId.setEditable(false);
        txtJobId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtJobId.setToolTipText("System Generated Job Id");
        txtJobId.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbJobCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbJobCategory.setToolTipText("Select A Job Category");
        cmbJobCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbJobCategoryItemStateChanged(evt);
            }
        });
        cmbJobCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbJobCategoryActionPerformed(evt);
            }
        });

        btnNewCategory.setText("+");
        btnNewCategory.setToolTipText("Make a new job category");
        btnNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCategoryActionPerformed(evt);
            }
        });

        txaJobDescription.setColumns(20);
        txaJobDescription.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        txaJobDescription.setLineWrap(true);
        txaJobDescription.setRows(5);
        txaJobDescription.setToolTipText("Type Job Description");
        scrlDescription.setViewportView(txaJobDescription);

        lblTotal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTotal.setText("Tot Amount :");

        txtJobTotalPayment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtJobTotalPayment.setText("0.00");
        txtJobTotalPayment.setToolTipText("Input A total Job Payment");
        txtJobTotalPayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtJobTotalPayment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJobTotalPaymentFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJobTotalPaymentFocusLost(evt);
            }
        });
        txtJobTotalPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobTotalPaymentActionPerformed(evt);
            }
        });
        txtJobTotalPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtJobTotalPaymentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtJobTotalPaymentKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelJobDetailsLayout = new javax.swing.GroupLayout(panelJobDetails);
        panelJobDetails.setLayout(panelJobDetailsLayout);
        panelJobDetailsLayout.setHorizontalGroup(
            panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJobDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblJobId, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCategory, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ibiDescription, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(11, 11, 11)
                .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtJobId)
                    .addGroup(panelJobDetailsLayout.createSequentialGroup()
                        .addComponent(cmbJobCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewCategory))
                    .addComponent(scrlDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                    .addComponent(txtJobTotalPayment))
                .addGap(20, 20, 20))
        );
        panelJobDetailsLayout.setVerticalGroup(
            panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelJobDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJobDetailsLayout.createSequentialGroup()
                        .addComponent(txtJobId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewCategory, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(cmbJobCategory)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelJobDetailsLayout.createSequentialGroup()
                        .addComponent(lblJobId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ibiDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelJobDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJobTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        panelSerial.setBackground(new java.awt.Color(255, 255, 255));
        panelSerial.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Numbers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        panelSerial.setPreferredSize(new java.awt.Dimension(320, 0));

        lblSerialNo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSerialNo.setText("Serial Number :");

        txtSerialNumber.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSerialNumber.setToolTipText("Input A Serial Number");
        txtSerialNumber.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumberActionPerformed(evt);
            }
        });

        tableSerialNumber.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tableSerialNumber.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSerialNumber.setToolTipText("Selected serial numbers");
        tableSerialNumber.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableSerialNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSerialNumberMouseClicked(evt);
            }
        });
        tableSerialNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableSerialNumberKeyReleased(evt);
            }
        });
        scrlSerial.setViewportView(tableSerialNumber);

        javax.swing.GroupLayout panelSerialLayout = new javax.swing.GroupLayout(panelSerial);
        panelSerial.setLayout(panelSerialLayout);
        panelSerialLayout.setHorizontalGroup(
            panelSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSerialLayout.createSequentialGroup()
                        .addComponent(lblSerialNo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(txtSerialNumber)
                    .addComponent(scrlSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        panelSerialLayout.setVerticalGroup(
            panelSerialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialLayout.createSequentialGroup()
                .addComponent(lblSerialNo)
                .addGap(9, 9, 9)
                .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrlSerial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelCustomer.setBackground(new java.awt.Color(255, 255, 255));
        panelCustomer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Customer Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        panelCustomer.setMinimumSize(new java.awt.Dimension(0, 0));
        panelCustomer.setPreferredSize(new java.awt.Dimension(320, 0));

        lblNic.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblNic.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblNic.setText("NIC :");

        lblContact.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblContact.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblContact.setText("Mobile :");

        lblName.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblName.setText("Name :");

        txtNIC.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtNIC.setToolTipText("Input a customer nic no to find");
        txtNIC.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtNIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNICActionPerformed(evt);
            }
        });
        txtNIC.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtNICPropertyChange(evt);
            }
        });
        txtNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNICKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNICKeyTyped(evt);
            }
        });

        txtMobile.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtMobile.setToolTipText("Input a customer contact no to find");
        txtMobile.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtMobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobileActionPerformed(evt);
            }
        });
        txtMobile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMobileKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMobileKeyTyped(evt);
            }
        });

        txtCustomerName.setEditable(false);
        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtCustomerName.setToolTipText("Selected customer name");
        txtCustomerName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });

        hplNewCustomer.setText("New  [ F11 ]");
        hplNewCustomer.setToolTipText("Create for new customer.Click this");
        hplNewCustomer.setClickedColor(new java.awt.Color(153, 0, 255));
        hplNewCustomer.setContentAreaFilled(false);
        hplNewCustomer.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        hplNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hplNewCustomerActionPerformed(evt);
            }
        });

        chkNewNic.setBackground(new java.awt.Color(255, 252, 252));

        javax.swing.GroupLayout panelCustomerLayout = new javax.swing.GroupLayout(panelCustomer);
        panelCustomer.setLayout(panelCustomerLayout);
        panelCustomerLayout.setHorizontalGroup(
            panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCustomerLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblNic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblContact, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMobile, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCustomerLayout.createSequentialGroup()
                        .addComponent(txtNIC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkNewNic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCustomerLayout.createSequentialGroup()
                        .addGap(0, 157, Short.MAX_VALUE)
                        .addComponent(hplNewCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCustomerName))
                .addGap(21, 21, 21))
        );
        panelCustomerLayout.setVerticalGroup(
            panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCustomerLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNic, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNIC, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkNewNic, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCustomerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hplNewCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPayment.setBackground(new java.awt.Color(255, 255, 255));
        panelPayment.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Numbers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        panelPayment.setPreferredSize(new java.awt.Dimension(320, 0));

        lblPayId.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPayId.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPayId.setText("Payment Id :");

        lblPay.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPay.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPay.setText("Pay :");

        txtJobPaymentId.setEditable(false);
        txtJobPaymentId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtJobPaymentId.setToolTipText("System generated payment id");
        txtJobPaymentId.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtJobAdvancePayment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtJobAdvancePayment.setText("0.00");
        txtJobAdvancePayment.setToolTipText("Input a payment amount");
        txtJobAdvancePayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtJobAdvancePayment.setEnabled(false);
        txtJobAdvancePayment.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJobAdvancePaymentFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJobAdvancePaymentFocusLost(evt);
            }
        });
        txtJobAdvancePayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobAdvancePaymentActionPerformed(evt);
            }
        });
        txtJobAdvancePayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtJobAdvancePaymentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtJobAdvancePaymentKeyTyped(evt);
            }
        });

        lblType.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblType.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblType.setText("Type :");

        buttonGroup1.add(rbtnCash);
        rbtnCash.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        rbtnCash.setText("  Cash");
        rbtnCash.setToolTipText("Select payment type cash");
        rbtnCash.setContentAreaFilled(false);
        rbtnCash.setEnabled(false);
        rbtnCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnCashActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbtnCheque);
        rbtnCheque.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        rbtnCheque.setText("  Cheque");
        rbtnCheque.setToolTipText("Select payment type cheque");
        rbtnCheque.setContentAreaFilled(false);
        rbtnCheque.setEnabled(false);
        rbtnCheque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnChequeActionPerformed(evt);
            }
        });

        btnChequeDetails.setBackground(new java.awt.Color(153, 153, 255));
        btnChequeDetails.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnChequeDetails.setText("Add Cheque Details");
        btnChequeDetails.setToolTipText("Create for Cheque details.Click this");
        btnChequeDetails.setEnabled(false);
        btnChequeDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChequeDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPaymentLayout = new javax.swing.GroupLayout(panelPayment);
        panelPayment.setLayout(panelPaymentLayout);
        panelPaymentLayout.setHorizontalGroup(
            panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPaymentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelPaymentLayout.createSequentialGroup()
                        .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnCash)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnCheque)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPaymentLayout.createSequentialGroup()
                        .addComponent(lblPay, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnChequeDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                            .addComponent(txtJobAdvancePayment)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelPaymentLayout.createSequentialGroup()
                        .addComponent(lblPayId, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtJobPaymentId)))
                .addGap(21, 21, 21))
        );
        panelPaymentLayout.setVerticalGroup(
            panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPaymentLayout.createSequentialGroup()
                .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPayId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJobPaymentId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbtnCash)
                    .addComponent(rbtnCheque))
                .addGroup(panelPaymentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPaymentLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblPay, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPaymentLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txtJobAdvancePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnChequeDetails)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        chkBoxJobStatus.setBackground(new java.awt.Color(255, 255, 255));
        chkBoxJobStatus.setFont(new java.awt.Font("Arial", 3, 12)); // NOI18N
        chkBoxJobStatus.setText("  Job Is Completed");
        chkBoxJobStatus.setToolTipText("Select this after job and payment completa");
        chkBoxJobStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxJobStatusActionPerformed(evt);
            }
        });

        btnAddJob.setBackground(new java.awt.Color(153, 153, 255));
        btnAddJob.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnAddJob.setText("Save  [ F4 ]");
        btnAddJob.setToolTipText("For create job.Click this");
        btnAddJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddJobActionPerformed(evt);
            }
        });

        btnCancel.setBackground(new java.awt.Color(255, 153, 153));
        btnCancel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnCancel.setText("Clear [ F9]");
        btnCancel.setToolTipText("Clear all data in form");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("<HTML><FONT COLOR=BLUE>F1</FONT> -JOB DETAIL</HTML>");
        jLabel2.setToolTipText("");

        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("<HTML><FONT COLOR=BLUE>F2</FONT> -SERIAL DETAIL</HTML>");
        jLabel3.setToolTipText("");

        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("<HTML><FONT COLOR=BLUE> ALT + F3</FONT> -CUSTOMER SEARCH BY CONTACT</HTML>");
        jLabel4.setToolTipText("");

        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("<HTML><FONT COLOR=BLUE>F3</FONT> -CUSTOMER SEARCH BY NIC</HTML>");
        jLabel14.setToolTipText("");

        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("<HTML><FONT COLOR=BLUE>F11</FONT> - NEW CUSTOMER</HTML>");
        jLabel15.setToolTipText("");

        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("<HTML><FONT COLOR=BLUE>F5</FONT> - PAY BY CASH</HTML>");
        jLabel16.setToolTipText("");

        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("<HTML><FONT COLOR=BLUE>F6</FONT> - PAY BY CHEQUE</HTML>");
        jLabel17.setToolTipText("");

        jLabel18.setForeground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("<HTML><FONT COLOR=BLUE>F7</FONT> - NEW CATEGORY</HTML>");
        jLabel18.setToolTipText("");

        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("<HTML><FONT COLOR=BLUE>F9</FONT> - CLEAR</HTML>");
        jLabel19.setToolTipText("");

        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("<HTML><FONT COLOR=BLUE>F12</FONT> - COMPLETE JOB</HTML>");
        jLabel20.setToolTipText("");

        jLabel21.setForeground(new java.awt.Color(102, 102, 102));
        jLabel21.setText("<HTML><FONT COLOR=BLUE>F4</FONT> - SAVE ORDER</HTML>");
        jLabel21.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel20)
                    .addComponent(jLabel17)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel19))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panelJobDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                                    .addComponent(panelSerial, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(panelPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                                    .addComponent(panelCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnCancel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddJob, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chkBoxJobStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelJobDetails, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                    .addComponent(panelCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelSerial, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                    .addComponent(panelPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkBoxJobStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddJob, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(127, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCategoryActionPerformed
        try {
            addNewCategory();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnNewCategoryActionPerformed

    private void txtSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumberActionPerformed
        if (txtSerialNumber.getText().isEmpty()) {
            getToolkit().beep();
        } else {
            boolean contain = false;
            for (int i = 0; i < tableSerialNumber.getRowCount(); i++) {
                if (dtm.getValueAt(i, 0).toString().equals(txtSerialNumber.getText())) {
                    contain = true;
                    break;
                }
            }
            if (!contain) {
                Object o[] = {txtSerialNumber.getText()};
                dtm.addRow(o);
            } else {
                getToolkit().beep();
                JOptionPane.showMessageDialog(this, "Serial number is already in the list.");
            }
        }
        txtSerialNumber.setText("");
        txtSerialNumber.requestFocus();
    }//GEN-LAST:event_txtSerialNumberActionPerformed

    private void tableSerialNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSerialNumberMouseClicked
        selectRow = tableSerialNumber.getSelectedRow();
    }//GEN-LAST:event_tableSerialNumberMouseClicked

    private void tableSerialNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSerialNumberKeyReleased
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            if (selectRow == -1) {
                JOptionPane.showMessageDialog(this, "Please Select A Row...");
            } else{
                dtm.removeRow(selectRow);
                selectRow = -1;
            }
        }
    }//GEN-LAST:event_tableSerialNumberKeyReleased

    private void btnAddJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddJobActionPerformed
        try {
            createNewJobWithTransaction();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnAddJobActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            afterDataSave();
            getNewJobID();
            getNewJobPaymentId();
            setDate();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkBoxJobStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxJobStatusActionPerformed
        completeJob();
    }//GEN-LAST:event_chkBoxJobStatusActionPerformed

    private void txtNICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNICActionPerformed
        try {
            findCustomerByNic();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_txtNICActionPerformed

    private void txtMobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobileActionPerformed
        try {
            findCustomerByContactNo();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_txtMobileActionPerformed

    private void txtJobTotalPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobTotalPaymentActionPerformed
        txtSerialNumber.requestFocus();
    }//GEN-LAST:event_txtJobTotalPaymentActionPerformed

    private void btnChequeDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChequeDetailsActionPerformed
        int i = -1;
        if (cheque != null) {
            i = 1;
        } else {
            i = 0;
        }
        new AddedChequeDetails(null, true, jobPayID, i).setVisible(true);
    }//GEN-LAST:event_btnChequeDetailsActionPerformed

    private void cmbJobCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbJobCategoryItemStateChanged
        
    }//GEN-LAST:event_cmbJobCategoryItemStateChanged

    private void rbtnCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnCashActionPerformed
        btnChequeDetails.setEnabled(false);
    }//GEN-LAST:event_rbtnCashActionPerformed

    private void rbtnChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnChequeActionPerformed
        btnChequeDetails.setEnabled(true);
    }//GEN-LAST:event_rbtnChequeActionPerformed

    private void txtJobTotalPaymentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobTotalPaymentFocusGained
        txtJobTotalPayment.selectAll();
    }//GEN-LAST:event_txtJobTotalPaymentFocusGained

    private void txtJobTotalPaymentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobTotalPaymentFocusLost
        if (txtJobTotalPayment.getText().isEmpty()) {
            txtJobTotalPayment.setText("0.00");
        }
        txtSerialNumber.requestFocus();
    }//GEN-LAST:event_txtJobTotalPaymentFocusLost

    private void hplNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hplNewCustomerActionPerformed
        new AddNewCustomer(null, true, this).setVisible(true);
    }//GEN-LAST:event_hplNewCustomerActionPerformed

    private void txtNICPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtNICPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNICPropertyChange

    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void cmbJobCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbJobCategoryActionPerformed
        
    }//GEN-LAST:event_cmbJobCategoryActionPerformed

    private void txtMobileKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileKeyTyped

    }//GEN-LAST:event_txtMobileKeyTyped

    private void txtMobileKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMobileKeyReleased
        Validation.phoneNumber(txtMobile, evt);
    }//GEN-LAST:event_txtMobileKeyReleased

    private void txtJobAdvancePaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtJobAdvancePaymentActionPerformed
        if (!txtJobAdvancePayment.getText().isEmpty()) {
            btnAddJob.setEnabled(true);
            if (rbtnCheque.isSelected()) {
                btnChequeDetails.doClick();
            }
        } else {
            btnAddJob.setEnabled(false);
        }
        btnAddJob.requestFocus();
    }//GEN-LAST:event_txtJobAdvancePaymentActionPerformed

    private void txtJobAdvancePaymentFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobAdvancePaymentFocusGained
        txtJobAdvancePayment.selectAll();
    }//GEN-LAST:event_txtJobAdvancePaymentFocusGained

    private void txtJobAdvancePaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobAdvancePaymentKeyReleased
        Validation.priceText(txtJobAdvancePayment);
        try {
            double totAmount = Double.parseDouble(txtJobTotalPayment.getText());
            double jobAmount = Double.parseDouble(txtJobAdvancePayment.getText());
            if (jobAmount > 0 && jobAmount <= totAmount) {
                
            } else {
                txtJobAdvancePayment.setText("");
                txtJobAdvancePayment.requestFocus();
            }
        } catch (NumberFormatException e) {
            txtJobAdvancePayment.setText("");
            txtJobAdvancePayment.requestFocus();
        }
    }//GEN-LAST:event_txtJobAdvancePaymentKeyReleased

    private void txtJobAdvancePaymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobAdvancePaymentKeyTyped
        Validation.priceText(txtJobAdvancePayment);
        if (!txtJobAdvancePayment.getText().isEmpty()) {
            btnAddJob.setEnabled(true);
        } else {
            btnAddJob.setEnabled(false);
        }
    }//GEN-LAST:event_txtJobAdvancePaymentKeyTyped

    private void txtNICKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNICKeyReleased
        if (chkNewNic.isSelected()) {
            Validation.validateNIC(txtNIC);
        } else {
            Validation.validateNIC(txtNIC);
        }
    }//GEN-LAST:event_txtNICKeyReleased

    private void txtNICKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNICKeyTyped
        if (chkNewNic.isSelected()) {
            Validation.validateNIC(txtNIC);
        } else {
            Validation.validateNIC(txtNIC);
        }
    }//GEN-LAST:event_txtNICKeyTyped

    private void txtJobTotalPaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobTotalPaymentKeyReleased
        Validation.priceText(txtJobTotalPayment);
        try {
            double amount = Double.parseDouble(txtJobTotalPayment.getText());
            if (amount > 0) {
                rbtnCash.setEnabled(true);
                rbtnCheque.setEnabled(true);
                rbtnCash.setSelected(true);
                txtJobAdvancePayment.setEnabled(true);
            } else {
                rbtnCash.setEnabled(false);
                rbtnCheque.setEnabled(false);
                rbtnCash.setSelected(false);
                txtJobAdvancePayment.setEnabled(false);
            }
        } catch (NumberFormatException e) {
            txtJobTotalPayment.setText("");
            rbtnCash.setEnabled(false);
            rbtnCheque.setEnabled(false);
            rbtnCash.setSelected(false);
            txtJobAdvancePayment.setEnabled(false);
            System.out.println(e);
        }
    }//GEN-LAST:event_txtJobTotalPaymentKeyReleased

    private void txtJobTotalPaymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobTotalPaymentKeyTyped
        Validation.priceText(txtJobTotalPayment);
    }//GEN-LAST:event_txtJobTotalPaymentKeyTyped

    private void focusSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusSerialActionPerformed
        txtSerialNumber.requestFocus();
    }//GEN-LAST:event_focusSerialActionPerformed

    private void focusSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusSearchCustomerActionPerformed
        txtNIC.requestFocus();
        txtNIC.selectAll();
    }//GEN-LAST:event_focusSearchCustomerActionPerformed

    private void focusNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusNewCustomerActionPerformed
        new AddNewCustomer(null, true, this).setVisible(true);
    }//GEN-LAST:event_focusNewCustomerActionPerformed

    private void focusPayByCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusPayByCashActionPerformed
        try {
            double amount = Double.parseDouble(txtJobTotalPayment.getText());
            if (amount > 0) {
                rbtnCash.setSelected(true);
                btnChequeDetails.setEnabled(false);
                txtJobAdvancePayment.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Can't make payment");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_focusPayByCashActionPerformed

    private void txtJobAdvancePaymentFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobAdvancePaymentFocusLost
        if (txtJobAdvancePayment.getText().equals("")) {
            txtJobAdvancePayment.setText("0.00");
        }
    }//GEN-LAST:event_txtJobAdvancePaymentFocusLost

    private void focusJobDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusJobDetailActionPerformed
        cmbJobCategory.requestFocus();
    }//GEN-LAST:event_focusJobDetailActionPerformed

    private void focusPayByChequeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusPayByChequeActionPerformed
        try {
            double amount = Double.parseDouble(txtJobTotalPayment.getText());
            if (amount > 0) {
                rbtnCheque.setSelected(true);
                btnChequeDetails.setEnabled(true);
                txtJobAdvancePayment.requestFocus();
            } else {
                JOptionPane.showMessageDialog(this, "Can't make payment");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e);
        }


    }//GEN-LAST:event_focusPayByChequeActionPerformed

    private void focusSearchByContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusSearchByContactActionPerformed
        txtMobile.requestFocus();
    }//GEN-LAST:event_focusSearchByContactActionPerformed

    private void focusSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusSaveActionPerformed
        btnAddJob.doClick();
    }//GEN-LAST:event_focusSaveActionPerformed

    private void focusClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusClearActionPerformed
        btnCancel.doClick();
    }//GEN-LAST:event_focusClearActionPerformed

    private void focusCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusCompleteActionPerformed
        completeJob();
    }//GEN-LAST:event_focusCompleteActionPerformed

    private void focusNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_focusNewCategoryActionPerformed
        btnNewCategory.doClick();
    }//GEN-LAST:event_focusNewCategoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddJob;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChequeDetails;
    private javax.swing.JButton btnNewCategory;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkBoxJobStatus;
    private javax.swing.JCheckBox chkNewNic;
    private javax.swing.JComboBox<String> cmbJobCategory;
    private javax.swing.JMenuItem focusClear;
    private javax.swing.JMenuItem focusComplete;
    private javax.swing.JMenuItem focusJobDetail;
    private javax.swing.JMenuItem focusNewCategory;
    private javax.swing.JMenuItem focusNewCustomer;
    private javax.swing.JMenuItem focusPayByCash;
    private javax.swing.JMenuItem focusPayByCheque;
    private javax.swing.JMenuItem focusSave;
    private javax.swing.JMenuItem focusSearchByContact;
    private javax.swing.JMenuItem focusSearchCustomer;
    private javax.swing.JMenuItem focusSerial;
    private org.jdesktop.swingx.JXHyperlink hplNewCustomer;
    private javax.swing.JLabel ibiDescription;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblJobId;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNic;
    private javax.swing.JLabel lblPay;
    private javax.swing.JLabel lblPayId;
    private javax.swing.JLabel lblSerialNo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblType;
    private javax.swing.JPanel panelCustomer;
    private javax.swing.JPanel panelJobDetails;
    private javax.swing.JPanel panelPayment;
    private javax.swing.JPanel panelSerial;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JRadioButton rbtnCash;
    private javax.swing.JRadioButton rbtnCheque;
    private javax.swing.JScrollPane scrlDescription;
    private javax.swing.JScrollPane scrlSerial;
    private javax.swing.JTable tableSerialNumber;
    private org.jdesktop.swingx.painter.TextPainter textPainter1;
    private javax.swing.JTextArea txaJobDescription;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtJobAdvancePayment;
    private javax.swing.JTextField txtJobId;
    private javax.swing.JTextField txtJobPaymentId;
    private javax.swing.JTextField txtJobTotalPayment;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtNIC;
    private javax.swing.JTextField txtSerialNumber;
    // End of variables declaration//GEN-END:variables

    /* 
     Methode For Find All job Categorys  
     */
    private void loadJobCategory() throws ClassNotFoundException, SQLException {
        ArrayList<JobCategory> allJobCategorys = JobCategoryController.getAllJobCategorys();
        if (allJobCategorys.size() > 0) {
            cmbJobCategory.removeAllItems();
            for (JobCategory jobCategory : allJobCategorys) {
                cmbJobCategory.addItem(jobCategory.getTitle());
            }
        }
    }

    /* 
     Methode For Find A Customer Using Nic No  
     */
    private void findCustomerByNic() throws ClassNotFoundException, SQLException {
        String nicNo = txtNIC.getText();
        if (!nicNo.equals("")) {
            Customer customer = CustomerController.searchCustomerByNIC(nicNo);
            if (customer != null) {
                txtNIC.setText(customer.getNic());
                txtMobile.setText(customer.getContact() + "");
                txtCustomerName.setText(customer.getName());
                customerId = customer.getCid();
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found...", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Customer Nic No To Search.....", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    /* 
     Methode For Find A Customer Using Contact No  
     */
    private void findCustomerByContactNo() throws ClassNotFoundException, SQLException {
        String mobileNo = txtMobile.getText();
        if (!mobileNo.equals("")) {
            try {
                int contact = Integer.parseInt(mobileNo);
                Customer customer = CustomerController.searchCustomerByContact(contact);
                if (customer != null) {
                    txtNIC.setText(customer.getNic());
                    txtMobile.setText(customer.getContact() + "");
                    txtCustomerName.setText(customer.getName());
                    customerId = customer.getCid();
                } else {
                    JOptionPane.showMessageDialog(this, "Customer Not Found...", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number !", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter Customer Contact No To Search.....", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    /* 
     Methode For Find Job Category ID DataBase  
     */
    private int findJobCategoryId() throws ClassNotFoundException, SQLException {
        int jobCategoryId = 0;
        JobCategory resultJobCategory = JobCategoryController.searchJobCategory(cmbJobCategory.getSelectedItem() + "");
        if (resultJobCategory != null) {
            jobCategoryId = resultJobCategory.getCatID();
        }
        return jobCategoryId;
    }

    /* 
     Methode For Add A New Job Category To DataBase  
     */
    private void addNewCategory() throws ClassNotFoundException, SQLException {
        String newCategory = JOptionPane.showInputDialog(this, "Input New Category Title...", "Informaion", JOptionPane.INFORMATION_MESSAGE);
        if (newCategory != null) {
            if (!"".equals(newCategory)) {
                JobCategory jc = new JobCategory(0, newCategory);
                int addJobCategory = JobCategoryController.addJobCategory(jc);
                if (addJobCategory > 0) {
                    loadJobCategory();
                }
            }
        }
    }

    /* 
     Methode For Get A New Job Id  
     */
    private void getNewJobID() throws ClassNotFoundException, SQLException {
        String jobCode = IdGenerator.getNewId(2);
        txtJobId.setText(jobCode);
        jobId = jobCode;
    }

    /* 
     Methode For Get New Job Payment ID 
     */
    private void getNewJobPaymentId() throws ClassNotFoundException, SQLException {
        String paymentCode = IdGenerator.getNewId(3);
        txtJobPaymentId.setText(paymentCode);
        jobPayID = paymentCode;
    }

    private void setDate() {
        Date date = new Date();
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        jobDate = format.format(date);
    }

    /* 
     Methode For Find A System Time  
     */
    private String loadTime() {
        SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");
        String format1 = time.format(new Date());
        return format1;
    }

    /* 
     Methode For A Reset Job View Data  
     */
    private void afterDataSave() {
        txaJobDescription.setText("");
        txtSerialNumber.setText("");
        if (tableSerialNumber.getRowCount() > 0) {
            dtm.setRowCount(0);
        }
        txtNIC.setText("");
        txtMobile.setText("");
        txtCustomerName.setText("");
        txtJobTotalPayment.setText("0.00");
        txtJobAdvancePayment.setText("0.00");
        chkBoxJobStatus.setSelected(false);
        selectRow = -1;
        customerId = 0;
        jobDate = "";
        jobId = "";
        rbtnCash.setSelected(true);
        rbtnCash.setEnabled(false);
        rbtnCheque.setEnabled(false);
        txtJobAdvancePayment.setEnabled(false);
        btnChequeDetails.setEnabled(false);
    }

    private void createNewJobWithTransaction() throws ClassNotFoundException, SQLException {
        Job job = newJob();
        if (job != null) {
            ArrayList<JobSerial> newJobSerials = newJobSerials();
            JobPayment newJobPayment = newJobPayment();
            boolean isSuccess = new JobController().createNewJobWithTransaction(job, newJobPayment, newJobSerials, cheque);
            if (isSuccess) {
                JOptionPane.showMessageDialog(this, "New Job SuccessFully Create..", "Success", JOptionPane.INFORMATION_MESSAGE);
                int i = JOptionPane.showConfirmDialog(this, "Do you want to print an invoice ?");
                if (i == 0) {
                    print();
                }
                afterDataSave();
                getNewJobID();
                getNewJobPaymentId();
                setDate();
            } else {
                JOptionPane.showMessageDialog(this, "Can't Create New Job. Error occured during saving !", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void print() {
        HashMap<String, Object> map = new HashMap<>();
        JRTableModelDataSource dataSource = new JRTableModelDataSource(dtm);
        try {
            double bal = Double.parseDouble(txtJobTotalPayment.getText()) - Double.parseDouble(txtJobAdvancePayment.getText());
            String type = "--";
            if (rbtnCash.isSelected()) {
                type = "CASH";
            }
            if (rbtnCheque.isSelected()) {
                type = "CHEQUE";
            }
            String serial = "";
            if (tableSerialNumber.getRowCount() > 0) {
                DefaultTableModel dtm2 = (DefaultTableModel) tableSerialNumber.getModel();
                for (int i = 0; i < tableSerialNumber.getRowCount(); i++) {
                    serial += dtm2.getValueAt(i, 0).toString() + ", ";
                }
            }
            JasperReport compileReport = JasperCompileManager.compileReport(getClass()
                    .getResourceAsStream("../../../../../reports/ServiceNote.jrxml"));

            map.put("INVOICE NO", txtJobId.getText());
            map.put("NAME", txtCustomerName.getText());
            map.put("TELEPHONE", txtMobile.getText());
            map.put("TYPE", cmbJobCategory.getSelectedItem().toString());
            map.put("TOTAL", txtJobTotalPayment.getText());
            map.put("BALANCE", bal + "");
            map.put("PTYPE", type);
            map.put("AMOUNT", txtJobAdvancePayment.getText());
            map.put("DESC", txaJobDescription.getText() + '\n' + "(SN :" + serial + ")");
            map.put("USER", HomeFrame.user.getUsername());
            JasperPrint fillReport = JasperFillManager.fillReport(compileReport, map, dataSource);
            //JasperViewer.viewReport(fillReport, false);
            JasperPrintManager.printReport(fillReport, false);
        } catch (NumberFormatException | JRException ex) {
            StringWriter sw = new StringWriter();
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private Job newJob() throws ClassNotFoundException, SQLException {
        Job j = null;
        String jobDescrioption = txaJobDescription.getText();
        if (!jobDescrioption.equals("")) {
            if (customerId != 0) {
                if (cmbJobCategory.getSelectedItem() != null) {
                    int jobCategoryId = findJobCategoryId();
                    double jobTotalValue = Double.parseDouble(txtJobTotalPayment.getText());
                    String jobStatus = "0";
                    if (chkBoxJobStatus.isSelected()) {
                        jobStatus = "1";
                    } else {
                        jobStatus = "0";
                    }
                    j = new Job(jobId, jobDescrioption, loadTime(), jobDate, jobStatus, jobTotalValue, customerId, jobCategoryId);
                } else {
                    JOptionPane.showMessageDialog(this, "Please Select A Category...", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select A Customer...", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter A Job Description..", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        return j;
    }

    private ArrayList<JobSerial> newJobSerials() {
        ArrayList<JobSerial> js = new ArrayList<>();
        if (tableSerialNumber.getRowCount() > 0) {
            for (int i = 0; i < tableSerialNumber.getRowCount(); i++) {
                String serial = dtm.getValueAt(i, 0) + "";
                JobSerial jobSerial = new JobSerial(0, serial, txtJobId.getText());
                js.add(jobSerial);
            }
        }
        return js;
    }

    private JobPayment newJobPayment() {
        JobPayment jobPayment = null;
        double amount = 0;
        try {
            amount = Double.parseDouble(txtJobAdvancePayment.getText());
            if (amount > 0) {
                jobPayment = new JobPayment(jobPayID, jobDate, amount, jobId);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Number !");
        }
        return jobPayment;

    }

    public void setNewCustomerData(Customer customer) {
        txtNIC.setText(customer.getNic());
        txtMobile.setText(customer.getContact() + "");
        try {
            findCustomerByNic();
            findCustomerByContactNo();

        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void completeJob() {
        try {
            double totAmount = Double.parseDouble(txtJobTotalPayment.getText());
            double jobAmount = Double.parseDouble(txtJobAdvancePayment.getText());
            if (jobAmount == totAmount) {
                chkBoxJobStatus.setSelected(true);
            } else {
                JOptionPane.showMessageDialog(this, "You can't complete this job. because all payment is not completed...", "Warning", JOptionPane.WARNING_MESSAGE);
                chkBoxJobStatus.setSelected(false);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter valid payment...", "Warning", JOptionPane.WARNING_MESSAGE);
            chkBoxJobStatus.setSelected(false);
            StringWriter sw = new StringWriter();
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }
}
