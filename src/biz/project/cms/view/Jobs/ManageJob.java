/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.Jobs;

import biz.project.cms.controller.JobCategoryController;
import biz.project.cms.controller.JobController;
import biz.project.cms.controller.JobPaymentController;
import biz.project.cms.controller.JobSerialController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Job;
import biz.project.cms.model.JobCategory;
import biz.project.cms.model.JobPayment;
import biz.project.cms.model.JobSerial;
import biz.project.cms.other.Validation;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dilhan Mendis
 */
public class ManageJob extends javax.swing.JPanel {

    private DefaultTableModel dtm;
    private DefaultTableModel dtm1;
    private int selectedRow = -1;
    private int serialTableSelectRow = -1;
    private ArrayList<Integer> deleteSerials;
    public static JobPayment jobPayment;
    private double totalValue;

    /**
     * Creates new form ManageForm
     */
    public ManageJob() {
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        cmbSearchText.setVisible(false);
        txtSearchText.setVisible(false);
        datePickerJobDate.setVisible(false);
        btnSearch.setVisible(false);
        txtSerialno.setEnabled(false);
        tableJobDetails.setOpaque(true);
        tableJobDetails.setFillsViewportHeight(true);
        tableJobDetails.setBackground(Color.WHITE);
        tableSerialNumber.setOpaque(true);
        tableSerialNumber.setFillsViewportHeight(true);
        tableSerialNumber.setBackground(Color.WHITE);
        deleteSerials = new ArrayList<>();
        dtm = (DefaultTableModel) tableJobDetails.getModel();
        dtm1 = (DefaultTableModel) tableSerialNumber.getModel();
        try {
            loadAllJobs();
            loadJobCategory();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        panelSearch = new javax.swing.JPanel();
        lblSearchBy = new javax.swing.JLabel();
        cmbSearchType = new javax.swing.JComboBox<String>();
        cmbSearchText = new javax.swing.JComboBox<String>();
        txtSearchText = new javax.swing.JTextField();
        datePickerJobDate = new org.jdesktop.swingx.JXDatePicker();
        btnSearch = new javax.swing.JButton();
        panelUpdate = new javax.swing.JPanel();
        lblJobId = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        lblPayments = new javax.swing.JLabel();
        lblSerials = new javax.swing.JLabel();
        txtJobId = new javax.swing.JTextField();
        cmbJobcategory = new javax.swing.JComboBox<String>();
        btnNewCategory = new javax.swing.JButton();
        lblTotalPayment = new javax.swing.JLabel();
        txtTotalPayment = new javax.swing.JTextField();
        lblduePayment = new javax.swing.JLabel();
        txtDuepayment = new javax.swing.JTextField();
        chkHasSerials = new javax.swing.JCheckBox();
        scrlDescription = new javax.swing.JScrollPane();
        txtJobDescription = new javax.swing.JTextArea();
        btnPayment = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        srclSerials = new javax.swing.JScrollPane();
        tableSerialNumber = new javax.swing.JTable();
        txtSerialno = new javax.swing.JTextField();
        chkHasComplete = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableJobDetails = new javax.swing.JTable();

        setMinimumSize(new java.awt.Dimension(825, 445));
        setPreferredSize(new java.awt.Dimension(825, 445));

        panelMain.setBackground(new java.awt.Color(255, 255, 255));

        panelTitle.setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/job.png"))); // NOI18N
        lblTitle.setText("Manage Job");
        lblTitle.setIconTextGap(20);

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelSearch.setBackground(new java.awt.Color(255, 255, 255));
        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serch Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10), new java.awt.Color(102, 102, 255))); // NOI18N
        panelSearch.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSearchBy.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblSearchBy.setText("Search by");
        panelSearch.add(lblSearchBy, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 101, -1));

        cmbSearchType.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbSearchType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Category", "Job Id", "Date", "Status", "Customer", "Item Serial" }));
        cmbSearchType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSearchTypeItemStateChanged(evt);
            }
        });
        panelSearch.add(cmbSearchType, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 143, -1));

        cmbSearchText.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbSearchText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSearchTextItemStateChanged(evt);
            }
        });
        panelSearch.add(cmbSearchText, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 210, -1));

        txtSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchTextActionPerformed(evt);
            }
        });
        panelSearch.add(txtSearchText, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 210, -1));
        panelSearch.add(datePickerJobDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, 210, -1));

        btnSearch.setBackground(new java.awt.Color(102, 204, 255));
        btnSearch.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        panelSearch.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 100, -1));

        panelUpdate.setBackground(new java.awt.Color(255, 255, 255));
        panelUpdate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Update Job Here ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 10), new java.awt.Color(102, 102, 255))); // NOI18N

        lblJobId.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblJobId.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblJobId.setText("Job Id   :");

        lblCategory.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblCategory.setText("Category   :");

        lblDescription.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDescription.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblDescription.setText("Description   :");

        lblPayments.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPayments.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblPayments.setText("Payments   :");

        lblSerials.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblSerials.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSerials.setText("Serials   :");

        txtJobId.setEditable(false);
        txtJobId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtJobId.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbJobcategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbJobcategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbJobcategoryItemStateChanged(evt);
            }
        });

        btnNewCategory.setBackground(new java.awt.Color(204, 204, 204));
        btnNewCategory.setText("+");
        btnNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCategoryActionPerformed(evt);
            }
        });

        lblTotalPayment.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblTotalPayment.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblTotalPayment.setText("Total  :");

        txtTotalPayment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTotalPayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTotalPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTotalPaymentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTotalPaymentKeyTyped(evt);
            }
        });

        lblduePayment.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblduePayment.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblduePayment.setText("Due  :");

        txtDuepayment.setEditable(false);
        txtDuepayment.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtDuepayment.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chkHasSerials.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        chkHasSerials.setText("  This job Has Serial Numbers");
        chkHasSerials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHasSerialsActionPerformed(evt);
            }
        });

        txtJobDescription.setColumns(20);
        txtJobDescription.setFont(new java.awt.Font("Candara", 0, 14)); // NOI18N
        txtJobDescription.setLineWrap(true);
        txtJobDescription.setRows(5);
        scrlDescription.setViewportView(txtJobDescription);

        btnPayment.setBackground(new java.awt.Color(102, 153, 255));
        btnPayment.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnPayment.setText("Payments");
        btnPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 204, 204));
        btnUpdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        tableSerialNumber.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSerialNumber.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSerialNumberMouseClicked(evt);
            }
        });
        tableSerialNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableSerialNumberKeyReleased(evt);
            }
        });
        srclSerials.setViewportView(tableSerialNumber);
        if (tableSerialNumber.getColumnModel().getColumnCount() > 0) {
            tableSerialNumber.getColumnModel().getColumn(0).setMinWidth(0);
            tableSerialNumber.getColumnModel().getColumn(0).setPreferredWidth(0);
            tableSerialNumber.getColumnModel().getColumn(0).setMaxWidth(0);
            tableSerialNumber.getColumnModel().getColumn(1).setPreferredWidth(0);
            tableSerialNumber.getColumnModel().getColumn(2).setMinWidth(0);
            tableSerialNumber.getColumnModel().getColumn(2).setPreferredWidth(0);
            tableSerialNumber.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        txtSerialno.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSerialno.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtSerialno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialnoActionPerformed(evt);
            }
        });

        chkHasComplete.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        chkHasComplete.setText("  This Order Is Complete");
        chkHasComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHasCompleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelUpdateLayout = new javax.swing.GroupLayout(panelUpdate);
        panelUpdate.setLayout(panelUpdateLayout);
        panelUpdateLayout.setHorizontalGroup(
            panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUpdateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                        .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblJobId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCategory, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPayments, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSerials, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelUpdateLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkHasSerials, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtSerialno)))
                            .addGroup(panelUpdateLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtJobId, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelUpdateLayout.createSequentialGroup()
                                        .addComponent(cmbJobcategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNewCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(panelUpdateLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(scrlDescription)
                                    .addGroup(panelUpdateLayout.createSequentialGroup()
                                        .addComponent(lblTotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTotalPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                        .addGap(9, 9, 9)
                                        .addComponent(lblduePayment, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDuepayment, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                                        .addGap(4, 4, 4))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                                .addComponent(btnPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(srclSerials, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(chkHasComplete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(26, 26, 26))
        );
        panelUpdateLayout.setVerticalGroup(
            panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUpdateLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblJobId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtJobId, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbJobcategory, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNewCategory)))
                .addGap(5, 5, 5)
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                        .addComponent(lblPayments, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUpdateLayout.createSequentialGroup()
                        .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDuepayment, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotalPayment, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalPayment, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblduePayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addComponent(chkHasSerials)
                        .addGap(5, 5, 5)))
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSerialno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSerials, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(srclSerials, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHasComplete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUpdateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPayment, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tableJobDetails.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tableJobDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Category", "Date", "Status", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableJobDetails.setRowHeight(22);
        tableJobDetails.setSelectionBackground(new java.awt.Color(0, 153, 102));
        tableJobDetails.setSelectionForeground(new java.awt.Color(255, 232, 238));
        tableJobDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableJobDetails.getTableHeader().setReorderingAllowed(false);
        tableJobDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableJobDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableJobDetails);
        if (tableJobDetails.getColumnModel().getColumnCount() > 0) {
            tableJobDetails.getColumnModel().getColumn(0).setResizable(false);
            tableJobDetails.getColumnModel().getColumn(1).setResizable(false);
            tableJobDetails.getColumnModel().getColumn(4).setMinWidth(0);
            tableJobDetails.getColumnModel().getColumn(4).setPreferredWidth(0);
            tableJobDetails.getColumnModel().getColumn(4).setMaxWidth(0);
            tableJobDetails.getColumnModel().getColumn(5).setMinWidth(0);
            tableJobDetails.getColumnModel().getColumn(5).setPreferredWidth(0);
            tableJobDetails.getColumnModel().getColumn(5).setMaxWidth(0);
            tableJobDetails.getColumnModel().getColumn(6).setMinWidth(0);
            tableJobDetails.getColumnModel().getColumn(6).setPreferredWidth(0);
            tableJobDetails.getColumnModel().getColumn(6).setMaxWidth(0);
            tableJobDetails.getColumnModel().getColumn(7).setMinWidth(0);
            tableJobDetails.getColumnModel().getColumn(7).setPreferredWidth(0);
            tableJobDetails.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(panelUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSearchTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSearchTypeItemStateChanged
        switch (cmbSearchType.getSelectedIndex()) {
            case 0:
                cmbSearchText.setVisible(false);
                txtSearchText.setVisible(false);
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);
                try {
                    loadAllJobs();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
                break;
            case 1:
                cmbSearchText.setVisible(true);
                txtSearchText.setVisible(false);
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);
                try {
                    loadAllJobcategory();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
                break;
            case 2:
                cmbSearchText.setVisible(false);
                txtSearchText.setVisible(true);
                txtSearchText.setText("");
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);
                break;
            case 3:
                cmbSearchText.setVisible(false);
                txtSearchText.setVisible(false);
                datePickerJobDate.setVisible(true);
                btnSearch.setVisible(true);
                break;
            case 4:
                cmbSearchText.setVisible(true);
                txtSearchText.setVisible(false);
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);

                cmbSearchText.removeAllItems();
                cmbSearchText.addItem(" - Select A Status To Search - ");
                cmbSearchText.addItem("Complete");
                cmbSearchText.addItem("UnComplete");
                break;
            case 5:
                cmbSearchText.setVisible(false);
                txtSearchText.setVisible(true);
                txtSearchText.setText("");
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);
                break;
            case 6:
                cmbSearchText.setVisible(false);
                txtSearchText.setVisible(true);
                txtSearchText.setText("");
                datePickerJobDate.setVisible(false);
                btnSearch.setVisible(false);
                break;
            default:
                break;
        }

    }//GEN-LAST:event_cmbSearchTypeItemStateChanged

    private void cmbSearchTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSearchTextItemStateChanged

        if (cmbSearchType.getSelectedIndex() == 1) {
            if (cmbSearchText.getSelectedIndex() != 0) {
                try {
                    findJobByCategory();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
            }
        } else if (cmbSearchType.getSelectedIndex() == 4) {
            try {
                findJobsByStatus();
            } catch (ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }

    }//GEN-LAST:event_cmbSearchTextItemStateChanged

    private void txtSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchTextActionPerformed
        switch (cmbSearchType.getSelectedIndex()) {
            case 2:
                try {
                    findJobById();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
                break;
            case 5:
                try {
                    findJobsByCustomerContactOrNic();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                } catch (NumberFormatException e) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, "Invalid Contct No Or Nic No :");
                    e.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
                break;
            case 6:
                try {
                    findJobsByItemSerial();
                } catch (ClassNotFoundException | SQLException ex) {
                    StringWriter sw = new StringWriter();
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                    ex.printStackTrace(new PrintWriter(sw));
                    String trace = sw.toString();
                    LoggerFileAcceess.exceptionLogger(trace);
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_txtSearchTextActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            findJobsByDate();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentActionPerformed
        new AddNewJobPayment(null, true, txtJobId.getText(), Double.parseDouble(txtDuepayment.getText()), this).setVisible(true);
    }//GEN-LAST:event_btnPaymentActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            double totAmount = Double.parseDouble(txtTotalPayment.getText());
            double dueAmount = Double.parseDouble(txtDuepayment.getText());
            if (totAmount >= (totalValue - dueAmount) || totalValue == totAmount) {
                removeUnWantSerials();
                addNewSerials();
                updateJob();
                loadAllJobs();
                findAndSetPaybleAmount();
                totalValue = totAmount;
            } else {
                JOptionPane.showMessageDialog(this, "Cannot update this value...", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCategoryActionPerformed
        try {
            addNewCategory();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_btnNewCategoryActionPerformed

    private void tableSerialNumberMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSerialNumberMouseClicked
        serialTableSelectRow = tableSerialNumber.getSelectedRow();
    }//GEN-LAST:event_tableSerialNumberMouseClicked

    private void tableSerialNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableSerialNumberKeyReleased
        if (KeyEvent.VK_DELETE == evt.getKeyCode()) {
            if (serialTableSelectRow == -1) {
                JOptionPane.showMessageDialog(this, "Please Select A Row...");
            } else {
                deleteSerials.add(Integer.parseInt(tableSerialNumber.getValueAt(serialTableSelectRow, 0) + ""));
                dtm1.removeRow(serialTableSelectRow);
                serialTableSelectRow = -1;
            }
        }
    }//GEN-LAST:event_tableSerialNumberKeyReleased

    private void chkHasSerialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHasSerialsActionPerformed
        if (chkHasSerials.isSelected()) {
            txtSerialno.setEnabled(true);
        } else {
            txtSerialno.setEnabled(false);
            dtm1.setRowCount(0);
        }
    }//GEN-LAST:event_chkHasSerialsActionPerformed

    private void txtSerialnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialnoActionPerformed
        if (!txtSerialno.getText().equals("")) {
            Object[] row = {0, txtSerialno.getText(), txtJobId.getText()};
            dtm1.addRow(row);
        } else {
            JOptionPane.showMessageDialog(this, "Please Enter A Serial No...", "Warning..", 0);
            txtSerialno.requestFocus();
        }
        txtSerialno.requestFocus();
    }//GEN-LAST:event_txtSerialnoActionPerformed

    private void tableJobDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableJobDetailsMouseClicked
        selectedRow = tableJobDetails.getSelectedRow();
        if (selectedRow != -1) {
            String jobId = tableJobDetails.getValueAt(selectedRow, 0) + "";
            String status = tableJobDetails.getValueAt(selectedRow, 3) + "";
            switch (status) {
                case "UnComplete":
                    btnUpdate.setEnabled(true);
                    chkHasComplete.setSelected(false);
                    break;
                case "Complete":
                    btnUpdate.setEnabled(false);
                    chkHasComplete.setSelected(true);
                    break;
            }
            try {
                txtJobId.setText(jobId);
                cmbJobcategory.setSelectedItem(tableJobDetails.getValueAt(selectedRow, 1));
                txtJobDescription.setText(tableJobDetails.getValueAt(selectedRow, 5) + "");
                txtTotalPayment.setText(tableJobDetails.getValueAt(selectedRow, 4) + "");
                totalValue = Double.parseDouble(tableJobDetails.getValueAt(selectedRow, 4) + "");
                txtSerialno.setEnabled(false);
                findJobSerialNumbers(jobId);
                findAndSetPaybleAmount();
            } catch (NumberFormatException | ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }

        }
    }//GEN-LAST:event_tableJobDetailsMouseClicked

    private void cmbJobcategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbJobcategoryItemStateChanged

    }//GEN-LAST:event_cmbJobcategoryItemStateChanged

    private void chkHasCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHasCompleteActionPerformed
        try {
            double dueBalance = Double.parseDouble(txtDuepayment.getText());
            if (dueBalance == 0) {
                chkHasComplete.setSelected(true);
            } else {
                chkHasComplete.setSelected(false);
            }
        } catch (NumberFormatException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }//GEN-LAST:event_chkHasCompleteActionPerformed

    private void txtTotalPaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalPaymentKeyReleased
        Validation.priceText(txtTotalPayment);
    }//GEN-LAST:event_txtTotalPaymentKeyReleased

    private void txtTotalPaymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotalPaymentKeyTyped
        Validation.priceText(txtTotalPayment);
    }//GEN-LAST:event_txtTotalPaymentKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNewCategory;
    private javax.swing.JButton btnPayment;
    private javax.swing.JButton btnSearch;
    private static javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkHasComplete;
    private javax.swing.JCheckBox chkHasSerials;
    private javax.swing.JComboBox<String> cmbJobcategory;
    private javax.swing.JComboBox<String> cmbSearchText;
    private javax.swing.JComboBox<String> cmbSearchType;
    private org.jdesktop.swingx.JXDatePicker datePickerJobDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblJobId;
    private javax.swing.JLabel lblPayments;
    private javax.swing.JLabel lblSearchBy;
    private javax.swing.JLabel lblSerials;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPayment;
    private javax.swing.JLabel lblduePayment;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JPanel panelUpdate;
    private javax.swing.JScrollPane scrlDescription;
    private javax.swing.JScrollPane srclSerials;
    private javax.swing.JTable tableJobDetails;
    private javax.swing.JTable tableSerialNumber;
    private javax.swing.JTextField txtDuepayment;
    private javax.swing.JTextArea txtJobDescription;
    private javax.swing.JTextField txtJobId;
    private javax.swing.JTextField txtSearchText;
    private javax.swing.JTextField txtSerialno;
    private javax.swing.JTextField txtTotalPayment;
    // End of variables declaration//GEN-END:variables

    /*
     Load All Jobs To table
     */
    private void loadAllJobs() throws ClassNotFoundException, SQLException {
        dtm.setRowCount(0);
        ArrayList<Job> jobs = JobController.getAllJobsWithCategoryName();
        loadDataToTable(jobs);
    }

    /*
     Load All Job Category
     */
    private void loadAllJobcategory() throws ClassNotFoundException, SQLException {
        cmbSearchText.removeAllItems();
        cmbSearchText.addItem(" - Select A Category To Search -");
        ArrayList<JobCategory> allJobCategorys = JobCategoryController.getAllJobCategorys();
        if (allJobCategorys.size() > 0) {
            for (JobCategory jc : allJobCategorys) {
                cmbSearchText.addItem(jc.getTitle());
            }
        } else {
            System.out.println("Job Category Not Found...");
        }
    }

    /*
     Search Category Wise Jobs
     */
    private void findJobByCategory() throws ClassNotFoundException, SQLException {
        dtm.setRowCount(0);
        if (cmbSearchText.getSelectedIndex() != 0) {
            String categoryName = cmbSearchText.getSelectedItem() + "";
            ArrayList<Job> jobs = JobController.getAllJobsByCategoryTitle(categoryName);
            loadDataToTable(jobs);
        }
    }

    /*
     Search A job Using job Id
     */
    private void findJobById() throws ClassNotFoundException, SQLException {
        dtm.setRowCount(0);
        String jobId = txtSearchText.getText();
        Job job = JobController.searchJobByIdWithCategory(jobId);
        if (job != null) {
            int s = Integer.parseInt(job.getStatus());
            String status;
            if (s == 0) {
                status = "UnComplete";
            } else {
                status = "Complete";
            }
            Object[] row = {job.getJobId(), job.getCategoryName(), job.getDate(), status, job.getTotalAmount(), job.getDescription(), job.getTime(), job.getCustId(), job.getJobCatId()};
            dtm.addRow(row);
        } else {
            JOptionPane.showMessageDialog(this, "Not Found. Please Check Job Id number...", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    /*
     Find Job Using Specipic Day
     */
    private void findJobsByDate() throws ClassNotFoundException, SQLException {
        Date date = datePickerJobDate.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String selectedDate = sdf.format(date);
        dtm.setRowCount(0);
        ArrayList<Job> jobs = JobController.getAllJobsBydate(selectedDate);
        loadDataToTable(jobs);
    }

    /*
     Find A Job Using Complete/InComplete Type
     */
    private void findJobsByStatus() throws ClassNotFoundException, SQLException {
        int index = cmbSearchText.getSelectedIndex();
        dtm.setRowCount(0);
        if (index == 1) {
            ArrayList<Job> jobs = JobController.getAllJobsByStatus("1");
            loadDataToTable(jobs);
        } else if (index == 2) {
            ArrayList<Job> jobs = JobController.getAllJobsByStatus("0");
            loadDataToTable(jobs);
        }
    }

    /*
     Find A jobs Using Customer Contact or Nic
     */
    private void findJobsByCustomerContactOrNic() throws ClassNotFoundException, SQLException, NumberFormatException {
        String text = txtSearchText.getText();
        dtm.setRowCount(0);
        boolean contains = text.contains("V");
        if (contains) {
            ArrayList<Job> jobs = JobController.getAllJobsByCustomerNic(text);
            loadDataToTable(jobs);
        } else {
            int contact = Integer.parseInt(text);
            ArrayList<Job> jobs = JobController.getAllJobsByCustomerContact(contact);
            loadDataToTable(jobs);
        }
    }

    /*
     Find A jobs Using Item Serial No
     */
    private void findJobsByItemSerial() throws ClassNotFoundException, SQLException {
        String serial = txtSearchText.getText();
        dtm.setRowCount(0);
        ArrayList<Job> jobs = JobController.getAllJobsByItemSerial(serial);
        loadDataToTable(jobs);
    }

    private void loadDataToTable(ArrayList<Job> jobs) {
        if (jobs.size() > 0) {
            for (Job job : jobs) {
                int s = Integer.parseInt(job.getStatus());
                String status;
                if (s == 0) {
                    status = "UnComplete";
                } else {
                    status = "Complete";
                }
                Object[] row = {job.getJobId(), job.getCategoryName(), job.getDate(), status, job.getTotalAmount(), job.getDescription(), job.getTime(), job.getCustId(), job.getJobCatId()};
                dtm.addRow(row);
            }
        } else {
            dtm.setRowCount(0);
            System.out.println("Data Not Found...");
        }
    }

    /*
     Add A New job Category
     */
    private void addNewCategory() throws ClassNotFoundException, SQLException {
        String newCategory = JOptionPane.showInputDialog(this, "Input New Category Title...", "Informaion", JOptionPane.INFORMATION_MESSAGE);
        if (newCategory != null) {
            if (!"".equals(newCategory)) {
                JobCategory jc = new JobCategory(0, newCategory);
                int addJobCategory = JobCategoryController.addJobCategory(jc);
                if (addJobCategory > 0) {
                    loadJobCategory();
                }
            }
        }
    }

    /*
     all Job Category load In Constructor Only
     */
    private void loadJobCategory() throws ClassNotFoundException, SQLException {
        ArrayList<JobCategory> allJobCategorys = JobCategoryController.getAllJobCategorys();
        if (allJobCategorys.size() > 0) {
            cmbJobcategory.removeAllItems();
            for (JobCategory jobCategory : allJobCategorys) {
                cmbJobcategory.addItem(jobCategory.getTitle());
            }
        } else {
            System.out.println("Category Not Found...");
        }
    }

    /*
     find Serials using job Id
     */
    private void findJobSerialNumbers(String jobId) throws ClassNotFoundException, SQLException {
        dtm1.setRowCount(0);
        ArrayList<JobSerial> allSerials = JobSerialController.getAllJobSerialsByJobId(jobId);
        if (allSerials.size() > 0) {
            chkHasSerials.setSelected(true);
            txtSerialno.setEnabled(true);
            for (JobSerial serial : allSerials) {
                Object[] row = {serial.getId(), serial.getSerialNo(), serial.getJobId()};
                dtm1.addRow(row);
            }
        } else {
            chkHasSerials.setSelected(false);
        }
    }

    private void removeUnWantSerials() throws ClassNotFoundException, SQLException {
        if (deleteSerials.size() > 0) {
            for (Integer i : deleteSerials) {
                JobSerialController.deleteJobSerials(i);
            }
        }
    }

    private void addNewSerials() throws ClassNotFoundException, SQLException {
        for (int i = 0; i < tableSerialNumber.getRowCount(); i++) {
            int id = Integer.parseInt(tableSerialNumber.getValueAt(i, 0) + "");
            if (id == 0) {
                JobSerial js = new JobSerial(id, tableSerialNumber.getValueAt(i, 1) + "", tableSerialNumber.getValueAt(i, 2) + "");
                JobSerialController.addJobSerial(js);
            }
        }
    }

    private void findAndSetPaybleAmount() throws SQLException, ClassNotFoundException {
        String jobId = txtJobId.getText();
        double totalAmount = Double.parseDouble(txtTotalPayment.getText());
        double paidAmont = 0.0;
        ArrayList<JobPayment> allJobPaymentByJobID = JobPaymentController.getAllJobPaymentByJobID(jobId);
        if (allJobPaymentByJobID.size() > 0) {
            for (JobPayment jp : allJobPaymentByJobID) {
                paidAmont = paidAmont + jp.getAmount();
            }
            txtDuepayment.setText(totalAmount - paidAmont + "");
        } else {
            txtDuepayment.setText(totalAmount + "");
        }
    }

    private int getJobCategoryId() throws ClassNotFoundException, SQLException {
        String tile = cmbJobcategory.getSelectedItem() + "";
        JobCategory searchJobCategory = JobCategoryController.searchJobCategory(tile);
        if (searchJobCategory != null) {
            return searchJobCategory.getCatID();
        } else {
            return 0;
        }
    }

    private void updateJob() throws ClassNotFoundException, SQLException {
        String jobId = txtJobId.getText();
        String description = txtJobDescription.getText();
        String status = "";
        if (chkHasComplete.isSelected()) {
            status = "1";
        } else {
            status = "0";
        }
        double totAmount = Double.parseDouble(txtTotalPayment.getText());
        int jobCategoryId = getJobCategoryId();
        if (jobCategoryId > 0) {
            Job job = new Job();
            job.setJobId(jobId);
            job.setDescription(description);
            job.setStatus(status);
            job.setTotalAmount(totAmount);
            job.setJobCatId(jobCategoryId);

            boolean isUpdate = JobController.updateJob(job);
            if (isUpdate) {
                JOptionPane.showMessageDialog(this, "Update Successfull...", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Update Fail...", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Job Category Id Not Found...", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void reloadAfterPayment() {
        try {
            findAndSetPaybleAmount();

        } catch (ClassNotFoundException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);

        } catch (SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

}
