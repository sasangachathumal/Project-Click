/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.accounts;

import biz.project.cms.controller.AccountsController;
import biz.project.cms.fileaccess.AccountDaysCloseOrNotFileAccess;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Accounts;
import biz.project.cms.view.main.HomeFrame;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Kisal Suranjaya
 */
public class CloseDay extends javax.swing.JDialog {

    private AccountDaysCloseOrNotFileAccess access = null;
    private String parentframe = null;
    private HomeFrame home = null;

    /**
     * Creates new form CloseDay
     */
    public CloseDay(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        txtToDayPettyCashBalance.requestFocus();
        access = new AccountDaysCloseOrNotFileAccess();
        setLocationRelativeTo(parent);
        checkAccount();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
    }

    public CloseDay(java.awt.Frame parent, boolean modal, String frame) {
        super(parent, modal);
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        access = new AccountDaysCloseOrNotFileAccess();
        setLocationRelativeTo(null);
        this.parentframe = frame;
        if (frame.equals("passDay")) {
            home = (HomeFrame) parent;
            searchPassDayCloseAddStartDay();
        } else {
            checkAccount();
        }
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtToDayPettyCashBalance = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtToDayDrawerCashBalance = new javax.swing.JTextField();
        btnToDayCloseAccount = new javax.swing.JButton();
        lblPettyCashCloseOrNot = new javax.swing.JLabel();
        lblDrawerCashCloseOrNot = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Accounts");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelMain.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons/Accounts.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel2.setText("Close Account ");

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Petty Cash Balance : ");

        txtToDayPettyCashBalance.setEditable(false);
        txtToDayPettyCashBalance.setBackground(new java.awt.Color(204, 204, 204));
        txtToDayPettyCashBalance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtToDayPettyCashBalance.setForeground(new java.awt.Color(51, 51, 51));
        txtToDayPettyCashBalance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtToDayPettyCashBalanceKeyPressed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Drawer Cash Balance : ");

        txtToDayDrawerCashBalance.setEditable(false);
        txtToDayDrawerCashBalance.setBackground(new java.awt.Color(204, 204, 204));
        txtToDayDrawerCashBalance.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtToDayDrawerCashBalance.setForeground(new java.awt.Color(51, 51, 51));
        txtToDayDrawerCashBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtToDayDrawerCashBalanceActionPerformed(evt);
            }
        });

        btnToDayCloseAccount.setBackground(new java.awt.Color(255, 255, 255));
        btnToDayCloseAccount.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnToDayCloseAccount.setText("Close Accounts");
        btnToDayCloseAccount.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnToDayCloseAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToDayCloseAccountActionPerformed(evt);
            }
        });

        lblPettyCashCloseOrNot.setBackground(new java.awt.Color(255, 255, 255));
        lblPettyCashCloseOrNot.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPettyCashCloseOrNot.setForeground(new java.awt.Color(255, 255, 255));
        lblPettyCashCloseOrNot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPettyCashCloseOrNot.setOpaque(true);

        lblDrawerCashCloseOrNot.setBackground(new java.awt.Color(255, 255, 255));
        lblDrawerCashCloseOrNot.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDrawerCashCloseOrNot.setForeground(new java.awt.Color(255, 255, 255));
        lblDrawerCashCloseOrNot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDrawerCashCloseOrNot.setOpaque(true);

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                        .addGap(0, 43, Short.MAX_VALUE)
                        .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addComponent(btnToDayCloseAccount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDrawerCashCloseOrNot, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelMainLayout.createSequentialGroup()
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtToDayPettyCashBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                    .addComponent(txtToDayDrawerCashBalance))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblPettyCashCloseOrNot, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtToDayPettyCashBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(lblPettyCashCloseOrNot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDrawerCashCloseOrNot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtToDayDrawerCashBalance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnToDayCloseAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtToDayDrawerCashBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtToDayDrawerCashBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtToDayDrawerCashBalanceActionPerformed

    private void btnToDayCloseAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToDayCloseAccountActionPerformed
        if (parentframe.equals("passDay")) {
            closepassdyAccountDay();
        } else {
            closetodyAccountDay();
        }
    }//GEN-LAST:event_btnToDayCloseAccountActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

    }//GEN-LAST:event_formWindowOpened

    private void txtToDayPettyCashBalanceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtToDayPettyCashBalanceKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_txtToDayPettyCashBalanceKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CloseDay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CloseDay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CloseDay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CloseDay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CloseDay dialog = new CloseDay(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnToDayCloseAccount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblDrawerCashCloseOrNot;
    private javax.swing.JLabel lblPettyCashCloseOrNot;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTextField txtToDayDrawerCashBalance;
    private javax.swing.JTextField txtToDayPettyCashBalance;
    // End of variables declaration//GEN-END:variables

    private String getDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd");
        return dateFormat.format(date);
    }

    private void checkAccount() {
        double pettyCashAmount = 0;
        double drawerCashAmount = 0;
        try {
            ArrayList<Accounts> allAccount = AccountsController.getAllAccount();

            if (!allAccount.isEmpty()) {
                for (Accounts account : allAccount) {
                    if (account.getDate().equals(getDate())) {
                        if (account.getType() == 1) {
                            pettyCashAmount += account.getAmount();
                        } else {
                            drawerCashAmount += account.getAmount();
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Today Accounts are Empty !!!", "Message", 1);
            }
            if (pettyCashAmount == 0 && drawerCashAmount == 0) {
                JOptionPane.showMessageDialog(this, "Tday Accounts are Empty !!!", "Message", 1);
            }
            txtToDayDrawerCashBalance.setText(String.valueOf(drawerCashAmount));
            txtToDayPettyCashBalance.setText(String.valueOf(pettyCashAmount));
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void closetodyAccountDay() {
        if (!txtToDayDrawerCashBalance.getText().equals("") && !txtToDayPettyCashBalance.getText().equals("")) {
            try {
                boolean addAccount = access.updateAccount(getDate(), 1);
                if (addAccount) {
                    Accounts pettyAccounts = new Accounts(0, HomeFrame.user.getUid(), null, null, 1, "close(Petty Cash Day Close)", -1 * Double.parseDouble(txtToDayPettyCashBalance.getText()));
                    Accounts drawerAccounts = new Accounts(0, HomeFrame.user.getUid(), null, null, 2, "close(Drawer Cash Day Close)", -1 * Double.parseDouble(txtToDayDrawerCashBalance.getText()));
                    int addAccount1 = AccountsController.addAccount(pettyAccounts);
                    if (addAccount1 > 0) {
                        int addAccount2 = AccountsController.addAccount(drawerAccounts);
                        if (addAccount2 > 0) {
                            JOptionPane.showMessageDialog(this, "Day Successfully Closed !!!", "Success", 1);
                            this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Day Close Failed !!!", "Message", 1);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Day Close Failed !!!", "Message", 1);
                    }
                }
            } catch (IOException | ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }

    private void closepassdyAccountDay() {
        if (!txtToDayDrawerCashBalance.getText().equals("") && !txtToDayPettyCashBalance.getText().equals("")) {
            try {
                String[] allAccount = access.getAllAccount();
                if (allAccount != null) {
                    boolean addAccount = access.updateAccount(allAccount[0], 1);
                    if (addAccount) {
                        Accounts pettyAccounts = new Accounts(0, 1, allAccount[0], null, 1, "close(Petty Cash Day Close)", -1 * Double.parseDouble(txtToDayPettyCashBalance.getText()));
                        Accounts drawerAccounts = new Accounts(0, 1, allAccount[0], null, 2, "close(Drawer Cash Day Close)", -1 * Double.parseDouble(txtToDayDrawerCashBalance.getText()));
                        int addAccount1 = AccountsController.addAccountChq(pettyAccounts);
                        if (addAccount1 > 0) {
                            int addAccount2 = AccountsController.addAccountChq(drawerAccounts);
                            if (addAccount2 > 0) {
                                JOptionPane.showMessageDialog(this, "Day Successfully Closed !!!", "Success", 1);
                                new StartDay(home, true).setVisible(true);
                                this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(this, "Day Close Failed !!!", "Message", 1);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Day Close Failed !!!", "Message", 1);
                        }
                    }
                }
            } catch (IOException | ClassNotFoundException | SQLException ex) {
                StringWriter sw = new StringWriter();
                JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace(new PrintWriter(sw));
                String trace = sw.toString();
                LoggerFileAcceess.exceptionLogger(trace);
            }
        }
    }

    private void searchPassDayCloseAddStartDay() {
        try {
            String[] passDayAccount = access.getAllAccount();
            if (passDayAccount[1].equals("1")) {
                btnToDayCloseAccount.setEnabled(false);
            } else {
                System.out.println(passDayAccount[0]);
                double curPettyCashAmount = 0.0;
                double curDrawerCashAmount = 0.0;
                ArrayList<Accounts> allAccount = AccountsController.getAllAccountAtDate(passDayAccount[0]);
                System.out.println(allAccount);
                if (!allAccount.isEmpty()) {
                    for (Accounts account : allAccount) {
                        if (account.getType() == 1) {
                            curPettyCashAmount += account.getAmount();
                        } else {
                            curDrawerCashAmount += account.getAmount();
                            //                   System.out.println("Drawer   " + account.getAmount());
                        }
                        System.out.println("12547");
                        txtToDayDrawerCashBalance.setText(String.valueOf(curDrawerCashAmount));
                        txtToDayPettyCashBalance.setText(String.valueOf(curPettyCashAmount));
                        lblPettyCashCloseOrNot.setText(" (Not Close) ");
                        lblPettyCashCloseOrNot.setBackground(Color.red);
                        lblDrawerCashCloseOrNot.setText(" (Not Close) ");
                        lblDrawerCashCloseOrNot.setBackground(Color.red);
                    }
                }
                //  System.out.println(curDrawerCashAmount + " Drawer");
                //    System.out.println(curPettyCashAmount + " Petty");
            }
        } catch (IOException | ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }
}
