/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package biz.project.cms.view.accounts;

import biz.project.cms.controller.AccountsController;
import biz.project.cms.controller.UserController;
import biz.project.cms.fileaccess.LoggerFileAcceess;
import biz.project.cms.model.Accounts;
import biz.project.cms.model.User;
import biz.project.cms.other.SearchCombo;
import java.awt.Color;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Theekshana Buddika
 */
public class VewAccountDetails extends javax.swing.JFrame {

    private DefaultComboBoxModel boxModel = null;
    private DefaultTableModel tableModel = null;
    private ArrayList<Accounts> allAccount = null;

    /**
     * Creates new form vVewAccountDetails
     */
    public VewAccountDetails() {
        initComponents();
        //
        UIManager UI = new UIManager();
        UI.put("OptionPane.background", Color.white);
        UI.put("Panel.background", Color.white);
        //
        setLocationRelativeTo(null);
        setTitle("Accounts");
        changeClour();
        boxModel = (DefaultComboBoxModel) cmbUser.getModel();
        tableModel = (DefaultTableModel) tbAccount.getModel();

        loadUsers();
        loadTodayAccounts();
        getTodayIncome();
        makeSearchable();
        tbAccount.setOpaque(true);
        tbAccount.setFillsViewportHeight(true);
        tbAccount.setBackground(Color.WHITE);
        //searchAccounts();
        this.setIconImage(new ImageIcon(getClass().getResource("/image/Home/Logo Company.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblUser = new javax.swing.JLabel();
        cmbUser = new javax.swing.JComboBox<String>();
        lblDate = new javax.swing.JLabel();
        dateDate = new org.jdesktop.swingx.JXDatePicker();
        rbPetiCachType = new javax.swing.JRadioButton();
        rbDrawerCashType = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAccount = new javax.swing.JTable();
        lblUser1 = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        rbAllCashType = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rbWithdrawDesc = new javax.swing.JRadioButton();
        rbAddCashDesc = new javax.swing.JRadioButton();
        rbAllDesc = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fock = new javax.swing.JTextField();
        hlAllAccountDetails = new org.jdesktop.swingx.JXHyperlink();
        jLabel4 = new javax.swing.JLabel();
        lblUser2 = new javax.swing.JLabel();
        txtTodayIncome = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        hlTodayAccount = new org.jdesktop.swingx.JXHyperlink();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Account Details");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblUser.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser.setText("Select User :");

        cmbUser.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cmbUser.setToolTipText("Select User");
        cmbUser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbUserItemStateChanged(evt);
            }
        });
        cmbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserActionPerformed(evt);
            }
        });
        cmbUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbUserKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbUserKeyReleased(evt);
            }
        });

        lblDate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblDate.setText("Select Date :");

        dateDate.setToolTipText("Select Date");
        dateDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateDateActionPerformed(evt);
            }
        });

        rbPetiCachType.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbPetiCachType);
        rbPetiCachType.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbPetiCachType.setText("Petty Cash (F2)");
        rbPetiCachType.setToolTipText("Petty Cash");
        rbPetiCachType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbPetiCachType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPetiCachTypeActionPerformed(evt);
            }
        });

        rbDrawerCashType.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbDrawerCashType);
        rbDrawerCashType.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbDrawerCashType.setText("Drawer Cash (F3)");
        rbDrawerCashType.setToolTipText("Drawer Cash");
        rbDrawerCashType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbDrawerCashType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDrawerCashTypeActionPerformed(evt);
            }
        });

        tbAccount.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        tbAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User", "Date", "Time", "Type", "Description", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAccount.setRowHeight(22);
        tbAccount.setSelectionBackground(new java.awt.Color(0, 204, 102));
        tbAccount.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tbAccount.getTableHeader().setReorderingAllowed(false);
        tbAccount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbAccountMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbAccount);

        lblUser1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser1.setText("Balance Of Table : ");

        txtAmount.setEditable(false);
        txtAmount.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtAmount.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        rbAllCashType.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbAllCashType);
        rbAllCashType.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbAllCashType.setSelected(true);
        rbAllCashType.setText("All (F1)");
        rbAllCashType.setToolTipText("All Cash Types");
        rbAllCashType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbAllCashType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllCashTypeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Select The Description Type ........");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Select The Cash Type ........");

        rbWithdrawDesc.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rbWithdrawDesc);
        rbWithdrawDesc.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbWithdrawDesc.setText("Withdraw Cash (F5)");
        rbWithdrawDesc.setToolTipText("Withdraw Cash");
        rbWithdrawDesc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbWithdrawDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbWithdrawDescActionPerformed(evt);
            }
        });

        rbAddCashDesc.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rbAddCashDesc);
        rbAddCashDesc.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbAddCashDesc.setText("Deposits (F6)");
        rbAddCashDesc.setToolTipText("Add Cash");
        rbAddCashDesc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbAddCashDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAddCashDescActionPerformed(evt);
            }
        });

        rbAllDesc.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rbAllDesc);
        rbAllDesc.setFont(new java.awt.Font("sansserif", 0, 13)); // NOI18N
        rbAllDesc.setSelected(true);
        rbAllDesc.setText("All (F4)");
        rbAllDesc.setToolTipText("All Discriptions");
        rbAllDesc.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rbAllDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllDescActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons/Accounts.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("View Accounts Details");

        fock.setEditable(false);
        fock.setBorder(null);
        fock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fockActionPerformed(evt);
            }
        });
        fock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fockKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hlAllAccountDetails.setText("Click Here.. (F11)");
        hlAllAccountDetails.setToolTipText("Load All Account Details");
        hlAllAccountDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlAllAccountDetailsActionPerformed(evt);
            }
        });

        jLabel4.setText("To View All Account ");

        lblUser2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblUser2.setText("Today Income : ");

        txtTodayIncome.setEditable(false);
        txtTodayIncome.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtTodayIncome.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("To View Today Account ");

        hlTodayAccount.setText("Click Here...  (F12)");
        hlTodayAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hlTodayAccountActionPerformed(evt);
            }
        });
        hlTodayAccount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hlTodayAccountKeyPressed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel7.setText("F1 - All Cash Type     F2 - Petty Cash Type     F3 - Drawer Cash Type     F4 - All Description     F5 - Withdraw Cash     F6 - Deposits     F11 - All Account Details     F12 - Today Account Details     Backcpace-Topforcus");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(rbAllCashType)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbPetiCachType)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbDrawerCashType)))
                                .addGap(256, 256, 256)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(rbAllDesc)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbWithdrawDesc)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbAddCashDesc))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(104, 104, 104)
                                                .addComponent(lblDate)
                                                .addGap(18, 18, 18)
                                                .addComponent(dateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hlAllAccountDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(hlTodayAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblUser2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtTodayIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblUser1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1))
                                .addGap(4, 4, 4))
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUser)
                            .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbPetiCachType)
                            .addComponent(rbAllCashType)
                            .addComponent(rbDrawerCashType)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDate)
                            .addComponent(dateDate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbAllDesc)
                            .addComponent(rbAddCashDesc)
                            .addComponent(rbWithdrawDesc))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblUser1)
                        .addComponent(txtTodayIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblUser2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(hlAllAccountDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(hlTodayAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuBar1.setPreferredSize(new java.awt.Dimension(70, 0));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem2.setText("jMenuItem1");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItem3.setText("jMenuItem1");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem4.setText("jMenuItem1");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem5.setText("jMenuItem1");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem6.setText("jMenuItem1");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem7.setText("jMenuItem1");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItem8.setText("jMenuItem1");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0));
        jMenuItem9.setText("jMenuItem1");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem10.setText("jMenuItem1");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUserActionPerformed

    private void rbDrawerCashTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDrawerCashTypeActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbDrawerCashTypeActionPerformed

    private void dateDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateDateActionPerformed
        searchfromTable();
    }//GEN-LAST:event_dateDateActionPerformed

    private void cmbUserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbUserItemStateChanged
        searchfromTable();
    }//GEN-LAST:event_cmbUserItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        checknull();
    }//GEN-LAST:event_formWindowOpened

    private void rbPetiCachTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPetiCachTypeActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbPetiCachTypeActionPerformed

    private void cmbUserKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbUserKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUserKeyReleased

    private void rbWithdrawDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbWithdrawDescActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbWithdrawDescActionPerformed

    private void rbAllDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllDescActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbAllDescActionPerformed

    private void rbAddCashDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAddCashDescActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbAddCashDescActionPerformed

    private void rbAllCashTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllCashTypeActionPerformed
        searchfromTable();
    }//GEN-LAST:event_rbAllCashTypeActionPerformed

    private void tbAccountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAccountMouseClicked
        if (tbAccount.getSelectedRow() != -1) {
            callUpdate();
        }
    }//GEN-LAST:event_tbAccountMouseClicked

    private void hlAllAccountDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hlAllAccountDetailsActionPerformed
        loadAccounts();
    }//GEN-LAST:event_hlAllAccountDetailsActionPerformed

    private void hlTodayAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hlTodayAccountActionPerformed
        loadTodayAccounts();
    }//GEN-LAST:event_hlTodayAccountActionPerformed

    private void cmbUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbUserKeyPressed

    }//GEN-LAST:event_cmbUserKeyPressed

    private void fockKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fockKeyPressed
    }//GEN-LAST:event_fockKeyPressed

    private void fockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fockActionPerformed

    private void hlTodayAccountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hlTodayAccountKeyPressed
    }//GEN-LAST:event_hlTodayAccountKeyPressed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        cmbUser.requestFocus();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        hlTodayAccount.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        hlAllAccountDetails.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        rbAddCashDesc.doClick();         // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        rbWithdrawDesc.doClick();  // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        rbAllDesc.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        rbDrawerCashType.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        rbPetiCachType.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        rbAllCashType.doClick();        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VewAccountDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VewAccountDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VewAccountDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VewAccountDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VewAccountDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cmbUser;
    private org.jdesktop.swingx.JXDatePicker dateDate;
    private javax.swing.JTextField fock;
    private org.jdesktop.swingx.JXHyperlink hlAllAccountDetails;
    private org.jdesktop.swingx.JXHyperlink hlTodayAccount;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblUser;
    private javax.swing.JLabel lblUser1;
    private javax.swing.JLabel lblUser2;
    private javax.swing.JRadioButton rbAddCashDesc;
    private javax.swing.JRadioButton rbAllCashType;
    private javax.swing.JRadioButton rbAllDesc;
    private javax.swing.JRadioButton rbDrawerCashType;
    private javax.swing.JRadioButton rbPetiCachType;
    private javax.swing.JRadioButton rbWithdrawDesc;
    private javax.swing.JTable tbAccount;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtTodayIncome;
    // End of variables declaration//GEN-END:variables

    private void makeSearchable() {
        SearchCombo searchCombo = new SearchCombo();
        searchCombo.setSearchableCombo(cmbUser, true, "No User Found !", false);
    }

    private void loadUsers() {
        try {
            ArrayList<User> allUsers = UserController.getAllUsers();
            boxModel.removeAllElements();
            boxModel.addElement("-All-");
            for (User user : allUsers) {
                boxModel.addElement(user.getUsername());
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private String getDate() {
        Date date = new Date();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date);
    }

    private void checknull() {
        try {
            ArrayList<Accounts> allAccount1 = AccountsController.getAllAccount();
            if (allAccount1.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Accounts haven't started yet !!!", "Message", 2);
            } else {
                boolean ifHaveRow = false;
                for (Accounts accounts : allAccount1) {
                    if (accounts.getDate().equals(getDate())) {
                        ifHaveRow = true;
                        break;
                    }
                }
                if (!ifHaveRow) {
                    JOptionPane.showMessageDialog(this, "Today accounts haven't started yet !!!", "Message", 2);
                }
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void getTotalAmount() {
        int rowCount = tbAccount.getRowCount();
        double totalAmount = 0.0;
        for (int i = 0; i < rowCount; i++) {
            totalAmount += Double.parseDouble(String.valueOf(tbAccount.getValueAt(i, 5)));
        }
        txtAmount.setText(String.valueOf(totalAmount));
    }

    public void loadAccounts() {
        try {
            allAccount = AccountsController.getAllAccount();
            tableModel.setRowCount(0);
            String type;
            for (Accounts account : allAccount) {
                switch (account.getType()) {
                    case 1:
                        type = "petty Cash";
                        break;
                    case 2:
                        type = "Drawer Cash";
                        break;
                    default:
                        type = "Damage Item";
                        break;
                }
                User searchUser = UserController.searchUserByUserid(account.getUid());
                Object[] row = {searchUser.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                tableModel.addRow(row);
            }
            getTotalAmount();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    public void loadTodayAccounts() {
        try {
            allAccount = AccountsController.getAllAccount();
            tableModel.setRowCount(0);
            String type;
            for (Accounts account : allAccount) {
                if (account.getDate().equals(getDate())) {
                    switch (account.getType()) {
                        case 1:
                            type = "petty Cash";
                            break;
                        case 2:
                            type = "Drawer Cash";
                            break;
                        case 3:
                            type = "Damage Item";
                            break;
                        default:
                            type = "--";
                    }
                    User searchUser = UserController.searchUserByUserid(account.getUid());
                    Object[] row = {searchUser.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                    tableModel.addRow(row);
                }
            }
            getTotalAmount();
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    private void searchfromTable() {
        String user = String.valueOf(cmbUser.getSelectedItem());
        SimpleDateFormat format = new SimpleDateFormat("YYYY-MM-dd");
        String fomDate = format.format(dateDate.getDate());
        String type;
        try {
            User searchUserByUserName = UserController.searchUserByUserName(user);
            if (allAccount != null) {
                if (!allAccount.isEmpty()) {
                    if (fomDate.equals(getDate())) {
                        if (!user.equals("-All-")) {
                            tableModel.setRowCount(0);
                            if (rbPetiCachType.isSelected()) {
                                if (searchUserByUserName != null) {
                                    if (rbAddCashDesc.isSelected()) {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 1) {
                                                type = "petty Cash";
                                                if (account.getDescription().startsWith("Add")) {
                                                    if (account.getUid() == searchUserByUserName.getUid()) {
                                                        if (account.getDate().equals(getDate())) {
                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                            tableModel.addRow(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else if (rbWithdrawDesc.isSelected()) {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 1) {
                                                type = "petty Cash";
                                                if (account.getDescription().startsWith("Withdraw")) {
                                                    if (account.getUid() == searchUserByUserName.getUid()) {
                                                        if (account.getDate().equals(getDate())) {
                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                            tableModel.addRow(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 1) {
                                                type = "petty Cash";
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(getDate())) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }

//                                    if (rbDamageItem.isSelected()) {
//                                        for (Accounts account : allAccount) {
//                                            if (account.getType() == 3) {
//                                                type = "Damage Item";
//                                                if (account.getDescription().equals("Damage Item")) {
//                                                    if (account.getUid() == searchUserByUserName.getUid()) {
//                                                        if (account.getDate().equals(getDate())) {
//                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                            tableModel.addRow(row);
//                                                        }
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
                                }
                            } else if (rbDrawerCashType.isSelected()) {
                                if (searchUserByUserName != null) {
                                    if (rbAddCashDesc.isSelected()) {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 2) {
                                                type = "Drawer Cash";
                                                if (account.getDescription().startsWith("Add")) {
                                                    if (account.getUid() == searchUserByUserName.getUid()) {
                                                        if (account.getDate().equals(getDate())) {
                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                            tableModel.addRow(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else if (rbWithdrawDesc.isSelected()) {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 2) {
                                                type = "Drawer Cash";
                                                if (account.getDescription().startsWith("Withdraw")) {
                                                    if (account.getUid() == searchUserByUserName.getUid()) {
                                                        if (account.getDate().equals(getDate())) {
                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                            tableModel.addRow(row);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        for (Accounts account : allAccount) {
                                            if (account.getType() == 2) {
                                                type = "Drawer Cash";
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(getDate())) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }

//                                    if (rbDamageItem.isSelected()) {
//                                        for (Accounts account : allAccount) {
//                                            if (account.getType() == 3) {
//                                                type = "Damage Item";
//                                                if (account.getDescription().equals("Damage Item")) {
//                                                    if (account.getUid() == searchUserByUserName.getUid()) {
//                                                        if (account.getDate().equals(getDate())) {
//                                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                            tableModel.addRow(row);
//                                                        }
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
                                }
                            } else if (searchUserByUserName != null) {
                                if (rbAddCashDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                        } else if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                        } else {
                                            type = "Damage Item";
                                        }
                                        if (account.getDescription().startsWith("Add")) {
                                            if (account.getUid() == searchUserByUserName.getUid()) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else if (rbWithdrawDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                        } else if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                        } else {
                                            type = "Damage Item";
                                        }
                                        if (account.getDescription().startsWith("Withdraw")) {
                                            if (account.getUid() == searchUserByUserName.getUid()) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                        } else if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                        } else {
                                            type = "Damage Item";
                                        }
                                        if (account.getUid() == searchUserByUserName.getUid()) {
                                            if (account.getDate().equals(getDate())) {
                                                Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }

//                                if (rbDamageItem.isSelected()) {
//                                    for (Accounts account : allAccount) {
//                                        if (account.getType() == 3) {
//                                            type = "Damage Item";
//                                            if (account.getDescription().equals("Damage Item")) {
//                                                if (account.getUid() == searchUserByUserName.getUid()) {
//                                                    if (account.getDate().equals(getDate())) {
//                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                        tableModel.addRow(row);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
                            }

//                            if (rbDamageItem.isSelected()) {
//                                for (Accounts account : allAccount) {
//                                    if (account.getType() == 3) {
//                                        type = "Damage Item";
//                                        if (account.getDescription().equals("Damage Item")) {
//                                            //if (account.getUid() == searchUserByUserName.getUid()) {
//                                            if (account.getDate().equals(getDate())) {
//                                                Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                tableModel.addRow(row);
//                                            }
//                                            //}
//                                        }
//                                    }
//                                }
//                            }
                        } else {
                            tableModel.setRowCount(0);
                            if (rbPetiCachType.isSelected()) {
                                if (rbAddCashDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getDescription().startsWith("Add")) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else if (rbWithdrawDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getDescription().startsWith("Withdraw")) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getDate().equals(getDate())) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }

//                                if (rbDamageItem.isSelected()) {
//                                    for (Accounts account : allAccount) {
//                                        if (account.getType() == 3) {
//                                            type = "Damage Item";
//                                            if (account.getDescription().equals("Damage Item")) {
//                                                //if (account.getUid() == searchUserByUserName.getUid()) {
//                                                if (account.getDate().equals(getDate())) {
//                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                    tableModel.addRow(row);
//                                                }
//                                                //}
//                                            }
//                                        }
//                                    }
//                                }
                            } else if (rbDrawerCashType.isSelected()) {
                                if (rbAddCashDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getDescription().startsWith("Add")) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else if (rbWithdrawDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getDescription().startsWith("Withdraw")) {
                                                if (account.getDate().equals(getDate())) {
                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (Accounts account : allAccount) {
                                        User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getDate().equals(getDate())) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }

//                                if (rbDamageItem.isSelected()) {
//                                    for (Accounts account : allAccount) {
//                                        if (account.getType() == 3) {
//                                            type = "Damage Item";
//                                            User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
//                                            if (account.getDescription().equals("Damage Item")) {
//                                                if (account.getUid() == searchUserByUserid.getUid()) {
//                                                    if (account.getDate().equals(getDate())) {
//                                                        Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                        tableModel.addRow(row);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
                            } else if (rbAddCashDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    if (account.getDescription().startsWith("Add")) {
                                        if (account.getDate().equals(getDate())) {
                                            Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                            tableModel.addRow(row);
                                        }
                                    }
                                }
                            } else if (rbWithdrawDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    if (account.getDescription().startsWith("Withdraw")) {
                                        if (account.getDate().equals(getDate())) {
                                            Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                            tableModel.addRow(row);
                                        }
                                    }
                                }
                            } else {
                                for (Accounts account : allAccount) {
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    User searchUser = UserController.searchUserByUserid(account.getUid());
                                    if (account.getDate().equals(getDate())) {
                                        Object[] row = {searchUser.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                        tableModel.addRow(row);
                                    }
                                }
                            }

//                            if (rbDamageItem.isSelected()) {
//                                for (Accounts account : allAccount) {
//                                    if (account.getType() == 3) {
//                                        type = "Damage Item";
//                                        User searchUser = UserController.searchUserByUserid(account.getUid());
//                                        if (account.getDescription().equals("Damage Item")) {
//                                            if (account.getUid() == searchUser.getUid()) {
//                                                if (account.getDate().equals(getDate())) {
//                                                    Object[] row = {searchUser.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                    tableModel.addRow(row);
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
//                            }
                        }

                    } else if (!user.equals("-All-")) {
                        tableModel.setRowCount(0);
                        if (rbPetiCachType.isSelected()) {
                            if (searchUserByUserName != null) {
                                if (rbAddCashDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getDescription().startsWith("Add")) {
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(fomDate)) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (rbWithdrawDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getDescription().startsWith("Withdraw")) {
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(fomDate)) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 1) {
                                            type = "petty Cash";
                                            if (account.getUid() == searchUserByUserName.getUid()) {
                                                if (account.getDate().equals(fomDate)) {
                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                }

//                                if (rbDamageItem.isSelected()) {
//                                    for (Accounts account : allAccount) {
//                                        if (account.getType() == 3) {
//                                            type = "Damage Item";
//                                            if (account.getDescription().equals("Damage Item")) {
//                                                if (account.getUid() == searchUserByUserName.getUid()) {
//                                                    if (account.getDate().equals(fomDate)) {
//                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                        tableModel.addRow(row);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
                            }
                        } else if (rbDrawerCashType.isSelected()) {
                            if (searchUserByUserName != null) {
                                if (rbAddCashDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getDescription().startsWith("Add")) {
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(fomDate)) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (rbWithdrawDesc.isSelected()) {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getDescription().startsWith("Withdraw")) {
                                                if (account.getUid() == searchUserByUserName.getUid()) {
                                                    if (account.getDate().equals(fomDate)) {
                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                        tableModel.addRow(row);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    for (Accounts account : allAccount) {
                                        if (account.getType() == 2) {
                                            type = "Drawer Cash";
                                            if (account.getUid() == searchUserByUserName.getUid()) {
                                                if (account.getDate().equals(fomDate)) {
                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                    tableModel.addRow(row);
                                                }
                                            }
                                        }
                                    }
                                }

//                                if (rbDamageItem.isSelected()) {
//                                    for (Accounts account : allAccount) {
//                                        if (account.getType() == 3) {
//                                            type = "Damage Item";
//                                            if (account.getDescription().equals("Damage Item")) {
//                                                if (account.getUid() == searchUserByUserName.getUid()) {
//                                                    if (account.getDate().equals(fomDate)) {
//                                                        Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                        tableModel.addRow(row);
//                                                    }
//                                                }
//                                            }
//                                        }
//                                    }
//                                }
                            }
                        } else if (searchUserByUserName != null) {
                            if (rbAddCashDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    if (account.getDescription().startsWith("Add")) {
                                        if (account.getUid() == searchUserByUserName.getUid()) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else if (rbWithdrawDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    if (account.getDescription().startsWith("Withdraw")) {
                                        if (account.getUid() == searchUserByUserName.getUid()) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else {
                                for (Accounts account : allAccount) {
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                    } else if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                    } else {
                                        type = "Damage Item";
                                    }
                                    if (account.getUid() == searchUserByUserName.getUid()) {
                                        if (account.getDate().equals(fomDate)) {
                                            Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                            tableModel.addRow(row);
                                        }
                                    }
                                }
                            }

//                            if (rbDamageItem.isSelected()) {
//                                for (Accounts account : allAccount) {
//                                    if (account.getType() == 3) {
//                                        type = "Damage Item";
//                                        if (account.getDescription().equals("Damage Item")) {
//                                            //if (searchUserByUserName != null) {
//                                            if (account.getUid() == searchUserByUserName.getUid()) {
//                                                if (account.getDate().equals(fomDate)) {
//                                                    Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                    tableModel.addRow(row);
//                                                }
//                                            }
//                                            //}
//                                        }
//                                    }
//                                }
//                            }
                        }

                    } else {
                        tableModel.setRowCount(0);
                        if (rbPetiCachType.isSelected()) {
                            if (rbAddCashDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                        if (account.getDescription().startsWith("Add")) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else if (rbWithdrawDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                        if (account.getDescription().startsWith("Withdraw")) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 1) {
                                        type = "petty Cash";
                                        if (account.getDate().equals(fomDate)) {
                                            Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                            tableModel.addRow(row);
                                        }
                                    }
                                }
                            }

//                            if (rbDamageItem.isSelected()) {
//                                for (Accounts account : allAccount) {
//                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
//                                    if (account.getType() == 3) {
//                                        type = "Damage Item";
//                                        if (account.getDescription().equals("Damage Item")) {
//                                            //if (searchUserByUserName != null) {
//                                            if (account.getUid() == searchUserByUserid.getUid()) {
//                                                if (account.getDate().equals(fomDate)) {
//                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                    tableModel.addRow(row);
//                                                }
//                                            }
//                                            //}
//                                        }
//                                    }
//                                }
//                            }
                        } else if (rbDrawerCashType.isSelected()) {
                            if (rbAddCashDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                        if (account.getDescription().startsWith("Add")) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else if (rbWithdrawDesc.isSelected()) {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                        if (account.getDescription().startsWith("Withdraw")) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            } else {
                                for (Accounts account : allAccount) {
                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                    if (account.getType() == 2) {
                                        type = "Drawer Cash";
                                        if (account.getDate().equals(fomDate)) {
                                            Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                            tableModel.addRow(row);
                                        }
                                    }
                                }
                            }

//                            if (rbDamageItem.isSelected()) {
//                                for (Accounts account : allAccount) {
//                                    User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
//                                    if (account.getType() == 3) {
//                                        type = "Damage Item";
//                                        if (account.getDescription().equals("Damage Item")) {
//                                            //if (searchUserByUserName != null) {
//                                            if (account.getUid() == searchUserByUserid.getUid()) {
//                                                if (account.getDate().equals(fomDate)) {
//                                                    Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
//                                                    tableModel.addRow(row);
//                                                }
//                                            }
//                                            //}
//                                        }
//                                    }
//                                }
//                            }
                        } else if (rbAddCashDesc.isSelected()) {
                            for (Accounts account : allAccount) {
                                User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                if (account.getType() == 1) {
                                    type = "petty Cash";
                                } else if (account.getType() == 2) {
                                    type = "Drawer Cash";
                                } else {
                                    type = "Damage Item";
                                }
                                if (account.getDescription().startsWith("Add")) {
                                    if (account.getDate().equals(fomDate)) {
                                        Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                        tableModel.addRow(row);
                                    }
                                }
                            }
                        } else if (rbWithdrawDesc.isSelected()) {
                            for (Accounts account : allAccount) {
                                User searchUserByUserid = UserController.searchUserByUserid(account.getUid());
                                if (account.getType() == 1) {
                                    type = "petty Cash";
                                } else if (account.getType() == 2) {
                                    type = "Drawer Cash";
                                } else {
                                    type = "Damage Item";
                                }
                                if (account.getDescription().startsWith("Withdraw")) {
                                    if (account.getDate().equals(fomDate)) {
                                        Object[] row = {searchUserByUserid.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                        tableModel.addRow(row);
                                    }
                                }
                            }
                        } else if (rbAllDesc.isSelected()) {
                            for (Accounts account : allAccount) {
                                if (account.getType() == 1) {
                                    type = "petty Cash";
                                } else if (account.getType() == 2) {
                                    type = "Drawer Cash";
                                } else {
                                    type = "Damage Item";
                                }
                                User searchUser = UserController.searchUserByUserid(account.getUid());
                                if (account.getDate().equals(fomDate)) {
                                    Object[] row = {searchUser.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                    tableModel.addRow(row);
                                }
                            }
                        } else {
                            for (Accounts account : allAccount) {
                                if (account.getType() == 3) {
                                    type = "Damage Item";
                                    User searchUser = UserController.searchUserByUserid(account.getUid());
                                    if (account.getDescription().equals("Damage Item")) {
                                        if (account.getUid() == searchUser.getUid()) {
                                            if (account.getDate().equals(fomDate)) {
                                                Object[] row = {searchUserByUserName.getUsername(), account.getDate(), account.getTime(), type, account.getDescription(), account.getAmount()};
                                                tableModel.addRow(row);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Accounts haven't started yet !!!", "Message", 2);
                }
            } else {
                //JOptionPane.showMessageDialog(this, "Accounts are not start yet !!!", "Important Message", 2);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        } finally {
            getTotalAmount();
        }
    }

    private void changeClour() {

    }

    private void callUpdate() {
        try {
            int selectedRow = tbAccount.getSelectedRow();
            int userId = 0;
            String userName = String.valueOf(tbAccount.getValueAt(selectedRow, 0));
            User searchUserByUserName = UserController.searchUserByUserName(userName);
            if (searchUserByUserName != null) {
                userId = searchUserByUserName.getUid();
            }
            String date = String.valueOf(tbAccount.getValueAt(selectedRow, 1));
            String time = String.valueOf(tbAccount.getValueAt(selectedRow, 2));
            String type = String.valueOf(tbAccount.getValueAt(selectedRow, 3));
            String decription = String.valueOf(tbAccount.getValueAt(selectedRow, 4));
            double amount = Double.parseDouble(String.valueOf(tbAccount.getValueAt(selectedRow, 5)));
            if (!type.equals("Damage Item")) {
                new UpdateAccount(this, true, userId, userName, date, time, type, decription, amount).setVisible(true);
            }

        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

    public void getTodayIncome() {
        double income = 0.0;
        try {
            ArrayList<Accounts> allAccountAtDate = AccountsController.getAllAccountAtDate(getDate());
            for (Accounts accounts : allAccountAtDate) {
                if (!accounts.getDescription().equals("Add(Day Start)")) {
                    if (!accounts.getDescription().startsWith("Withdraw")) {
                        income += accounts.getAmount();
                    }
                }
            }
            txtTodayIncome.setText(String.valueOf(income));
        } catch (ClassNotFoundException | SQLException ex) {
            StringWriter sw = new StringWriter();
            JOptionPane.showMessageDialog(this, ex.getMessage());
            ex.printStackTrace(new PrintWriter(sw));
            String trace = sw.toString();
            LoggerFileAcceess.exceptionLogger(trace);
        }
    }

}
